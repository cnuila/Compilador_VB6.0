// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Santos-Dell-Laptop/Desktop/Proyecto Compi/Compilador_VB6.0/Lexer.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\22\0\1\4\1\0\1\5"+
    "\3\0\1\6\1\7\1\10\1\11\2\12\1\0\1\12"+
    "\1\13\1\12\12\14\2\0\1\15\1\16\1\17\2\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\2\26\1\30\1\31\1\32\1\33\1\34\1\26\1\35"+
    "\1\36\1\37\1\40\1\26\1\41\3\26\4\0\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\2\26\1\54\1\55\1\56\1\57\1\60"+
    "\1\26\1\61\1\62\1\63\1\64\1\65\1\26\1\66"+
    "\2\26\12\0\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\3\13\22\14\1\1\1\3\2\15"+
    "\1\3\1\0\1\14\1\16\3\14\1\17\5\14\1\20"+
    "\5\14\1\21\6\14\1\22\3\14\1\0\1\23\2\14"+
    "\1\24\4\14\1\25\4\14\1\26\5\14\1\27\4\14"+
    "\2\30\3\14\1\31\1\0\3\14\1\32\1\14\1\33"+
    "\3\14\1\34\2\14\1\35\1\36\6\14\5\0\1\37"+
    "\7\14\1\40\1\41\3\14\1\42\1\43\7\0\1\14"+
    "\1\44\1\14\1\45\1\46\1\47\1\14\1\50\2\14"+
    "\2\0\1\51\1\0\1\52\2\0\1\53\1\54\1\14"+
    "\1\0\1\14\3\0\1\55\1\0\1\14\5\0\1\56"+
    "\1\0\1\57\5\0\1\60\1\0\1\61\2\0\1\62"+
    "\5\0\1\63\5\0\1\64\2\0\1\65\2\0\1\66"+
    "\1\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\245\0\u0113\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\u014a\0\u0181\0\245"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\245\0\245\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u0339\0\u06e0\0\u0717\0\u074e\0\u0339\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0339\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u0339\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0339\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0339\0\u0bd1"+
    "\0\u0c08\0\u0339\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0339\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0339\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0339\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\245"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u0339\0\u11d5\0\u0339\0\u120c\0\u1243\0\u127a\0\u0339\0\u12b1"+
    "\0\u12e8\0\u0339\0\u0339\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u0339\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u0339\0\u0339"+
    "\0\u16fd\0\u1734\0\u176b\0\u0339\0\245\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u0339\0\u195a\0\u0339"+
    "\0\u0339\0\u0339\0\u1991\0\u0339\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\245\0\u1aa4\0\245\0\u1adb\0\u1b12\0\u0339\0\u0339\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\245\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\245\0\u1e14\0\u0339"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\245\0\u1f5e\0\245"+
    "\0\u1f95\0\u1fcc\0\245\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\245\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\245\0\u2229"+
    "\0\u2260\0\245\0\u2297\0\u22ce\0\245\0\u2305\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\4\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\24\30\1\45\3\0\1\45\1\46"+
    "\62\45\1\47\1\0\1\46\63\45\72\0\1\6\67\0"+
    "\1\50\1\0\1\51\74\0\1\16\70\0\2\20\65\0"+
    "\1\20\64\0\1\30\3\0\36\30\1\52\3\30\1\53"+
    "\4\30\14\0\1\30\3\0\37\30\1\54\7\30\14\0"+
    "\1\30\3\0\37\30\1\55\7\30\14\0\1\30\3\0"+
    "\33\30\1\56\3\30\1\57\7\30\14\0\1\30\3\0"+
    "\34\30\1\60\1\30\1\61\7\30\1\62\14\0\1\30"+
    "\3\0\23\30\1\63\13\30\1\64\7\30\14\0\1\30"+
    "\3\0\47\30\14\0\1\30\3\0\30\30\1\65\5\30"+
    "\1\66\10\30\14\0\1\30\3\0\37\30\1\67\7\30"+
    "\14\0\1\30\3\0\37\30\1\70\7\30\14\0\1\30"+
    "\3\0\27\30\1\71\7\30\1\72\7\30\14\0\1\30"+
    "\3\0\41\30\1\73\5\30\14\0\1\30\3\0\41\30"+
    "\1\74\2\30\1\75\2\30\14\0\1\30\3\0\27\30"+
    "\1\76\17\30\14\0\1\30\3\0\43\30\1\77\1\100"+
    "\2\30\14\0\1\30\3\0\32\30\1\101\4\30\1\102"+
    "\1\30\1\103\5\30\14\0\1\30\3\0\36\30\1\104"+
    "\10\30\14\0\1\30\3\0\32\30\1\105\14\30\20\0"+
    "\22\30\1\0\24\30\3\0\1\46\67\0\1\50\124\0"+
    "\1\106\40\0\1\30\3\0\26\30\1\107\20\30\14\0"+
    "\1\30\3\0\37\30\1\110\7\30\14\0\1\30\3\0"+
    "\36\30\1\111\10\30\14\0\1\30\3\0\35\30\1\112"+
    "\11\30\14\0\1\30\3\0\42\30\1\113\4\30\14\0"+
    "\1\30\3\0\26\30\1\114\20\30\14\0\1\30\3\0"+
    "\33\30\1\115\13\30\14\0\1\30\3\0\34\30\1\116"+
    "\12\30\14\0\1\30\3\0\41\30\1\117\5\30\14\0"+
    "\1\30\3\0\43\30\1\120\3\30\14\0\1\30\3\0"+
    "\37\30\1\121\7\30\14\0\1\30\3\0\26\30\1\122"+
    "\20\30\14\0\1\30\3\0\46\30\1\123\14\0\1\30"+
    "\3\0\43\30\1\124\3\30\14\0\1\30\3\0\33\30"+
    "\1\125\13\30\14\0\1\30\3\0\24\30\1\126\22\30"+
    "\14\0\1\30\3\0\43\30\1\127\3\30\14\0\1\30"+
    "\3\0\27\30\1\130\11\30\1\131\5\30\14\0\1\30"+
    "\3\0\24\30\1\132\22\30\14\0\1\30\3\0\27\30"+
    "\1\133\17\30\14\0\1\30\3\0\44\30\1\134\2\30"+
    "\14\0\1\30\3\0\43\30\1\135\3\30\14\0\1\30"+
    "\3\0\33\30\1\136\13\30\1\0\1\137\1\0\1\140"+
    "\77\0\1\30\3\0\34\30\1\141\12\30\14\0\1\30"+
    "\3\0\42\30\1\142\1\143\3\30\14\0\1\30\3\0"+
    "\27\30\1\144\17\30\4\0\1\145\7\0\1\30\3\0"+
    "\47\30\14\0\1\30\3\0\43\30\1\146\3\30\14\0"+
    "\1\30\3\0\42\30\1\147\4\30\14\0\1\30\3\0"+
    "\27\30\1\150\17\30\14\0\1\30\3\0\40\30\1\151"+
    "\6\30\14\0\1\30\3\0\44\30\1\152\2\30\14\0"+
    "\1\30\3\0\43\30\1\153\3\30\14\0\1\30\3\0"+
    "\45\30\1\154\1\30\14\0\1\30\3\0\34\30\1\155"+
    "\12\30\14\0\1\30\3\0\44\30\1\156\2\30\14\0"+
    "\1\30\3\0\40\30\1\157\6\30\14\0\1\30\3\0"+
    "\33\30\1\160\10\30\1\161\2\30\14\0\1\30\3\0"+
    "\36\30\1\162\10\30\14\0\1\30\3\0\27\30\1\163"+
    "\17\30\14\0\1\30\3\0\33\30\1\164\13\30\14\0"+
    "\1\30\3\0\34\30\1\165\12\30\3\0\1\140\77\0"+
    "\1\30\3\0\27\30\1\166\17\30\14\0\1\30\3\0"+
    "\37\30\1\167\7\30\14\0\1\30\3\0\33\30\1\170"+
    "\13\30\14\0\1\30\3\0\7\30\1\171\37\30\27\0"+
    "\1\172\1\0\1\173\4\0\1\174\2\0\1\175\31\0"+
    "\1\176\7\0\1\30\3\0\47\30\14\0\1\30\3\0"+
    "\27\30\1\177\17\30\14\0\1\30\3\0\31\30\1\200"+
    "\15\30\14\0\1\30\3\0\34\30\1\201\12\30\14\0"+
    "\1\30\3\0\23\30\1\202\23\30\14\0\1\30\3\0"+
    "\33\30\1\203\13\30\14\0\1\30\3\0\41\30\1\204"+
    "\5\30\14\0\1\30\3\0\36\30\1\205\10\30\14\0"+
    "\1\30\3\0\25\30\1\206\21\30\14\0\1\30\3\0"+
    "\34\30\1\207\12\30\14\0\1\30\3\0\27\30\1\210"+
    "\17\30\14\0\1\30\3\0\23\30\1\211\23\30\14\0"+
    "\1\30\3\0\34\30\1\212\12\30\14\0\1\30\3\0"+
    "\36\30\1\213\10\30\14\0\1\30\3\0\30\30\1\214"+
    "\16\30\50\0\1\215\75\0\1\216\72\0\1\217\1\220"+
    "\54\0\1\221\37\0\1\222\1\0\1\223\13\0\1\224"+
    "\41\0\1\30\3\0\27\30\1\225\17\30\14\0\1\30"+
    "\3\0\27\30\1\226\17\30\14\0\1\30\3\0\43\30"+
    "\1\227\3\30\14\0\1\30\3\0\25\30\1\230\21\30"+
    "\14\0\1\30\3\0\36\30\1\231\10\30\14\0\1\30"+
    "\3\0\31\30\1\232\15\30\14\0\1\30\3\0\43\30"+
    "\1\233\3\30\14\0\1\30\3\0\36\30\1\234\10\30"+
    "\14\0\1\30\3\0\27\30\1\235\17\30\14\0\1\30"+
    "\3\0\44\30\1\236\2\30\46\0\1\237\101\0\1\240"+
    "\51\0\1\241\75\0\1\242\72\0\1\243\66\0\1\244"+
    "\61\0\1\245\30\0\1\30\3\0\41\30\1\246\5\30"+
    "\14\0\1\30\3\0\27\30\1\247\17\30\14\0\1\30"+
    "\3\0\44\30\1\250\2\30\13\0\1\251\1\30\3\0"+
    "\47\30\14\0\1\30\3\0\27\30\1\252\17\30\64\0"+
    "\1\253\66\0\1\254\56\0\1\255\73\0\1\256\60\0"+
    "\1\257\27\0\1\30\3\0\41\30\1\260\5\30\35\0"+
    "\1\261\3\0\1\262\31\0\1\263\7\0\1\30\3\0"+
    "\47\30\54\0\1\264\57\0\1\265\70\0\1\266\73\0"+
    "\1\267\26\0\1\30\3\0\27\30\1\270\17\30\47\0"+
    "\1\271\100\0\1\272\30\0\1\273\1\0\1\274\13\0"+
    "\1\275\74\0\1\276\102\0\1\277\52\0\1\300\62\0"+
    "\1\301\76\0\1\302\72\0\1\303\66\0\1\304\61\0"+
    "\1\305\100\0\1\306\50\0\1\307\103\0\1\310\64\0"+
    "\1\311\60\0\1\312\74\0\1\313\35\0\1\314\105\0"+
    "\1\315\73\0\1\316\61\0\1\317\72\0\1\320\43\0"+
    "\1\321\105\0\1\322\75\0\1\323\63\0\1\324\62\0"+
    "\1\325\75\0\1\326\57\0\1\327\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\6\11\2\1\1\11"+
    "\24\1\2\11\2\1\1\0\34\1\1\0\31\1\1\11"+
    "\4\1\1\0\24\1\5\0\16\1\1\11\7\0\12\1"+
    "\2\0\1\11\1\0\1\11\2\0\3\1\1\0\1\1"+
    "\3\0\1\11\1\0\1\1\5\0\1\11\1\0\1\1"+
    "\5\0\1\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\5\0\1\11\2\0\1\11\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Token no reconocido en: " + yyline + " " + yycolumn);
            }
            // fall through
          case 56: break;
          case 2:
            { System.out.println("ENTER");
            }
            // fall through
          case 57: break;
          case 3:
            { 
            }
            // fall through
          case 58: break;
          case 4:
            { System.out.println("STRING");yybegin(STRING);
            }
            // fall through
          case 59: break;
          case 5:
            { System.out.println("CONCAT STRING");
            }
            // fall through
          case 60: break;
          case 6:
            { System.out.println("COMENTARIO");yybegin(COMENTARIO);
            }
            // fall through
          case 61: break;
          case 7:
            { System.out.println("INICIO PARENTESIS");
            }
            // fall through
          case 62: break;
          case 8:
            { System.out.println("FIN PARENTESIS");
            }
            // fall through
          case 63: break;
          case 9:
            { System.out.println("OP ARIT");
            }
            // fall through
          case 64: break;
          case 10:
            { System.out.println("INTEGER");
            }
            // fall through
          case 65: break;
          case 11:
            { System.out.println("OP REL");
            }
            // fall through
          case 66: break;
          case 12:
            { System.out.println("IDENTIFICADOR");
            }
            // fall through
          case 67: break;
          case 13:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 14:
            { System.out.println("AS");
            }
            // fall through
          case 69: break;
          case 15:
            { System.out.println("DO");
            }
            // fall through
          case 70: break;
          case 16:
            { System.out.println("IF");
            }
            // fall through
          case 71: break;
          case 17:
            { System.out.println("OR");
            }
            // fall through
          case 72: break;
          case 18:
            { System.out.println("TO");
            }
            // fall through
          case 73: break;
          case 19:
            { System.out.println("AND");
            }
            // fall through
          case 74: break;
          case 20:
            { System.out.println("DIM");
            }
            // fall through
          case 75: break;
          case 21:
            { System.out.println("FOR");
            }
            // fall through
          case 76: break;
          case 22:
            { System.out.println("NOT");
            }
            // fall through
          case 77: break;
          case 23:
            { System.out.println("SUB");
            }
            // fall through
          case 78: break;
          case 24:
            { System.out.println("EXTENDER STRING");
            }
            // fall through
          case 79: break;
          case 25:
            { System.out.println("ELSE");
            }
            // fall through
          case 80: break;
          case 26:
            { System.out.println("LOOP");
            }
            // fall through
          case 81: break;
          case 27:
            { System.out.println("NEXT");
            }
            // fall through
          case 82: break;
          case 28:
            { System.out.println("STEP");
            }
            // fall through
          case 83: break;
          case 29:
            { System.out.println("THEN");
            }
            // fall through
          case 84: break;
          case 30:
            { System.out.println("TRUE");
            }
            // fall through
          case 85: break;
          case 31:
            { System.out.println("FALSE");
            }
            // fall through
          case 86: break;
          case 32:
            { System.out.println("UNTIL");
            }
            // fall through
          case 87: break;
          case 33:
            { System.out.println("WHILE");
            }
            // fall through
          case 88: break;
          case 34:
            { System.out.println("ELSE IF");
            }
            // fall through
          case 89: break;
          case 35:
            { System.out.println("END IF");
            }
            // fall through
          case 90: break;
          case 36:
            { System.out.println("MODULE");
            }
            // fall through
          case 91: break;
          case 37:
            { System.out.println("PUBLIC");
            }
            // fall through
          case 92: break;
          case 38:
            { System.out.println("RETURN");
            }
            // fall through
          case 93: break;
          case 39:
            { System.out.println("STRINGTYPE");
            }
            // fall through
          case 94: break;
          case 40:
            { System.out.println("BOOLEANTYPE");
            }
            // fall through
          case 95: break;
          case 41:
            { System.out.println("END SUB");
            }
            // fall through
          case 96: break;
          case 42:
            { System.out.println("EXIT DO");
            }
            // fall through
          case 97: break;
          case 43:
            { System.out.println("INTEGERTYPE");
            }
            // fall through
          case 98: break;
          case 44:
            { System.out.println("PRIVATE");
            }
            // fall through
          case 99: break;
          case 45:
            { System.out.println("EXIT FOR");
            }
            // fall through
          case 100: break;
          case 46:
            { System.out.println("ENDW HILE");
            }
            // fall through
          case 101: break;
          case 47:
            { System.out.println("STRUCTURE");
            }
            // fall through
          case 102: break;
          case 48:
            { System.out.println("END MODULE");
            }
            // fall through
          case 103: break;
          case 49:
            { System.out.println("EXIT WHILE");
            }
            // fall through
          case 104: break;
          case 50:
            { System.out.println("CONTINUE DO");
            }
            // fall through
          case 105: break;
          case 51:
            { System.out.println("CONTINUE FOR");
            }
            // fall through
          case 106: break;
          case 52:
            { System.out.println("END STRUCTURE");
            }
            // fall through
          case 107: break;
          case 53:
            { System.out.println("CONTINUE WHILE");
            }
            // fall through
          case 108: break;
          case 54:
            { System.out.println("READ CONSOLE");
            }
            // fall through
          case 109: break;
          case 55:
            { System.out.println("WRITE IN CONSOLE");
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
