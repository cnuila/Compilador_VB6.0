// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Documents/Compiladores/Compilador_VB6.0/Lexer.flex

import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\22\0\1\4\1\0\1\5"+
    "\3\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\13\1\15\1\12\12\16\2\0\1\17\1\20\1\21"+
    "\2\0\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\33\1\41\1\42\1\43\1\44\1\33\1\45\1\46"+
    "\2\33\4\0\1\47\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\33\1\41\1\42\1\43\1\44"+
    "\1\33\1\45\1\46\2\33\12\0\1\2\252\0\2\50"+
    "\115\0\1\51\u01a8\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\21\17\3\1\1\20\1\21\1\3\2\22\1\3\1\0"+
    "\1\15\1\17\2\23\3\17\1\24\1\0\5\17\1\25"+
    "\5\17\1\26\4\17\1\27\3\17\1\25\4\0\1\30"+
    "\2\17\2\31\1\17\1\0\1\32\1\17\1\0\1\17"+
    "\1\33\4\17\1\34\3\17\1\35\4\17\4\0\1\35"+
    "\2\36\3\17\1\0\2\37\2\40\1\17\1\0\1\17"+
    "\1\41\1\17\1\42\1\17\1\43\2\17\1\0\1\44"+
    "\1\45\1\17\1\0\1\17\2\0\1\43\1\0\3\17"+
    "\2\0\1\17\1\0\2\46\5\17\1\0\2\47\2\50"+
    "\2\0\3\17\2\0\2\51\1\17\1\52\1\53\1\54"+
    "\1\17\1\54\2\0\1\55\2\17\2\0\1\56\1\17"+
    "\1\56\2\0\2\57\1\17\3\0\2\60\14\0\1\61"+
    "\1\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\176\0\322\0\176"+
    "\0\176\0\176\0\176\0\176\0\176\0\176\0\176\0\374"+
    "\0\u0126\0\176\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\176"+
    "\0\176\0\176\0\u04c2\0\176\0\u04ec\0\u0516\0\176\0\u0540"+
    "\0\u0276\0\176\0\u056a\0\u0594\0\u05be\0\u0276\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u0276\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u0276\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u0276"+
    "\0\u085e\0\u0888\0\u08b2\0\176\0\u08dc\0\u0906\0\u0930\0\u095a"+
    "\0\u0276\0\u0984\0\u09ae\0\u0276\0\176\0\u09d8\0\u0a02\0\u0276"+
    "\0\u0a2c\0\u0a56\0\u0a80\0\u0276\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28"+
    "\0\u0276\0\u0b52\0\u0b7c\0\u0ba6\0\u0276\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\176\0\u0d20\0\176"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0276\0\176"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0276\0\u0ec4\0\u0276\0\u0eee\0\u0276"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\u0276\0\u0276\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\176\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u0276\0\176\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u128a\0\u0276\0\176\0\u0276\0\176\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u0276\0\176"+
    "\0\u13da\0\u0276\0\u0276\0\u0276\0\u1404\0\176\0\u142e\0\u1458"+
    "\0\u0276\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u0276\0\u152a\0\176"+
    "\0\u1554\0\u157e\0\u0276\0\176\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\u0276\0\176\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722"+
    "\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\176\0\u1848"+
    "\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\32\1\33\1\32\1\34\1\35\1\36\1\37\1\32"+
    "\1\40\1\41\1\42\1\43\1\44\1\32\1\45\1\46"+
    "\1\47\1\50\3\0\1\50\1\51\44\50\1\52\1\53"+
    "\1\0\1\54\46\52\55\0\1\6\52\0\1\55\1\0"+
    "\1\56\61\0\1\20\53\0\2\57\50\0\1\57\47\0"+
    "\1\32\3\0\14\32\1\60\3\32\1\61\5\32\1\0"+
    "\1\62\16\0\1\32\3\0\15\32\1\63\10\32\20\0"+
    "\1\32\3\0\15\32\1\64\10\32\20\0\1\32\3\0"+
    "\10\32\1\65\4\32\1\66\10\32\1\67\17\0\1\32"+
    "\3\0\12\32\1\70\1\32\1\71\7\32\1\72\1\32"+
    "\20\0\1\32\3\0\1\73\14\32\1\74\10\32\20\0"+
    "\1\32\3\0\26\32\20\0\1\32\3\0\5\32\1\75"+
    "\6\32\1\76\11\32\20\0\1\32\3\0\15\32\1\77"+
    "\10\32\20\0\1\32\3\0\15\32\1\100\10\32\20\0"+
    "\1\32\3\0\4\32\1\101\10\32\1\102\10\32\20\0"+
    "\1\32\3\0\17\32\1\103\6\32\20\0\1\32\3\0"+
    "\4\32\1\104\21\32\20\0\1\32\3\0\21\32\1\105"+
    "\1\106\3\32\20\0\1\32\3\0\7\32\1\107\5\32"+
    "\1\110\1\32\1\111\6\32\20\0\1\32\3\0\14\32"+
    "\1\112\11\32\20\0\1\32\3\0\7\32\1\113\16\32"+
    "\24\0\25\32\32\0\1\114\6\0\1\115\56\0\1\116"+
    "\1\117\10\0\1\54\52\0\1\55\114\0\1\120\20\0"+
    "\1\32\3\0\3\32\1\121\22\32\20\0\1\32\3\0"+
    "\15\32\1\122\10\32\20\0\1\32\3\0\14\32\1\123"+
    "\11\32\20\0\1\32\3\0\13\32\1\124\12\32\37\0"+
    "\1\125\32\0\1\32\3\0\20\32\1\126\5\32\1\0"+
    "\1\127\16\0\1\32\3\0\3\32\1\130\22\32\20\0"+
    "\1\32\3\0\10\32\1\131\15\32\1\132\17\0\1\32"+
    "\3\0\12\32\1\133\13\32\20\0\1\32\3\0\17\32"+
    "\1\134\6\32\20\0\1\32\3\0\21\32\1\135\4\32"+
    "\20\0\1\32\3\0\15\32\1\136\10\32\20\0\1\32"+
    "\3\0\3\32\1\137\22\32\20\0\1\32\3\0\24\32"+
    "\1\140\1\32\20\0\1\32\3\0\21\32\1\141\4\32"+
    "\20\0\1\32\3\0\21\32\1\142\4\32\20\0\1\32"+
    "\3\0\4\32\1\143\12\32\1\144\6\32\20\0\1\32"+
    "\3\0\1\32\1\145\24\32\20\0\1\32\3\0\4\32"+
    "\1\146\21\32\20\0\1\32\3\0\22\32\1\147\3\32"+
    "\20\0\1\32\3\0\21\32\1\150\4\32\20\0\1\32"+
    "\3\0\10\32\1\151\15\32\1\152\44\0\1\153\34\0"+
    "\1\154\12\0\1\155\33\0\1\156\27\0\1\157\1\0"+
    "\1\160\64\0\1\32\3\0\12\32\1\161\13\32\20\0"+
    "\1\32\3\0\20\32\1\162\1\163\4\32\1\0\1\164"+
    "\16\0\1\32\3\0\4\32\1\165\21\32\30\0\1\166"+
    "\41\0\1\32\3\0\21\32\1\167\4\32\45\0\1\170"+
    "\24\0\1\32\3\0\20\32\1\171\5\32\1\0\1\172"+
    "\16\0\1\32\3\0\4\32\1\173\21\32\20\0\1\32"+
    "\3\0\16\32\1\174\7\32\20\0\1\32\3\0\22\32"+
    "\1\175\3\32\20\0\1\32\3\0\21\32\1\176\4\32"+
    "\20\0\1\32\3\0\22\32\1\177\3\32\20\0\1\32"+
    "\3\0\16\32\1\200\7\32\20\0\1\32\3\0\10\32"+
    "\1\201\11\32\1\202\3\32\1\203\17\0\1\32\3\0"+
    "\14\32\1\204\11\32\20\0\1\32\3\0\4\32\1\205"+
    "\21\32\20\0\1\32\3\0\10\32\1\206\15\32\1\207"+
    "\17\0\1\32\3\0\12\32\1\210\13\32\36\0\1\211"+
    "\43\0\1\212\63\0\1\213\43\0\1\203\11\0\1\214"+
    "\3\0\1\203\4\0\1\160\64\0\1\32\3\0\4\32"+
    "\1\215\21\32\20\0\1\32\3\0\15\32\1\216\10\32"+
    "\20\0\1\32\3\0\10\32\1\217\15\32\1\220\40\0"+
    "\1\221\30\0\1\32\3\0\10\32\1\222\15\32\1\223"+
    "\33\0\1\223\15\0\1\223\17\0\1\32\3\0\4\32"+
    "\1\224\21\32\30\0\1\225\41\0\1\32\3\0\6\32"+
    "\1\226\17\32\20\0\1\32\3\0\12\32\1\227\13\32"+
    "\20\0\1\32\3\0\17\32\1\230\6\32\20\0\1\32"+
    "\3\0\14\32\1\231\11\32\20\0\1\32\3\0\2\32"+
    "\1\232\23\32\40\0\1\233\31\0\1\32\3\0\12\32"+
    "\1\234\13\32\36\0\1\235\33\0\1\32\3\0\4\32"+
    "\1\236\21\32\30\0\1\237\53\0\1\240\45\0\1\241"+
    "\43\0\1\32\3\0\1\242\25\32\20\0\1\32\3\0"+
    "\12\32\1\243\13\32\20\0\1\32\3\0\14\32\1\244"+
    "\11\32\40\0\1\245\47\0\1\246\33\0\1\32\3\0"+
    "\5\32\1\247\20\32\31\0\1\250\40\0\1\32\3\0"+
    "\4\32\1\251\21\32\20\0\1\32\3\0\4\32\1\252"+
    "\21\32\20\0\1\32\3\0\14\32\1\253\11\32\20\0"+
    "\1\32\3\0\6\32\1\254\17\32\20\0\1\32\3\0"+
    "\21\32\1\255\4\32\32\0\1\256\47\0\1\257\66\0"+
    "\1\260\24\0\1\32\3\0\14\32\1\261\11\32\20\0"+
    "\1\32\3\0\4\32\1\262\21\32\20\0\1\32\3\0"+
    "\22\32\1\263\3\32\46\0\1\264\33\0\1\265\41\0"+
    "\1\32\3\0\17\32\1\266\6\32\20\0\1\32\3\0"+
    "\22\32\1\267\3\32\43\0\1\270\54\0\1\271\22\0"+
    "\1\272\1\32\3\0\26\32\20\0\1\32\3\0\4\32"+
    "\1\273\21\32\30\0\1\274\40\0\1\272\52\0\1\32"+
    "\3\0\17\32\1\275\6\32\43\0\1\276\51\0\1\277"+
    "\3\0\1\300\22\0\1\32\3\0\4\32\1\301\21\32"+
    "\30\0\1\302\51\0\1\303\64\0\1\304\32\0\1\305"+
    "\61\0\1\306\15\0\1\306\26\0\1\307\67\0\1\310"+
    "\42\0\1\311\43\0\1\312\55\0\1\313\15\0\1\313"+
    "\35\0\1\314\53\0\1\315\45\0\1\316\15\0\1\316"+
    "\27\0\1\317\61\0\1\320\41\0\1\321\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6258];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\10\11\2\1\1\11"+
    "\25\1\3\11\1\1\1\11\1\1\1\0\1\11\2\1"+
    "\1\11\4\1\1\0\24\1\1\11\4\0\4\1\1\11"+
    "\1\1\1\0\2\1\1\0\17\1\4\0\1\11\1\1"+
    "\1\11\3\1\1\0\3\1\1\11\1\1\1\0\10\1"+
    "\1\0\3\1\1\0\1\1\2\0\1\11\1\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\11\5\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\0\3\1\2\0\1\1\1\11"+
    "\5\1\1\11\2\0\3\1\2\0\2\1\1\11\2\0"+
    "\1\1\1\11\1\1\3\0\1\1\1\11\14\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error léxico en: " + yyline + " " + yycolumn);
            }
            // fall through
          case 51: break;
          case 2:
            { System.out.println("enter");return new Symbol(sym.saltoLinea,yyline,yycolumn,yytext());
            }
            // fall through
          case 52: break;
          case 3:
            { 
            }
            // fall through
          case 53: break;
          case 4:
            { cadena+="\"";yybegin(STRING);
            }
            // fall through
          case 54: break;
          case 5:
            { return new Symbol(sym.CONCATSTRING,yyline,yycolumn,yytext());
            }
            // fall through
          case 55: break;
          case 6:
            { yybegin(COMENTARIO);
            }
            // fall through
          case 56: break;
          case 7:
            { return new Symbol(sym.PARENTESISL,yyline,yycolumn,yytext());
            }
            // fall through
          case 57: break;
          case 8:
            { return new Symbol(sym.PARENTESISR,yyline,yycolumn,yytext());
            }
            // fall through
          case 58: break;
          case 9:
            { return new Symbol(sym.OPMULTI,yyline,yycolumn,yytext());
            }
            // fall through
          case 59: break;
          case 10:
            { return new Symbol(sym.OPADICION,yyline,yycolumn,yytext());
            }
            // fall through
          case 60: break;
          case 11:
            { return new Symbol(sym.COMA,yyline,yycolumn,yytext());
            }
            // fall through
          case 61: break;
          case 12:
            { return new Symbol(sym.INTEGER,yyline,yycolumn,yytext());
            }
            // fall through
          case 62: break;
          case 13:
            { return new Symbol(sym.OPREL,yyline,yycolumn,yytext());
            }
            // fall through
          case 63: break;
          case 14:
            { System.out.println("IGUAL");return new Symbol(sym.IGUAL,yyline,yycolumn,yytext());
            }
            // fall through
          case 64: break;
          case 15:
            { System.out.println(yytext());return new Symbol(sym.identificador,yyline,yycolumn,yytext());
            }
            // fall through
          case 65: break;
          case 16:
            { cadena+=yytext();
            }
            // fall through
          case 66: break;
          case 17:
            { String temp = cadena + "\""; cadena="";yybegin(YYINITIAL);return new Symbol(sym.STRING,yyline,yycolumn,temp);
            }
            // fall through
          case 67: break;
          case 18:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 19:
            { System.out.println("AS");return new Symbol(sym.AS,yyline,yycolumn,yytext());
            }
            // fall through
          case 69: break;
          case 20:
            { return new Symbol(sym.DO,yyline,yycolumn,yytext());
            }
            // fall through
          case 70: break;
          case 21:
            { return new Symbol(sym.IF,yyline,yycolumn,yytext());
            }
            // fall through
          case 71: break;
          case 22:
            { return new Symbol(sym.OR,yyline,yycolumn,yytext());
            }
            // fall through
          case 72: break;
          case 23:
            { return new Symbol(sym.TO,yyline,yycolumn,yytext());
            }
            // fall through
          case 73: break;
          case 24:
            { return new Symbol(sym.AND,yyline,yycolumn,yytext());
            }
            // fall through
          case 74: break;
          case 25:
            { System.out.println("DIM");return new Symbol(sym.DIM,yyline,yycolumn,yytext());
            }
            // fall through
          case 75: break;
          case 26:
            { return new Symbol(sym.END,yyline,yycolumn,yytext());
            }
            // fall through
          case 76: break;
          case 27:
            { return new Symbol(sym.FOR,yyline,yycolumn,yytext());
            }
            // fall through
          case 77: break;
          case 28:
            { return new Symbol(sym.NOT,yyline,yycolumn,yytext());
            }
            // fall through
          case 78: break;
          case 29:
            { return new Symbol(sym.SUB,yyline,yycolumn,yytext());
            }
            // fall through
          case 79: break;
          case 30:
            { return new Symbol(sym.EXTSTRING,yyline,yycolumn,yytext());
            }
            // fall through
          case 80: break;
          case 31:
            { return new Symbol(sym.ELSE,yyline,yycolumn,yytext());
            }
            // fall through
          case 81: break;
          case 32:
            { return new Symbol(sym.EXIT,yyline,yycolumn,yytext());
            }
            // fall through
          case 82: break;
          case 33:
            { return new Symbol(sym.LOOP,yyline,yycolumn,yytext());
            }
            // fall through
          case 83: break;
          case 34:
            { return new Symbol(sym.NEXT,yyline,yycolumn,yytext());
            }
            // fall through
          case 84: break;
          case 35:
            { return new Symbol(sym.STEP,yyline,yycolumn,yytext());
            }
            // fall through
          case 85: break;
          case 36:
            { return new Symbol(sym.THEN,yyline,yycolumn,yytext());
            }
            // fall through
          case 86: break;
          case 37:
            { return new Symbol(sym.TRUE,yyline,yycolumn,yytext());
            }
            // fall through
          case 87: break;
          case 38:
            { return new Symbol(sym.FALSE,yyline,yycolumn,yytext());
            }
            // fall through
          case 88: break;
          case 39:
            { return new Symbol(sym.UNTIL,yyline,yycolumn,yytext());
            }
            // fall through
          case 89: break;
          case 40:
            { return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
            }
            // fall through
          case 90: break;
          case 41:
            { return new Symbol(sym.ELSEIF,yyline,yycolumn,yytext());
            }
            // fall through
          case 91: break;
          case 42:
            { return new Symbol(sym.MODULE,yyline,yycolumn,yytext());
            }
            // fall through
          case 92: break;
          case 43:
            { return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
            }
            // fall through
          case 93: break;
          case 44:
            { return new Symbol(sym.STRINGTYPE,yyline,yycolumn,yytext());
            }
            // fall through
          case 94: break;
          case 45:
            { return new Symbol(sym.BOOLEANTYPE,yyline,yycolumn,yytext());
            }
            // fall through
          case 95: break;
          case 46:
            { return new Symbol(sym.INTEGERTYPE,yyline,yycolumn,yytext());
            }
            // fall through
          case 96: break;
          case 47:
            { return new Symbol(sym.CONTINUE,yyline,yycolumn,yytext());
            }
            // fall through
          case 97: break;
          case 48:
            { return new Symbol(sym.STRUCTURE,yyline,yycolumn,yytext());
            }
            // fall through
          case 98: break;
          case 49:
            { System.out.println("READ CONSOLE");
            }
            // fall through
          case 99: break;
          case 50:
            { System.out.println("WRITE IN CONSOLE");
            }
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
