import java_cup.runtime.Symbol;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Syntax error");
    }

    //public void unrecovered_syntax_error
:}


terminal IF, ELSE, END, THEN, ELSEIF, IGUAL, identificador, saltoLinea, DIM, COMA, AS, BOOLEANTYPE, TRUE, FALSE, INTEGERTYPE, INTEGER, STRINGTYPE, OPREL, OPADICION, OPMULTI, AND, OR, NOT, MODULE, SUB, PARENTESISL, PARENTESISR, CONTINUE, EXIT, FOR, TO, NEXT, STEP, STRUCTURE, WHILE, DO, UNTIL, LOOP, RETURN, CONCATSTRING, STRING, FUNCTION;

nonterminal INICIO, MDLINSTRUC, MDLINP, SUBPROCE, SUBINSTRUC, SIFSUB, PARAMS, FUNC,FUNCINSTRUC, SIFFUNC, CONDICION, CONDICIONP, VALCOND, OPCONDICION, TIPO, TIPOIGUAL, CANTVARS, VARS, T, DECLARACION, OPARIT, OP, OPP, VALASIGN, VALINT, ASIGN, ASIGNINT, UNIRSTRNG, OPASING, ASIGNOTRO;

precedence left IGUAL;
precedence left OPREL;
precedence left OPADICION;
precedence left OPMULTI;

start with INICIO;

INICIO      ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE {:System.out.println("Listo Module");:};

//Instrucciones dentro del Module
MDLINSTRUC  ::= DECLARACION MDLINSTRUC | saltoLinea MDLINSTRUC | FUNC MDLINSTRUC | SUBPROCE MDLINP;
MDLINP      ::= DECLARACION MDLINP | saltoLinea MDLINP | SUBPROCE MDLINP | FUNC MDLINP | ;

//Instrucciones de un subprocedure
SUBPROCE    ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB;

SUBINSTRUC  ::= DECLARACION saltoLinea SUBINSTRUC | saltoLinea SUBINSTRUC | EXIT SUB saltoLinea SUBINSTRUC | ASIGN saltoLinea SUBINSTRUC| ;

SUBINSTRUC  ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF SUBINSTRUC
                                            {:
                                                System.out.println("if terminado");
                                            :}                                            
;
SIFSUB      ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB | ELSE saltoLinea SUBINSTRUC |;

//Instrucciones de una función
FUNC        ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION;

FUNCINSTRUC ::= DECLARACION saltoLinea FUNCINSTRUC | saltoLinea FUNCINSTRUC | EXIT FUNCTION saltoLinea FUNCINSTRUC | ASIGN saltoLinea FUNCINSTRUC | {:System.out.println("vacio");:};

FUNCINSTRUC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF FUNCINSTRUC
                                            {:
                                                System.out.println("if terminado");
                                            :}                                            
;
SIFFUNC     ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC | ELSE saltoLinea SIFFUNC |;

//gramática condiciones
CONDICION   ::= CONDICION AND CONDICIONP | CONDICION OR CONDICIONP | NOT CONDICIONP;
CONDICION   ::= CONDICIONP {:System.out.println("ok");:};
CONDICIONP  ::= identificador OPCONDICION VALCOND | VALCOND OPCONDICION identificador | VALCOND OPCONDICION VALCOND | identificador OPCONDICION identificador;
OPCONDICION ::= OPREL | IGUAL;              

VALCOND     ::= VALASIGN | VALINT;

//gramática parámetros
PARAMS      ::=  VARS | ;

//gramática asignacion
ASIGN       ::= ASIGNOTRO | ASIGNINT;

ASIGNOTRO   ::= identificador IGUAL VALASIGN;
VALASIGN    ::= STRING | TRUE | FALSE | UNIRSTRNG;
UNIRSTRNG   ::= STRING CONCATSTRING STRING;

ASIGNINT    ::= identificador OPASING VALINT;
OPASING     ::= IGUAL | OPMULTI IGUAL | OPADICION IGUAL;
VALINT      ::= OPARIT;

//gramática operaciones aritméticas
OPARIT      ::= OPARIT OPADICION OP | OP;
OP          ::= OP OPMULTI OPP | OPP;
OPP         ::= INTEGER | PARENTESISL OPARIT PARENTESISR;

//gramática declaración de variables
DECLARACION ::= DIM T;
T           ::= identificador AS TIPOIGUAL | identificador AS TIPO COMA VARS | identificador COMA CANTVARS AS TIPO COMA VARS | identificador COMA CANTVARS AS TIPO;
VARS        ::= CANTVARS AS TIPO COMA VARS | CANTVARS AS TIPO;
CANTVARS    ::= CANTVARS COMA identificador | identificador;
TIPOIGUAL   ::= INTEGERTYPE IGUAL OPARIT | STRINGTYPE IGUAL STRING | BOOLEANTYPE IGUAL TRUE | BOOLEANTYPE IGUAL FALSE | STRINGTYPE IGUAL UNIRSTRNG;
TIPO        ::= INTEGERTYPE | STRINGTYPE | BOOLEANTYPE;

//restantes
SUBINSTRUC  ::= CONTINUE EXIT FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP RETURN;



