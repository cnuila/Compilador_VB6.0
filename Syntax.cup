import java_cup.runtime.Symbol;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Syntax error");
    }

    //public void unrecovered_syntax_error
:}


terminal IF, ELSE, END, THEN, ELSEIF, IGUAL, identificador, saltoLinea, DIM, COMA, AS, BOOLEANTYPE, TRUE, FALSE, INTEGERTYPE, INTEGER, STRINGTYPE, OPREL, OPADICION, OPMULTI, AND, OR, NOT, MODULE, SUB, PARENTESISL, PARENTESISR, EXTSTRING, CONTINUE, EXIT, FOR, TO, NEXT, STEP, STRUCTURE, WHILE, DO, UNTIL, LOOP, RETURN, CONCATSTRING, STRING;

nonterminal STATEMENT, SIGUIENTEIF, CONDICION, CONDICIONP, VALOR, OPCONDICION, TIPO, TIPOIGUAL, CANTVARS, VARS, T, DECLARACION;

start with STATEMENT;

STATEMENT   ::= IF CONDICION THEN saltoLinea STATEMENT SIGUIENTEIF END IF STATEMENT
                                            {:
                                                System.out.println("if terminado");
                                            :}                                            
;
SIGUIENTEIF ::= ELSEIF CONDICION THEN saltoLinea STATEMENT SIGUIENTEIF | ELSE saltoLinea STATEMENT |;

STATEMENT   ::= DECLARACION saltoLinea STATEMENT | saltoLinea | {:System.out.println("vacio");:};

CONDICION   ::= CONDICION AND CONDICIONP | CONDICION OR CONDICIONP | NOT CONDICIONP;
CONDICION   ::= CONDICIONP {:System.out.println("ok");:};
CONDICIONP  ::= identificador OPCONDICION VALOR | VALOR OPCONDICION identificador;
OPCONDICION ::= OPREL | IGUAL;              

VALOR       ::= INTEGER | TRUE | FALSE | STRING;

DECLARACION ::= DIM T;
T           ::= identificador AS TIPOIGUAL | identificador AS TIPO COMA VARS | identificador COMA CANTVARS AS TIPO COMA VARS | identificador COMA CANTVARS AS TIPO;
VARS        ::= CANTVARS AS TIPO COMA VARS | CANTVARS AS TIPO;
CANTVARS    ::= CANTVARS COMA identificador | identificador;
TIPOIGUAL   ::= INTEGERTYPE IGUAL INTEGER | STRINGTYPE IGUAL STRING | BOOLEANTYPE IGUAL TRUE | BOOLEANTYPE IGUAL FALSE;
TIPO        ::= INTEGERTYPE | STRINGTYPE | BOOLEANTYPE;

STATEMENT   ::= OPADICION OPMULTI MODULE SUB PARENTESISL PARENTESISR EXTSTRING CONTINUE EXIT FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP RETURN CONCATSTRING;



