import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code
{:
    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();
    public TablaSimbolos tablaSimbolos = new TablaSimbolos(); 
    public int offset = 0;
    public int cantVarsCreadas = 0;    

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }
:}

terminal IF, ELSE, END, THEN, ELSEIF, IGUAL, STRUCTURE, saltoLinea, DIM, COMA, AS, BOOLEANTYPE, TRUE, FALSE, INTEGERTYPE, STRINGTYPE, AND, OR, NOT, NEW, MODULE, SUB, PARENTESISL, PARENTESISR, EXIT, FOR, TO, NEXT, WHILE, DO, LOOP, RETURN, CONCATSTRING, FUNCTION, READ, WRITE;
terminal String identificador, STRING, INTEGER, OPADICION, OPMULTI, OPREL,PUNTO;

nonterminal S;
nonterminal Nodo STATEMENTS,MDLINSTRUC, SUBPROCE, FUNC, WRCONSOLE, STRUCTINSTRUC, UNIRSTRNG, VALWR, OPARIT, VARS, DECLARACION, T, PARAMCALL, VARCALL, OPASIGN, ASIGN, CONDICION, CONDICIONP, RETVAL, SIFSTATEMENT, IFSTATEMENT, SUBINSTRUC, FUNCINSTRUC,STRUCTUREDECLA, FORSTATEMENT, DOWHILESTATE, COUNTER,LLAMADOSTRUC;
nonterminal String VALUNIRSTR, TIPO, OPCONDICION;
nonterminal Objeto CANTVARS, CANTVARS2, VARPARAMS, PARAMS, VARS2, VALOR, CALL;
nonterminal Marcador M;

precedence left IGUAL;
precedence left OPREL;
precedence left OPADICION, OR;
precedence left OPMULTI,AND;
precedence left NOT;

start with S;

S      ::= MODULE identificador:id saltoLinea MDLINSTRUC:m END MODULE {:
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        :}
            | error identificador saltoLinea MDLINSTRUC END MODULE {: errores.add("Se esparaba un MODULE"); :}
            | MODULE error saltoLinea MDLINSTRUC END MODULE {: errores.add("Se esperaba un identificador para el module"); :}
            | MODULE identificador error MDLINSTRUC END MODULE {: errores.add("Se esperaba un salto de línea en el encabezado del module"); :}
            | MODULE identificador saltoLinea MDLINSTRUC error MODULE {: errores.add("Se esperaba un END"); :}
            | MODULE identificador saltoLinea MDLINSTRUC END error {: errores.add("Se esperaba un MODULE al final del archivo"); :}
; 

//Instrucciones dentro del Module
MDLINSTRUC  ::= DECLARACION:d MDLINSTRUC:md {:                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                :}
                | saltoLinea MDLINSTRUC:md {:
                    if (md != null){
                        RESULT=md;
                    }
                :}
                | FUNC:f MDLINSTRUC:md {:                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                :}
                | SUBPROCE:s MDLINSTRUC:md {:                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                :}
                | STRUCTUREDECLA:sd MDLINSTRUC:md {:                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    node.addHijo(md);
                    RESULT=node;
                :}
                | saltoLinea {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                :}
;

//Intrucciones de una Structure
STRUCTUREDECLA   ::= STRUCTURE identificador:id M:m saltoLinea STRUCTINSTRUC:s END STRUCTURE {:
                            Nodo node = new Nodo("STRUCTURE",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++; 
                            node.addHijo(s);  
                            tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas - m.getNum());

                            RESULT = node;
                :}
                     | STRUCTURE error M:m saltoLinea STRUCTINSTRUC END STRUCTURE {: errores.add("Se esperaba un identificador para la structure"); :}
                     | STRUCTURE identificador M:m error STRUCTINSTRUC END STRUCTURE {: errores.add("Se esperaba un salto de linea"); :}
                     | STRUCTURE identificador M:m saltoLinea STRUCTINSTRUC END error {: errores.add("Se esperaba un identificador para la structure"); :}
;

STRUCTINSTRUC   ::= DECLARACION:d STRUCTINSTRUC:s {:
                        Nodo node = new Nodo("STATEMENTS",parser.cont);
                        parser.cont++;
                        node.addHijo(d);
                        if (s != null){
                        node.addHijo(s);   
                        }                    
                        RESULT = node;
                    :} 
                    | saltoLinea STRUCTINSTRUC:s {:
                        if (s != null){
                            RESULT = s;   
                        }
                    :}
                    |   {:
                        Nodo node = new Nodo("VACIO",parser.cont);
                        parser.cont++;                                   
                        RESULT = node;
                    :}
;

//Instrucciones de un subprocedure
SUBPROCE    ::= SUB identificador:id M:m PARENTESISL PARAMS:p PARENTESISR saltoLinea STATEMENTS:s END SUB {:
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p.getNodo());
                        }
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas - m.getNum());

                        tablaSimbolos.agregarID(id,p.getTipo()+"->void",0,"");
                        offset = m.getNum2();                        
                        cantVarsCreadas = m.getNum();                                                

                        RESULT=node;
                :}
                | SUB error M PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB {: errores.add("Se esperaba un identificador para el sub"); :}
                | SUB identificador M error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB {: errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); :}
                | SUB identificador M PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB {: errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); :}
                | SUB identificador M PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB {: errores.add("Se esperaba un salto de linea en el encabezado del sub"); :}
;

//Instrucciones de una función
FUNC        ::= FUNCTION identificador:id M:m PARENTESISL PARAMS:p PARENTESISR AS TIPO:t saltoLinea STATEMENTS:s END FUNCTION {:
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p.getNodo() != null){
                            node.addHijo(p.getNodo());
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas - m.getNum());

                        tablaSimbolos.agregarID(id,p.getTipo()+"->"+t,0,"");
                        offset = m.getNum2();                        
                        cantVarsCreadas = m.getNum();

                        RESULT=node;
                :}
                | FUNCTION error M PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un identificador para la función"); :}
                | FUNCTION identificador M error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); :}
                | FUNCTION identificador M PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); :}
                | FUNCTION identificador M PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un AS en el encabezado de la función"); :}
                | FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un TIPO en el encabezado de la función"); :}
                | FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION {: errores.add("Se esperaba un salto de línea en el encabezado de la función"); :}
;

//gramática parámetros
PARAMS      ::=  VARPARAMS:v {:
                    RESULT = v;
                :} 
                | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;

                    Objeto retVal = new Objeto(node,"void");
                    RESULT = retVal;
                :}
;

VARPARAMS      ::= identificador:id AS TIPO:t COMA VARS2:v {:
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,t,offset,"");

                        Objeto retVal = new Objeto(node, t+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    :}
                    |identificador:id COMA CANTVARS2:c COMA VARS2:v {:
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+c.getAcumulada()+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    :}
                    | identificador:id COMA CANTVARS2:c {: 
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+ c.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    :}
                    | identificador:id AS TIPO:t {:
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;

                        tablaSimbolos.agregarID(id,t,offset,""); 

                        Objeto retVal = new Objeto(node,t); 
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    :}
;

VARS2           ::= CANTVARS2:c COMA VARS2:v {:
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v.getNodo());

                    Objeto retVal = new Objeto(node, c.getTipo(), c.getAcumulada()+v.getAcumulada());
                    RESULT = retVal;
                :}
                | CANTVARS2:c {:
                    RESULT = c;
                :}                
;

CANTVARS2       ::= identificador:id COMA CANTVARS2:c {:
                        Nodo node = new Nodo("VARS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, c.getTipo(),"x"+c.getTipo()+c.getAcumulada());                                                    

                        RESULT=retVal;   
                    :}
                    | identificador:id AS TIPO:t {:
                        Nodo node = new Nodo("VARS",parser.cont);   
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;           
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        
                        tablaSimbolos.agregarID(id,t,offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, t,"x"+t);                                                          

                        RESULT=retVal;
                    :}
;

//statements
STATEMENTS  ::= DECLARACION:d STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                :}
                | saltoLinea STATEMENTS:s {:
                    if (s != null){
                        RESULT = s;   
                    }
                :}
                | EXIT SUB STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :}
                | EXIT FUNCTION STATEMENTS:s {:
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                :}
                | ASIGN:a STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;                    
                :}
                | RETVAL:r STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                :}
                | CALL:c STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMETNS",parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                :}
                | WRCONSOLE:w STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :}
                | IFSTATEMENT:i STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :}
                | FORSTATEMENT:f STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :}
                |  DOWHILESTATE:d STATEMENTS:s {:
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :}
                | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                :}
                | error STATEMENTS {: errores.add("Error desconocido"); :}
                | error SUB STATEMENTS {: errores.add("Se esperaba un EXIT o END"); :}
                | error FUNC STATEMENTS {: errores.add("Se esperaba un EXIT o END"); :} 
;    

IFSTATEMENT ::= IF CONDICION:c THEN M:m saltoLinea STATEMENTS:s SIFSTATEMENT:s2 END IF {:
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    
                    int cantVars = cantVarsCreadas - m.getNum();
                    tablaSimbolos.agregarAmbito("IF.", cantVars);
                    offset -= tablaSimbolos.disminuirOffset(cantVars);

                    RESULT = node;
                :}
                | IF error THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF {: errores.add("Error en codición del if"); :}
                | IF CONDICION error M saltoLinea STATEMENTS SIFSTATEMENT END IF {: errores.add("Se esperaba un THEN"); :}
                | IF CONDICION THEN M error STATEMENTS SIFSTATEMENT END IF {: errores.add("Se esperaba un salto de linea"); :}
                | IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END error {: errores.add("Se esperaba un IF"); :}
;

SIFSTATEMENT ::= ELSEIF CONDICION:c THEN saltoLinea STATEMENTS:s SIFSTATEMENT:s2 {:
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                :}
                | ELSE saltoLinea STATEMENTS:s {:
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                :} 
                | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                :}                
                | ELSEIF error THEN saltoLinea STATEMENTS SIFSTATEMENT {: errores.add("Error en la condición"); :}
                | ELSEIF CONDICION error saltoLinea STATEMENTS SIFSTATEMENT {: errores.add("Se esperaba un THEN"); :}
                | ELSEIF CONDICION THEN error STATEMENTS SIFSTATEMENT {: errores.add("Se esperaba un salto de línea"); :}
                | ELSE error STATEMENTS {: errores.add("Se esperaba un salto de línea"); :}
;

DOWHILESTATE  ::= DO WHILE CONDICION:c M:m saltoLinea STATEMENTS:s LOOP{:
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (s != null){
                                node.addHijo(s);
                            }

                            int cantVars = cantVarsCreadas - m.getNum();
                            tablaSimbolos.agregarAmbito("DOWHILE.", cantVars);
                            offset -= tablaSimbolos.disminuirOffset(cantVars);

                            RESULT = node;
                :}
                | error WHILE CONDICION M saltoLinea STATEMENTS LOOP {: errores.add("Se esperaba un DO"); :}
                | DO error CONDICION M saltoLinea STATEMENTS LOOP {: errores.add("Se esperaba un WHILE"); :}
                | DO WHILE error M saltoLinea STATEMENTS LOOP {: errores.add("Error en la condicion"); :}
                | DO WHILE CONDICION M error STATEMENTS LOOP {: errores.add("Se esperaba un salto de linea"); :}           
;

FORSTATEMENT  ::= FOR COUNTER:c TO VALOR:v M:m saltoLinea STATEMENTS:s NEXT{:
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(v.getNodo());
                            if (s != null){
                                node.addHijo(s);
                            }

                            int cantVars = cantVarsCreadas - m.getNum();
                            tablaSimbolos.agregarAmbito("FOR.", cantVars);
                            offset -= tablaSimbolos.disminuirOffset(cantVars);

                            RESULT = node;
                :}
                | error COUNTER TO VALOR M saltoLinea STATEMENTS NEXT {: errores.add("Se esperaba un FOR"); :}
                | FOR error TO VALOR M saltoLinea STATEMENTS NEXT {: errores.add("Error en la asignacion del contador del for"); :}
                | FOR COUNTER error VALOR M saltoLinea STATEMENTS NEXT {: errores.add("Se esperaba un TO"); :}
                | FOR COUNTER TO VALOR M error STATEMENTS NEXT {: errores.add("Se esperaba un salto de linea"); :}
;

RETVAL      ::= RETURN VALOR:v {:
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    RESULT = node;
                :}
;

//Instrucciones del for
COUNTER     ::= identificador:id OPASIGN:o VALOR:v {:
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v.getNodo());
                    RESULT = o;
                :} 
                | identificador:id AS INTEGERTYPE IGUAL VALOR:v{:
                            Nodo node = new Nodo("=",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            node.addHijo(new Nodo("INTEGER",parser.cont));
                            parser.cont++;
                            node.addHijo(v.getNodo());
                            RESULT = node;
                :}
                | error AS INTEGERTYPE IGUAL VALOR {: errores.add("Se esperaba un identificador"); :}
;

//llamado de funcion o sub procedure
CALL        ::= identificador:id PARENTESISL PARAMCALL:p PARENTESISR {:
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }      
                    Objeto retVal = new Objeto(node,id);              
                    RESULT = retVal;
                :}
                | error PARENTESISL PARAMCALL PARENTESISR {: errores.add("Se esperaba identificador"); :}
;                

PARAMCALL   ::= VARCALL:v {:
                    RESULT=v;
                :} 
                | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                :}
;

VARCALL     ::= VALOR:val COMA VARCALL:v {:
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(val.getNodo());
                    node.addHijo(v);
                    RESULT = node;
                :}
                | VALOR:v {:
                    RESULT = v.getNodo();
                :}
                | error {: errores.add("Error en parametros"); :}
;

//gramática condiciones
CONDICION   ::=  CONDICIONP:c AND CONDICION:c1 {:
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);                    
                    RESULT=node;
                :}
                | CONDICIONP:c OR CONDICION:c1 {:
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);                    
                    RESULT=node;
                :}
                | NOT CONDICIONP:c {:
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                :}
                | CONDICIONP:c {: 
                    RESULT = c; 
                :}
;

CONDICIONP  ::= VALOR:v OPCONDICION:o VALOR:v2 {:
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node;
                :}
;

OPCONDICION ::= OPREL:o {: 
                    RESULT=o;
                :} 
                | IGUAL {: 
                    RESULT="=";
                :}
;

LLAMADOSTRUC ::= identificador:id PUNTO identificador:id2 {:
                    Nodo node = new Nodo("PUNTO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(id2,parser.cont));
                    parser.cont++;

                    RESULT = node;
                :}
;

//gramática asignacion
ASIGN       ::= identificador:id OPASIGN:o VALOR:v {:
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v.getNodo());
                    RESULT=o;
                :}
                | identificador:id IGUAL READ {:
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("read.console",parser.cont));
                    parser.cont++;
                    RESULT = node;
                :}
                | LLAMADOSTRUC:l OPASIGN:o VALOR:v {:
                    o.addHijo(l);                    
                    o.addHijo(v.getNodo());
                    RESULT=o;
                :}
; 

UNIRSTRNG   ::= VALUNIRSTR:v CONCATSTRING UNIRSTRNG:ustr {:
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);
                    RESULT= node;
                :} 
                | VALUNIRSTR:v CONCATSTRING VALUNIRSTR:v2 {:
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(v2,parser.cont));
                    parser.cont++;
                    RESULT= node;
                :}
;

VALUNIRSTR  ::= STRING:str {: RESULT=str.substring(1,str.length()-1); :} | identificador:id {:RESULT=id;:} | error {: errores.add("Se esperaba un valor String"); :};

OPASIGN     ::= IGUAL {:
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                :} 
                | OPMULTI:op IGUAL {:
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                :}  
                | OPADICION:op IGUAL {:
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                :}  
;

//gramática operaciones aritméticas
OPARIT      ::= OPARIT:o OPADICION:oPa VALOR:v {:                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(o);                    
                    RESULT = node;                  
                :} 
                | OPARIT:o OPMULTI:oM VALOR:v {:                     
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(o);                    
                    RESULT = node;                 
                :}
                | PARENTESISL OPARIT:o PARENTESISR {: 
                    RESULT = o;                    
                :} 
                | VALOR:v OPADICION:oPa VALOR:v2 {:
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node; 
                :}
                | VALOR:v OPMULTI:oM VALOR:v2 {:
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node;
                :}
;

VALOR       ::= INTEGER:i {:
                    Nodo node = new Nodo(i,parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"INTEGER");
                    RESULT = retVal;
                :}
                | STRING:str  {:
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"STRING");
                    RESULT = retVal;
                :}
                | TRUE {:
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT = retVal;
                :}
                | FALSE {:
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT = retVal;
                :}
                | NEW CALL:c {:
                    RESULT=c;
                :}
                | CALL:c {:
                    RESULT=c;
                :}
                | UNIRSTRNG:ustr {:
                    Objeto retVal = new Objeto(ustr,"STRING");
                    RESULT = retVal;
                :}
                | identificador:id {:
                    //buscar id y asignarle ese el tipo a Objeto
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"POR_DETERMINAR");
                    RESULT = retVal;
                :}
                | OPARIT:o {:
                    Objeto retVal = new Objeto(o,"INTEGER");
                    RESULT = retVal;
                :}
;

//gramática declaración de variables
DECLARACION ::= DIM T:t {:                    
                    RESULT=t;
                :} 
                | DIM error {: errores.add("Error en declaración"); :}
;

T           ::= identificador:id AS TIPO:t IGUAL VALOR:v {:
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    
                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT = node;
                :}
                | identificador:id AS TIPO:t COMA VARS:v {:
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                :}
                | identificador:id COMA CANTVARS:c COMA VARS:v {:
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                :}
                | identificador:id COMA CANTVARS:c {:                                         
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());


                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                :}
                | identificador:id AS TIPO:t {:
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();  
                    cantVarsCreadas += 1;

                    RESULT = node;
                :}
;

VARS        ::= CANTVARS:c COMA VARS:v {:
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);
                    RESULT = node;
                :}
                | CANTVARS:c {:
                    RESULT = c.getNodo();
                :}                
;

CANTVARS    ::= identificador:id COMA CANTVARS:c {:
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());                                      

                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");

                    Objeto retVal = new Objeto(node, c.getTipo());                    
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT=retVal;  
                :}
                | identificador:id AS TIPO:t {:
                        
                    Nodo node = new Nodo("VARS",parser.cont);   
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;           
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;    

                           

                    tablaSimbolos.agregarID(id,t,offset,"");       

                    Objeto retVal = new Objeto(node, t);                                  
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT=retVal;
                :}
;

TIPO        ::= INTEGERTYPE {: RESULT="INTEGER"; :} | STRINGTYPE {: RESULT="STRING"; :} | BOOLEANTYPE {: RESULT="BOOLEAN"; :} | identificador:id {: RESULT=id; :} ;

//gramática escribir en consola
WRCONSOLE   ::= WRITE PARENTESISL VALWR:v PARENTESISR {:
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                :}
                | WRITE error VALWR PARENTESISR {: errores.add("Error en console.write"); :}       
                
;

VALWR       ::= identificador:id {: 
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node; 
                :} 
                | STRING:str {: 
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                :} 
                | UNIRSTRNG:ustr {: 
                    RESULT=ustr; 
                :} 
                | error {: errores.add("Se esperaba un String"); :}
;

M           ::= {: RESULT=new Marcador(cantVarsCreadas,offset); :};