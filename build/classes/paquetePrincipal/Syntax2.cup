import java_cup.runtime.Symbol;
import java.util.ArrayList;

class parser2;

parser code
{:
    public int cont = 0;    
    public ArrayList<String> errores;
    public TablaSimbolos tablaSimbolos; 
    public int posActualTabla = 0;
    public int cantTemp = 0;
    public Cuadruplo cuadruplos = new Cuadruplo();

    public void setErrores(ArrayList<String> _errores){
        errores = _errores;
    }
    
    public void setTablaSimbolos(TablaSimbolos _tabla){
        tablaSimbolos = _tabla;
    }

    public String nuevoTemp(){
        String temp = "t"+ Integer.toString(cantTemp);
        cantTemp++;
        return temp;
    }

    public ArrayList<Integer> creaLista(int indice){
        ArrayList<Integer> retVal = new ArrayList<>();
        retVal.add(indice);
        return retVal;
    }

    public ArrayList<Integer> creaLista(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
        ArrayList<Integer> retVal = new ArrayList<>();
        for(int i = 0; i < lista1.size();i++){
            retVal.add(lista1.get(i));
        }
        for(int i = 0; i < lista2.size();i++){
            retVal.add(lista2.get(i));
        }
        return retVal;
    }

    public void completa(ArrayList<Integer> lista, int indice){

    }

:}

terminal IF, ELSE, END, THEN, ELSEIF, IGUAL, STRUCTURE, saltoLinea, DIM, COMA, AS, BOOLEANTYPE, TRUE, FALSE, INTEGERTYPE, STRINGTYPE, AND, OR, NOT, NEW, MODULE, SUB, PARENTESISL, PARENTESISR, EXIT, FOR, TO, NEXT, WHILE, DO, LOOP, RETURN, CONCATSTRING, FUNCTION, READ, WRITE;
terminal String identificador, STRING, INTEGER, OPADICION, OPMULTI, OPREL, LLAMADOSTRUC;

nonterminal S, MDLINSTRUC, SUBPROCE, FUNC, WRCONSOLE, STRUCTINSTRUC, DECLARACION, ASIGN, RETVAL, SIFSTATEMENT, IFSTATEMENT, STATEMENTS,STRUCTUREDECLA, COUNTER,M, T, FORSTATEMENT, DOWHILESTATE;
nonterminal String TIPO, CANTVARS, VARS,VARCALL, PARAMCALL, OPCONDICION, OPASIGN;
nonterminal Objeto CANTVARS2, VARS2, VARPARAMS, PARAMS;
nonterminal Objeto2 VALWR, UNIRSTRNG, VALUNIRSTR, VALOR, OPARIT,CALL;
nonterminal Condiciones CONDICION, CONDICIONP;

precedence left IGUAL;
precedence left OPREL;
precedence left OPADICION;
precedence left OPMULTI;

start with S;

S      ::= MODULE identificador:id saltoLinea MDLINSTRUC:m END MODULE {:            
            System.out.println("Listo Module");
            System.out.println("---------------Cuadruplos----------------");           
            cuadruplos.imprimirCuadruplos();
        :}
; 

//if m != null
//Instrucciones dentro del Module
MDLINSTRUC  ::= DECLARACION:d MDLINSTRUC:md {:                    
                :}
                | saltoLinea MDLINSTRUC:md {:
                :}
                | FUNC:f MDLINSTRUC:md {:                    
                :}
                | SUBPROCE:s MDLINSTRUC:md {:                    
                :}
                | STRUCTUREDECLA:sd MDLINSTRUC:md {:                    
                    
                :}
                | saltoLinea
;

//Intrucciones de una Structure
STRUCTUREDECLA   ::= STRUCTURE identificador:id saltoLinea STRUCTINSTRUC:s END STRUCTURE {:
                :}
;

STRUCTINSTRUC   ::= DECLARACION:d STRUCTINSTRUC:s {:
                    :} 
                    | saltoLinea STRUCTINSTRUC:s {:
                    :} 
                    | saltoLinea {:
                    :}
;

//Instrucciones de un subprocedure
SUBPROCE    ::= SUB identificador:id PARENTESISL PARAMS:p PARENTESISR saltoLinea STATEMENTS:s END SUB {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->void");
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe el sub procedure "+ id + " en el programa");
                    }
                    posActualTabla+=1;
                :}
;

//Instrucciones de una funci칩n
FUNC        ::= FUNCTION identificador:id PARENTESISL PARAMS:p PARENTESISR AS TIPO:t saltoLinea STATEMENTS:s END FUNCTION {:                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->"+t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la funci칩n "+ id + " en el programa");
                    }
                    posActualTabla+=1;
                :}
;

//gram치tica par치metros
PARAMS      ::=  VARPARAMS:v {:
                    RESULT = v;
                :} 
                | {:
                    Objeto retVal = new Objeto("void","");
                    RESULT = retVal;
                :}
;

VARPARAMS      ::= identificador:id AS TIPO:t COMA VARS2:v {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t+v.getAcumulada(),"");
                        RESULT = retVal;
                    :}
                    | identificador:id COMA CANTVARS2:c COMA VARS2:v {:                        
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());                        
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);                        
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+c.getAcumulada()+v.getAcumulada(),"");
                        RESULT = retVal;
                    :}
                    | identificador:id COMA CANTVARS2:c {: 
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+ c.getAcumulada(),"");
                        RESULT = retVal;
                    :}
                    | identificador:id AS TIPO:t {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }  

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t,"");
                        RESULT = retVal;
                    :}
;

VARS2           ::= CANTVARS2:c COMA VARS2:v {: 
                        Objeto retVal = new Objeto(c.getTipo(), c.getAcumulada()+v.getAcumulada());
                        RESULT = retVal;
                    :}
                    | CANTVARS2:c {: RESULT = c; :}                
;

CANTVARS2       ::= identificador:id COMA CANTVARS2:c {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retval = new Objeto(c.getTipo(),"x"+c.getTipo()+c.getAcumulada());
                        RESULT = retval;
                    :}
                    | identificador:id AS TIPO:t {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        
                        posActualTabla+=1;
                        Objeto retval = new Objeto(t,"x"+t);
                        RESULT = retval;
                    :}
;

//statements
STATEMENTS  ::= DECLARACION:d STATEMENTS:s {::}
                | saltoLinea STATEMENTS:s {::}
                | EXIT SUB STATEMENTS:s {::}
                | EXIT FUNCTION STATEMENTS:s {::}
                | ASIGN:a STATEMENTS:s {::}
                | RETVAL:r STATEMENTS:s {::}
                | CALL:c STATEMENTS:s {::}
                | WRCONSOLE:w STATEMENTS:s {::}
                | IFSTATEMENT:i STATEMENTS:s {::}
                | FORSTATEMENT:f STATEMENTS:s {::}
                |  DOWHILESTATE:d STATEMENTS:s {::}
                |{::}
;    

IFSTATEMENT      ::= IF CONDICION:c THEN M:m saltoLinea STATEMENTS:s SIFSTATEMENT:s2 END IF{::}
;        

SIFSTATEMENT ::= ELSEIF CONDICION:c THEN saltoLinea STATEMENTS:s SIFSTATEMENT:s2  {::}
                |  ELSE saltoLinea STATEMENTS:s {::} 
                | {::}
;


DOWHILESTATE  ::= DO WHILE CONDICION:c saltoLinea STATEMENTS:s LOOP{::}
;

FORSTATEMENT  ::= FOR COUNTER:c TO VALOR:v saltoLinea STATEMENTS:s NEXT{::}
;

RETVAL      ::= RETURN VALOR:v {:
                    int posFuncion = tablaSimbolos.siguienteFuncion(posActualTabla);
                    String retornoFuncion = tablaSimbolos.getTipoRetorno(posFuncion);
                    if (retornoFuncion.equals("void")){
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " no se puede hacer return en un SUBPROCEDURE");
                    } else {
                        if (retornoFuncion.equals(v.getTipo())){
                        //cuadruplo
                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " el tipo de retorno es "+ retornoFuncion);
                        }   
                    }
                :}
;

//Instrucciones del for
COUNTER     ::= identificador:id OPASIGN:o VALOR:v {::} 
                | identificador:id AS INTEGERTYPE IGUAL VALOR:v{::}
;

//llamado de funcion o sub procedure
CALL        ::= identificador:id PARENTESISL PARAMCALL:p PARENTESISR {:
                    String tipo;
                    int posFunc = tablaSimbolos.buscarFUNC(id, p);
                    if (posFunc == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe la funcion o procedure "+ id + " con parametros "+p);
                    } else {
                        tipo = tablaSimbolos.getTipoRetorno(posFunc);
                    }
                    RESULT = new Objeto2(tipo,id);
                :}
;                

PARAMCALL   ::= VARCALL:v {:
                    RESULT = v;
                :} 
                | {: RESULT="void";
                :}
;

VARCALL     ::= VALOR:val COMA VARCALL:v {:
                    RESULT = val.getTipo() + "x" + v;
                :}
                | VALOR:v {:
                    RESULT = v.getTipo();
                :}
;

//gram치tica condiciones
CONDICION   ::= CONDICION:c AND CONDICIONP:c1 {:
                    //cuadruplo
                :}
                | CONDICION:c OR CONDICIONP:c1 {:
                    //cuadruplo
                :}
                | NOT CONDICIONP:c {:
                    //cuadruplo
                :}
                | CONDICIONP:c {:
                    //cuadruplo
                :}
;

CONDICIONP  ::= VALOR:v OPCONDICION:o VALOR:v2 {:
                    if (o.equals("=")){
                        if ( v.getTipo().equals(v2.getTipo()) ){
                            //cuadruplos

                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es del mismo tipo que " + v2.getTipo());
                        }
                    } else {
                        if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                            //cuadruplos
                        } else {
                            if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                            if (!v2.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                        }                        
                    }
                :}
;

OPCONDICION ::= OPREL:o {: RESULT=o; :} 
                | IGUAL {: RESULT="="; :}
;              

//gram치tica asignacion
ASIGN       ::= identificador:id OPASIGN:o VALOR:v {:
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);                    
                    if (posID == -1){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        String tipo  = tablaSimbolos.getTipoID(posID);
                        if (tipo.equals(v.getTipo())){
                            //cuadruplo con el o
                            if (o.equals("=")){
                                cuadruplos.addCuadruplo("=",v.getValor(),id);
                            } else {
                                if (o.charAt(0) == '*'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("*",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '/'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("/",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '-'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("-",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '+'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("+",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                            }
                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) +  " "+ id + " esperaba un "+ tipo + " y se le est치 asignando un "+ v.getTipo());
                        }
                    }
                :}
                | identificador:id IGUAL READ {:
                    cuadruplos.addCuadruplo("readline",id);
                :}
                | LLAMADOSTRUC:l OPASIGN:o VALOR:v {::}
; 

UNIRSTRNG   ::= VALUNIRSTR:v CONCATSTRING UNIRSTRNG:ustr {:
                    String tipo = "";
                    if (v.equals("STRING") && ustr.equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("STRING")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!ustr.equals("STRING")){
                            errores.add("Error: Linea: "+ (ustrleft + 1) + " Columna: " + (ustrright + 1) + " se esperaba un STRING no un "+ustr.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + ustr.getValor());
                :} 
                | VALUNIRSTR:v CONCATSTRING VALUNIRSTR:v2 {:
                    String tipo = "";                   
                    if (v.getTipo().equals("STRING") && v2.getTipo().equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("STRING")){                        
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!v2.getTipo().equals("STRING")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esperaba un STRING no un "+v2.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + v2.getValor());
                :}
;

VALUNIRSTR  ::= STRING:str {: RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); :} 
                | identificador:id {:
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                :}
;

OPASIGN     ::= IGUAL {: RESULT="="; :} 
                | OPMULTI:op IGUAL {: RESULT=op+"="; :}  
                | OPADICION:op IGUAL {: RESULT=op+"="; :}  
;

//gram치tica operaciones aritm칠ticas
OPARIT      ::= OPARIT:o OPADICION:oPa VALOR:v {:
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oPa,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                :} 
                | OPARIT:o OPMULTI:oM VALOR:v {:
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oM,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                :}
                | PARENTESISL OPARIT:o PARENTESISR {: 
                    RESULT = o;
                :} 
                | VALOR:v OPADICION:oPa VALOR:v2 {:
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oPa,v.getValor(),v2.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                :}
                | VALOR:v OPMULTI:oM VALOR:v2 {:
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oM,v.getValor(),v2.getValor(),temp);
                    } else {                        
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                :}
;

VALOR       ::= INTEGER:i {:
                    RESULT = new Objeto2("INTEGER",i);
                :}
                | STRING:str  {:
                    RESULT = new Objeto2("STRING",str.substring(1,str.length()-1));
                :}
                | TRUE {:
                    RESULT = new Objeto2("BOOLEAN","TRUE");
                :}
                | FALSE {:
                    RESULT = new Objeto2("BOOLEAN","FALSE");
                :}
                | NEW CALL:c {:
                    RESULT = c;
                :}
                | CALL:c {:
                    String tipo = c.getTipo();
                    if (c.equals("void")){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (cleft + 1) + " Columna: " + (cright + 1) + " un procedure no puede ser asignado a una variable");
                    }
                    RESULT = new Objeto2(tipo,c.getValor());
                :}
                | UNIRSTRNG:ustr {:
                    RESULT = ustr;
                :}
                | identificador:id {:
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }

                    RESULT = new Objeto2(tipo,id);
                :}
                | OPARIT:o {:
                    //ojooooooooooooooooooooooooooooo
                    RESULT = o;
                :}
;

//gram치tica declaraci칩n de variables
DECLARACION ::= DIM T;

T           ::= identificador:id AS TIPO:t IGUAL VALOR:v {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    } else {
                        if (t.equals(v.getTipo())){

                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no se puede asignar un "+ v.getTipo() + " en un "+t);
                        }
                    }
                    posActualTabla+=1;
                :}
                | identificador:id AS TIPO:t COMA VARS:v {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                :}
                | identificador:id COMA CANTVARS:c COMA VARS:v {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                :}
                | identificador:id COMA CANTVARS:c {: 
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                :}
                | identificador:id AS TIPO:t {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }   
                    posActualTabla+=1;                
                :}
;

VARS        ::= CANTVARS:c COMA VARS:v {: RESULT = c; :}
                | CANTVARS:c {: RESULT = c; :}                
;

CANTVARS    ::= identificador:id COMA CANTVARS:c {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = c;                    
                :}
                | identificador:id AS TIPO:t {:                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = t;
                :}
;

TIPO        ::= INTEGERTYPE {: RESULT="INTEGER"; :} | STRINGTYPE {: RESULT="STRING"; :} | BOOLEANTYPE {: RESULT="BOOLEAN"; :} | identificador:id {: RESULT=id; :} ;

//gram치tica escribir en consola
WRCONSOLE   ::= WRITE PARENTESISL VALWR:v PARENTESISR {:
                    if (!v.getTipo().equals("ERROR")){
                        cuadruplos.addCuadruplo("write",v.getTipo(),v.getValor());
                    } else {
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING en el write.line"); 
                    }
                :}            
;

VALWR       ::= identificador:id {:
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                :} 
                | STRING:str {: RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); :} 
                | UNIRSTRNG:ustr {: RESULT = ustr; :}
; 

M           ::= {: :};