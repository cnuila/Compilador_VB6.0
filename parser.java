
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\002\000\002\005\013\000\002" +
    "\006\005\000\002\006\004\000\002\006\006\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\002" +
    "\000\002\006\013\000\002\007\010\000\002\007\005\000" +
    "\002\007\002\000\002\011\015\000\002\012\005\000\002" +
    "\012\004\000\002\012\006\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\002" +
    "\000\002\012\013\000\002\013\010\000\002\013\005\000" +
    "\002\013\002\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\016\006\000\002\020\003\000\002\020" +
    "\002\000\002\017\005\000\002\017\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\003\000" +
    "\002\022\005\000\002\024\003\000\002\024\003\000\002" +
    "\023\003\000\002\023\003\000\002\010\003\000\002\010" +
    "\002\000\002\040\003\000\002\040\003\000\002\045\005" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\042\005\000\002" +
    "\042\005\000\002\043\003\000\002\043\003\000\002\041" +
    "\005\000\002\044\003\000\002\044\004\000\002\044\004" +
    "\000\002\037\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\005\000\002\032" +
    "\004\000\002\031\005\000\002\031\007\000\002\031\011" +
    "\000\002\031\007\000\002\030\007\000\002\030\005\000" +
    "\002\027\005\000\002\027\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\046\006\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\006\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\033\004\001\002\000\004\012\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\012\013\020\014\014\034" +
    "\012\055\017\001\002\000\012\013\020\014\014\034\012" +
    "\055\017\001\002\000\004\012\270\001\002\000\012\013" +
    "\020\014\014\034\012\055\017\001\002\000\004\012\240" +
    "\001\002\000\004\006\235\001\002\000\014\006\ufff7\013" +
    "\230\014\014\034\012\055\017\001\002\000\004\012\022" +
    "\001\002\000\012\013\020\014\014\034\012\055\017\001" +
    "\002\000\004\006\ufffe\001\002\000\004\035\023\001\002" +
    "\000\006\012\025\036\uffcb\001\002\000\004\036\uffcc\001" +
    "\002\000\006\015\uffa9\016\uffa9\001\002\000\006\015\216" +
    "\016\217\001\002\000\004\036\030\001\002\000\004\016" +
    "\031\001\002\000\010\017\034\022\032\024\033\001\002" +
    "\000\020\006\uffa3\013\uffa3\014\uffa3\015\uffa3\034\uffa3\036" +
    "\uffa3\055\uffa3\001\002\000\020\006\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\034\uffa2\036\uffa2\055\uffa2\001\002\000\020\006" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\034\uffa1\036\uffa1\055\uffa1" +
    "\001\002\000\004\013\036\001\002\000\022\004\046\006" +
    "\uffe2\012\053\013\042\014\014\040\037\052\050\057\047" +
    "\001\002\000\004\055\213\001\002\000\004\013\211\001" +
    "\002\000\004\013\207\001\002\000\026\004\046\005\uffe2" +
    "\006\uffe2\010\uffe2\012\053\013\042\014\014\040\037\052" +
    "\050\057\047\001\002\000\004\013\uffc9\001\002\000\004" +
    "\013\uffca\001\002\000\004\013\204\001\002\000\022\012" +
    "\104\020\074\021\100\023\102\032\146\035\101\054\075" +
    "\056\065\001\002\000\004\035\137\001\002\000\020\012" +
    "\104\020\074\021\100\023\102\035\101\054\075\056\065" +
    "\001\002\000\004\013\134\001\002\000\004\013\132\001" +
    "\002\000\012\011\061\026\060\027\063\035\062\001\002" +
    "\000\004\006\055\001\002\000\004\055\056\001\002\000" +
    "\014\006\uffea\013\uffea\014\uffea\034\uffea\055\uffea\001\002" +
    "\000\010\012\111\023\102\035\101\001\002\000\004\011" +
    "\130\001\002\000\020\012\uffbd\020\074\021\100\023\uffbd" +
    "\035\uffbd\054\075\056\065\001\002\000\022\012\104\020" +
    "\074\021\100\023\102\035\101\036\uffd8\054\075\056\065" +
    "\001\002\000\004\011\064\001\002\000\010\012\uffbc\023" +
    "\uffbc\035\uffbc\001\002\000\022\007\uffc3\011\uffc3\013\uffc3" +
    "\015\uffc3\025\uffc3\030\uffc3\031\uffc3\036\uffc3\001\002\000" +
    "\006\015\uffd6\036\uffd6\001\002\000\004\036\126\001\002" +
    "\000\036\006\uffb3\007\uffb3\011\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3" +
    "\036\uffb3\055\uffb3\001\002\000\036\006\uffb8\007\uffb8\011" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\025\uffb8\026\uffb8\027\112" +
    "\030\uffb8\031\uffb8\034\uffb8\036\uffb8\055\uffb8\001\002\000" +
    "\036\006\uffb6\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6\036" +
    "\uffb6\055\uffb6\001\002\000\010\013\uffdc\015\uffdc\036\uffdc" +
    "\001\002\000\022\007\uffc6\011\uffc6\013\uffc6\015\uffc6\025" +
    "\uffc6\030\uffc6\031\uffc6\036\uffc6\001\002\000\024\007\uffc7" +
    "\011\uffc7\013\uffc7\015\uffc7\025\uffc7\030\uffc7\031\uffc7\036" +
    "\uffc7\053\uffc0\001\002\000\006\015\124\036\uffd9\001\002" +
    "\000\024\007\uffc4\011\uffc4\013\uffc4\015\uffc4\025\uffc4\030" +
    "\uffc4\031\uffc4\036\uffc4\053\122\001\002\000\022\007\uffc5" +
    "\011\uffc5\013\uffc5\015\uffc5\025\uffc5\030\uffc5\031\uffc5\036" +
    "\uffc5\001\002\000\010\012\111\023\102\035\101\001\002" +
    "\000\036\006\uffb5\007\uffb5\011\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5" +
    "\036\uffb5\055\uffb5\001\002\000\004\053\114\001\002\000" +
    "\032\007\uffb4\011\uffb4\013\uffb4\015\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\035\062\036\uffb4\053\uffbf\001" +
    "\002\000\024\007\uffba\011\uffba\013\uffba\015\uffba\025\uffba" +
    "\026\107\030\uffba\031\uffba\036\uffba\001\002\000\010\013" +
    "\uffdb\015\uffdb\036\uffdb\001\002\000\010\012\111\023\102" +
    "\035\101\001\002\000\036\006\uffb9\007\uffb9\011\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\025\uffb9\026\uffb9\027\112\030\uffb9" +
    "\031\uffb9\034\uffb9\036\uffb9\055\uffb9\001\002\000\040\006" +
    "\uffb4\007\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\035\062\036" +
    "\uffb4\055\uffb4\001\002\000\010\012\111\023\102\035\101" +
    "\001\002\000\036\006\uffb7\007\uffb7\011\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\034\uffb7\036\uffb7\055\uffb7\001\002\000\006\012\116\054" +
    "\115\001\002\000\034\006\uffc0\007\uffc0\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\025\uffc0\030\uffc0\031\uffc0\034\uffc0\036" +
    "\uffc0\053\uffc0\055\uffc0\001\002\000\034\006\uffbf\007\uffbf" +
    "\011\uffbf\013\uffbf\014\uffbf\015\uffbf\025\uffbf\030\uffbf\031" +
    "\uffbf\034\uffbf\036\uffbf\053\uffbf\055\uffbf\001\002\000\034" +
    "\006\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\025" +
    "\uffc1\030\uffc1\031\uffc1\034\uffc1\036\uffc1\053\uffc1\055\uffc1" +
    "\001\002\000\006\026\107\036\121\001\002\000\036\006" +
    "\uffb2\007\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034\uffb2\036\uffb2\055" +
    "\uffb2\001\002\000\006\012\116\054\115\001\002\000\034" +
    "\006\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\025" +
    "\uffc2\030\uffc2\031\uffc2\034\uffc2\036\uffc2\053\uffc2\055\uffc2" +
    "\001\002\000\020\012\104\020\074\021\100\023\102\035" +
    "\101\054\075\056\065\001\002\000\006\015\uffd7\036\uffd7" +
    "\001\002\000\036\006\uffda\007\uffda\011\uffda\013\uffda\014" +
    "\uffda\015\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\034\uffda\036\uffda\055\uffda\001\002\000\004\013\uffc8\001" +
    "\002\000\010\012\uffbb\023\uffbb\035\uffbb\001\002\000\004" +
    "\013\uffbe\001\002\000\026\004\046\005\uffe2\006\uffe2\010" +
    "\uffe2\012\053\013\042\014\014\040\037\052\050\057\047" +
    "\001\002\000\010\005\uffe4\006\uffe4\010\uffe4\001\002\000" +
    "\026\004\046\005\uffe2\006\uffe2\010\uffe2\012\053\013\042" +
    "\014\014\040\037\052\050\057\047\001\002\000\010\005" +
    "\uffe3\006\uffe3\010\uffe3\001\002\000\004\013\uffdd\001\002" +
    "\000\006\012\141\054\140\001\002\000\006\036\uff9e\053" +
    "\uffc0\001\002\000\006\036\uff9f\053\uffbf\001\002\000\006" +
    "\036\uff9d\053\122\001\002\000\004\036\144\001\002\000" +
    "\004\013\uffa0\001\002\000\010\007\uffd2\030\uffd2\031\uffd2" +
    "\001\002\000\020\012\104\020\074\021\100\023\102\035" +
    "\101\054\075\056\065\001\002\000\014\007\uffce\011\uffce" +
    "\025\uffce\030\uffce\031\uffce\001\002\000\006\011\201\025" +
    "\177\001\002\000\010\007\154\030\153\031\155\001\002" +
    "\000\014\007\uffcd\011\uffcd\025\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\020\012\104\020\074\021\100\023\102\035\101" +
    "\054\075\056\065\001\002\000\004\013\157\001\002\000" +
    "\020\012\104\020\074\021\100\023\102\035\101\054\075" +
    "\056\065\001\002\000\010\007\uffd4\030\uffd4\031\uffd4\001" +
    "\002\000\026\004\046\005\uffe2\006\uffe2\010\uffe2\012\053" +
    "\013\042\014\014\040\037\052\050\057\047\001\002\000" +
    "\010\005\163\006\uffde\010\162\001\002\000\004\006\173" +
    "\001\002\000\022\012\104\020\074\021\100\023\102\032" +
    "\146\035\101\054\075\056\065\001\002\000\004\013\164" +
    "\001\002\000\010\005\163\006\uffde\010\162\001\002\000" +
    "\004\006\uffdf\001\002\000\010\007\167\030\153\031\155" +
    "\001\002\000\004\013\170\001\002\000\026\004\046\005" +
    "\uffe2\006\uffe2\010\uffe2\012\053\013\042\014\014\040\037" +
    "\052\050\057\047\001\002\000\010\005\163\006\uffde\010" +
    "\162\001\002\000\004\006\uffe0\001\002\000\004\004\174" +
    "\001\002\000\026\004\046\005\uffe2\006\uffe2\010\uffe2\012" +
    "\053\013\042\014\014\040\037\052\050\057\047\001\002" +
    "\000\010\005\uffe1\006\uffe1\010\uffe1\001\002\000\010\007" +
    "\uffd5\030\uffd5\031\uffd5\001\002\000\020\012\uffd0\020\uffd0" +
    "\021\uffd0\023\uffd0\035\uffd0\054\uffd0\056\uffd0\001\002\000" +
    "\020\012\104\020\074\021\100\023\102\035\101\054\075" +
    "\056\065\001\002\000\020\012\uffcf\020\uffcf\021\uffcf\023" +
    "\uffcf\035\uffcf\054\uffcf\056\uffcf\001\002\000\010\007\uffd1" +
    "\030\uffd1\031\uffd1\001\002\000\010\007\uffd3\030\uffd3\031" +
    "\uffd3\001\002\000\026\004\046\005\uffe2\006\uffe2\010\uffe2" +
    "\012\053\013\042\014\014\040\037\052\050\057\047\001" +
    "\002\000\010\005\uffe6\006\uffe6\010\uffe6\001\002\000\010" +
    "\005\uffe8\006\uffe8\010\uffe8\001\002\000\026\004\046\005" +
    "\uffe2\006\uffe2\010\uffe2\012\053\013\042\014\014\040\037" +
    "\052\050\057\047\001\002\000\010\005\uffe9\006\uffe9\010" +
    "\uffe9\001\002\000\026\004\046\005\uffe2\006\uffe2\010\uffe2" +
    "\012\053\013\042\014\014\040\037\052\050\057\047\001" +
    "\002\000\010\005\uffe5\006\uffe5\010\uffe5\001\002\000\004" +
    "\013\214\001\002\000\026\004\046\005\uffe2\006\uffe2\010" +
    "\uffe2\012\053\013\042\014\014\040\037\052\050\057\047" +
    "\001\002\000\010\005\uffe7\006\uffe7\010\uffe7\001\002\000" +
    "\004\012\223\001\002\000\010\017\034\022\032\024\033" +
    "\001\002\000\020\006\uffab\013\uffab\014\uffab\015\221\034" +
    "\uffab\036\uffab\055\uffab\001\002\000\004\012\025\001\002" +
    "\000\016\006\uffac\013\uffac\014\uffac\034\uffac\036\uffac\055" +
    "\uffac\001\002\000\006\015\uffaa\016\uffaa\001\002\000\014" +
    "\006\ufff7\013\230\014\014\034\012\055\017\001\002\000" +
    "\014\006\ufff7\013\230\014\014\034\012\055\017\001\002" +
    "\000\014\006\ufff7\013\230\014\014\034\012\055\017\001" +
    "\002\000\004\006\ufffc\001\002\000\014\006\ufff7\013\230" +
    "\014\014\034\012\055\017\001\002\000\004\006\ufffa\001" +
    "\002\000\004\006\ufff9\001\002\000\004\006\ufffb\001\002" +
    "\000\004\006\ufff8\001\002\000\004\033\236\001\002\000" +
    "\004\002\000\001\002\000\014\006\uffb1\013\uffb1\014\uffb1" +
    "\034\uffb1\055\uffb1\001\002\000\006\015\241\016\242\001" +
    "\002\000\004\012\025\001\002\000\010\017\246\022\243" +
    "\024\245\001\002\000\006\011\260\015\uffa3\001\002\000" +
    "\014\006\uffb0\013\uffb0\014\uffb0\034\uffb0\055\uffb0\001\002" +
    "\000\006\011\255\015\uffa2\001\002\000\006\011\252\015" +
    "\uffa1\001\002\000\004\015\250\001\002\000\004\012\025" +
    "\001\002\000\014\006\uffaf\013\uffaf\014\uffaf\034\uffaf\055" +
    "\uffaf\001\002\000\006\020\253\021\254\001\002\000\014" +
    "\006\uffa6\013\uffa6\014\uffa6\034\uffa6\055\uffa6\001\002\000" +
    "\014\006\uffa5\013\uffa5\014\uffa5\034\uffa5\055\uffa5\001\002" +
    "\000\006\012\116\054\256\001\002\000\016\006\uffa7\013" +
    "\uffa7\014\uffa7\034\uffa7\053\uffc0\055\uffa7\001\002\000\016" +
    "\006\uffa4\013\uffa4\014\uffa4\034\uffa4\053\122\055\uffa4\001" +
    "\002\000\010\012\111\023\102\035\101\001\002\000\016" +
    "\006\uffa8\013\uffa8\014\uffa8\026\107\034\uffa8\055\uffa8\001" +
    "\002\000\006\015\216\016\263\001\002\000\010\017\034" +
    "\022\032\024\033\001\002\000\016\006\uffad\013\uffad\014" +
    "\uffad\015\265\034\uffad\055\uffad\001\002\000\004\012\025" +
    "\001\002\000\014\006\uffae\013\uffae\014\uffae\034\uffae\055" +
    "\uffae\001\002\000\004\006\uffff\001\002\000\004\035\271" +
    "\001\002\000\006\012\025\036\uffcb\001\002\000\004\036" +
    "\273\001\002\000\004\013\274\001\002\000\022\004\301" +
    "\006\uffef\012\053\013\277\014\014\037\303\040\275\057" +
    "\047\001\002\000\004\034\355\001\002\000\004\013\353" +
    "\001\002\000\026\004\301\005\uffef\006\uffef\010\uffef\012" +
    "\053\013\277\014\014\037\303\040\275\057\047\001\002" +
    "\000\004\013\350\001\002\000\022\012\104\020\074\021" +
    "\100\023\102\032\146\035\101\054\075\056\065\001\002" +
    "\000\004\006\325\001\002\000\004\040\312\001\002\000" +
    "\004\013\310\001\002\000\004\013\306\001\002\000\026" +
    "\004\301\005\uffef\006\uffef\010\uffef\012\053\013\277\014" +
    "\014\037\303\040\275\057\047\001\002\000\010\005\ufff1" +
    "\006\ufff1\010\ufff1\001\002\000\026\004\301\005\uffef\006" +
    "\uffef\010\uffef\012\053\013\277\014\014\037\303\040\275" +
    "\057\047\001\002\000\010\005\ufff0\006\ufff0\010\ufff0\001" +
    "\002\000\004\041\313\001\002\000\004\042\314\001\002" +
    "\000\004\043\315\001\002\000\004\044\316\001\002\000" +
    "\004\045\317\001\002\000\004\046\320\001\002\000\004" +
    "\047\321\001\002\000\004\050\322\001\002\000\004\051" +
    "\323\001\002\000\004\052\324\001\002\000\010\005\uff9c" +
    "\006\uff9c\010\uff9c\001\002\000\004\034\326\001\002\000" +
    "\014\006\ufff6\013\ufff6\014\ufff6\034\ufff6\055\ufff6\001\002" +
    "\000\010\007\330\030\153\031\155\001\002\000\004\013" +
    "\331\001\002\000\026\004\301\005\uffef\006\uffef\010\uffef" +
    "\012\053\013\277\014\014\037\303\040\275\057\047\001" +
    "\002\000\010\005\334\006\uffeb\010\333\001\002\000\022" +
    "\012\104\020\074\021\100\023\102\032\146\035\101\054" +
    "\075\056\065\001\002\000\004\013\341\001\002\000\004" +
    "\006\336\001\002\000\004\004\337\001\002\000\026\004" +
    "\301\005\uffef\006\uffef\010\uffef\012\053\013\277\014\014" +
    "\037\303\040\275\057\047\001\002\000\010\005\uffee\006" +
    "\uffee\010\uffee\001\002\000\022\004\301\006\uffef\012\053" +
    "\013\277\014\014\037\303\040\275\057\047\001\002\000" +
    "\004\006\uffec\001\002\000\010\007\344\030\153\031\155" +
    "\001\002\000\004\013\345\001\002\000\026\004\301\005" +
    "\uffef\006\uffef\010\uffef\012\053\013\277\014\014\037\303" +
    "\040\275\057\047\001\002\000\010\005\334\006\uffeb\010" +
    "\333\001\002\000\004\006\uffed\001\002\000\026\004\301" +
    "\005\uffef\006\uffef\010\uffef\012\053\013\277\014\014\037" +
    "\303\040\275\057\047\001\002\000\010\005\ufff2\006\ufff2" +
    "\010\ufff2\001\002\000\010\005\ufff4\006\ufff4\010\ufff4\001" +
    "\002\000\026\004\301\005\uffef\006\uffef\010\uffef\012\053" +
    "\013\277\014\014\037\303\040\275\057\047\001\002\000" +
    "\010\005\ufff5\006\ufff5\010\ufff5\001\002\000\004\013\356" +
    "\001\002\000\026\004\301\005\uffef\006\uffef\010\uffef\012" +
    "\053\013\277\014\014\037\303\040\275\057\047\001\002" +
    "\000\010\005\ufff3\006\ufff3\010\ufff3\001\002\000\004\006" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\005\015\011\010\032\012\001\001\000\012\003" +
    "\357\005\015\011\010\032\012\001\001\000\002\001\001" +
    "\000\012\003\266\005\015\011\010\032\012\001\001\000" +
    "\004\031\236\001\001\000\002\001\001\000\012\004\226" +
    "\005\225\011\223\032\224\001\001\000\002\001\001\000" +
    "\012\003\020\005\015\011\010\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\026\027\025\030" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\053\014\037\016" +
    "\051\032\040\040\044\041\042\045\043\046\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\205\014\037\016\051\032\040\040\044\041\042" +
    "\045\043\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\067\021\150\022\144" +
    "\023\147\033\104\034\070\035\071\036\146\037\151\042" +
    "\076\043\102\001\001\000\002\001\001\000\024\015\135" +
    "\016\067\033\104\034\070\035\071\036\072\037\105\042" +
    "\076\043\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\067\033\104\034\070" +
    "\035\071\037\130\001\001\000\002\001\001\000\010\036" +
    "\126\042\076\043\102\001\001\000\030\015\065\016\067" +
    "\017\075\020\066\033\104\034\070\035\071\036\072\037" +
    "\105\042\076\043\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\067\033\117\034\070\035\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\067\034\107\035\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\067" +
    "\035\112\001\001\000\002\001\001\000\004\043\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\122\001" +
    "\001\000\002\001\001\000\024\015\124\016\067\033\104" +
    "\034\070\035\071\036\072\037\105\042\076\043\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\132\014" +
    "\037\016\051\032\040\040\044\041\042\045\043\046\050" +
    "\001\001\000\002\001\001\000\022\012\134\014\037\016" +
    "\051\032\040\040\044\041\042\045\043\046\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\141\043" +
    "\102\047\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\067\022\202\023\147\033\104" +
    "\034\070\035\071\036\146\037\151\042\076\043\102\001" +
    "\001\000\002\001\001\000\004\024\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\067\022\175\023" +
    "\147\033\104\034\070\035\071\036\146\037\151\042\076" +
    "\043\102\001\001\000\002\001\001\000\026\016\067\022" +
    "\155\023\147\033\104\034\070\035\071\036\146\037\151" +
    "\042\076\043\102\001\001\000\002\001\001\000\022\012" +
    "\157\014\037\016\051\032\040\040\044\041\042\045\043" +
    "\046\050\001\001\000\004\013\160\001\001\000\002\001" +
    "\001\000\030\016\067\021\165\022\144\023\147\033\104" +
    "\034\070\035\071\036\146\037\151\042\076\043\102\001" +
    "\001\000\002\001\001\000\004\013\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\170\014\037\016\051\032\040\040\044\041\042\045\043" +
    "\046\050\001\001\000\004\013\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\174\014\037\016\051" +
    "\032\040\040\044\041\042\045\043\046\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\067\023\201\033\104\034\070\035\071\036\146\037" +
    "\151\042\076\043\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\204\014\037\016" +
    "\051\032\040\040\044\041\042\045\043\046\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\207\014" +
    "\037\016\051\032\040\040\044\041\042\045\043\046\050" +
    "\001\001\000\002\001\001\000\022\012\211\014\037\016" +
    "\051\032\040\040\044\041\042\045\043\046\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\214\014" +
    "\037\016\051\032\040\040\044\041\042\045\043\046\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\217\001\001\000\002\001\001\000\006\027\025\030\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\233\005\225\011\223\032\224\001\001\000\012\004\232" +
    "\005\225\011\223\032\224\001\001\000\012\004\231\005" +
    "\225\011\223\032\224\001\001\000\002\001\001\000\012" +
    "\004\230\005\225\011\223\032\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\261\001\001\000\006\025\246" +
    "\026\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\025\030\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\256" +
    "\043\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\067\033\260\034\070\035\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\263\001\001\000" +
    "\002\001\001\000\006\027\025\030\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\271\027\025\030\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\301\016\304\032\275\040\277\041" +
    "\042\045\043\046\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\351\016\304\032\275\040\277\041" +
    "\042\045\043\046\303\001\001\000\002\001\001\000\030" +
    "\016\067\021\326\022\144\023\147\033\104\034\070\035" +
    "\071\036\146\037\151\042\076\043\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\306\016\304\032\275\040\277\041\042" +
    "\045\043\046\303\001\001\000\002\001\001\000\020\006" +
    "\310\016\304\032\275\040\277\041\042\045\043\046\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\331\016\304\032\275\040\277\041\042" +
    "\045\043\046\303\001\001\000\004\007\334\001\001\000" +
    "\030\016\067\021\342\022\144\023\147\033\104\034\070" +
    "\035\071\036\146\037\151\042\076\043\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\337\016\304\032\275\040\277\041\042\045\043\046" +
    "\303\001\001\000\002\001\001\000\020\006\341\016\304" +
    "\032\275\040\277\041\042\045\043\046\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\345\016\304\032\275\040\277\041\042\045\043\046" +
    "\303\001\001\000\004\007\346\001\001\000\002\001\001" +
    "\000\020\006\350\016\304\032\275\040\277\041\042\045" +
    "\043\046\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\353\016\304\032\275\040\277\041\042\045" +
    "\043\046\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\356\016\304\032\275\040\277\041\042\045" +
    "\043\046\303\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Syntax error");
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		System.out.println("Listo Module");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUBINSTRUC ::= DECLARACION saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUBINSTRUC ::= EXIT SUB saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBINSTRUC ::= ASIGN saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBINSTRUC ::= CALL saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBINSTRUC ::= WRCONSOLE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBINSTRUC ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCINSTRUC ::= DECLARACION saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCINSTRUC ::= EXIT FUNCTION saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCINSTRUC ::= ASIGN saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCINSTRUC ::= RETVAL saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCINSTRUC ::= CALL saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCINSTRUC ::= WRCONSOLE saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCINSTRUC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VAL ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VAL ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMCALL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARCALL ::= VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALASIGN ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UNIRSTRNG ::= UNIRSTRNG CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPP ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPP ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALWR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALWR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SUBINSTRUC ::= CONTINUE EXIT FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
