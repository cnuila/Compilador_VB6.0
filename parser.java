
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\005\013\000\002\005\013\000\002\005\013" +
    "\000\002\005\013\000\002\005\013\000\002\006\004\000" +
    "\002\006\004\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\050\012\000\002\050\012" +
    "\000\002\050\012\000\002\050\012\000\002\050\012\000" +
    "\002\007\010\000\002\007\005\000\002\007\002\000\002" +
    "\007\010\000\002\007\010\000\002\007\010\000\002\007" +
    "\005\000\002\011\015\000\002\011\015\000\002\011\015" +
    "\000\002\011\015\000\002\011\015\000\002\011\015\000" +
    "\002\011\015\000\002\012\004\000\002\012\004\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\002" +
    "\000\002\051\012\000\002\051\012\000\002\051\012\000" +
    "\002\051\012\000\002\051\012\000\002\013\010\000\002" +
    "\013\005\000\002\013\002\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\005\000\002\014\004" +
    "\000\002\015\003\000\002\015\003\000\002\016\006\000" +
    "\002\016\006\000\002\020\003\000\002\020\002\000\002" +
    "\017\005\000\002\017\003\000\002\017\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\021\003" +
    "\000\002\022\005\000\002\024\003\000\002\024\003\000" +
    "\002\023\003\000\002\023\003\000\002\010\003\000\002" +
    "\010\002\000\002\040\003\000\002\040\003\000\002\045" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\042\005\000" +
    "\002\042\005\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\044\003\000\002\044\004\000\002\044\004" +
    "\000\002\037\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\005\000\002\035" +
    "\003\000\002\032\004\000\002\032\004\000\002\031\005" +
    "\000\002\031\007\000\002\031\011\000\002\031\007\000" +
    "\002\031\005\000\002\030\007\000\002\030\005\000\002" +
    "\030\004\000\002\027\005\000\002\027\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\046\006\000\002\046\006\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\006\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\006\003\004\033\005\001\002\000\004\012" +
    "\u018a\001\002\000\006\003\010\012\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\013" +
    "\u0186\001\002\000\006\003\012\013\013\001\002\000\012" +
    "\013\023\014\017\034\016\055\022\001\002\000\012\013" +
    "\023\014\017\034\016\055\022\001\002\000\012\013\023" +
    "\014\017\034\016\055\022\001\002\000\012\013\023\014" +
    "\017\034\016\055\022\001\002\000\006\003\u0114\012\u0115" +
    "\001\002\000\006\003\373\012\375\001\002\000\006\003" +
    "\366\006\367\001\002\000\012\013\361\014\017\034\016" +
    "\055\022\001\002\000\006\003\025\012\026\001\002\000" +
    "\012\013\023\014\017\034\016\055\022\001\002\000\006" +
    "\003\ufff9\006\ufff9\001\002\000\004\035\344\001\002\000" +
    "\006\003\027\035\030\001\002\000\006\012\032\036\uffa7" +
    "\001\002\000\010\003\uffa7\012\032\036\uffa7\001\002\000" +
    "\006\003\uffa8\036\uffa8\001\002\000\010\003\uff7e\015\uff7e" +
    "\016\uff7e\001\002\000\010\003\327\015\325\016\326\001" +
    "\002\000\006\003\036\036\035\001\002\000\006\003\301" +
    "\016\300\001\002\000\004\016\037\001\002\000\010\017" +
    "\042\022\040\024\041\001\002\000\042\003\uff78\004\uff78" +
    "\005\uff78\006\uff78\010\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\034\uff78\036\uff78\037\uff78\040\uff78\052\uff78\055\uff78" +
    "\057\uff78\001\002\000\042\003\uff77\004\uff77\005\uff77\006" +
    "\uff77\010\uff77\012\uff77\013\uff77\014\uff77\015\uff77\034\uff77" +
    "\036\uff77\037\uff77\040\uff77\052\uff77\055\uff77\057\uff77\001" +
    "\002\000\042\003\uff76\004\uff76\005\uff76\006\uff76\010\uff76" +
    "\012\uff76\013\uff76\014\uff76\015\uff76\034\uff76\036\uff76\037" +
    "\uff76\040\uff76\052\uff76\055\uff76\057\uff76\001\002\000\004" +
    "\013\044\001\002\000\024\003\056\004\055\006\uffc8\012" +
    "\063\013\050\014\017\040\045\052\061\057\057\001\002" +
    "\000\004\055\276\001\002\000\030\003\056\004\055\005" +
    "\uffc8\006\uffc8\010\uffc8\012\063\013\050\014\017\040\045" +
    "\052\061\057\057\001\002\000\030\003\056\004\055\005" +
    "\uffc8\006\uffc8\010\uffc8\012\063\013\050\014\017\040\045" +
    "\052\061\057\057\001\002\000\030\003\056\004\055\005" +
    "\uffc8\006\uffc8\010\uffc8\012\063\013\050\014\017\040\045" +
    "\052\061\057\057\001\002\000\032\003\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6\037\uffa6" +
    "\040\uffa6\052\uffa6\057\uffa6\001\002\000\032\003\uffa5\004" +
    "\uffa5\005\uffa5\006\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\037\uffa5\040\uffa5\052\uffa5\057\uffa5\001\002\000\030\003" +
    "\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050" +
    "\014\017\040\045\052\061\057\057\001\002\000\030\003" +
    "\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050" +
    "\014\017\040\045\052\061\057\057\001\002\000\024\003" +
    "\176\012\116\020\105\021\111\023\114\032\173\035\112" +
    "\054\106\056\076\001\002\000\012\011\170\026\070\027" +
    "\074\035\125\001\002\000\006\003\155\035\156\001\002" +
    "\000\030\003\056\004\055\005\uffc8\006\uffc8\010\uffc8\012" +
    "\063\013\050\014\017\040\045\052\061\057\057\001\002" +
    "\000\022\003\113\012\116\020\105\021\111\023\114\035" +
    "\112\054\106\056\076\001\002\000\030\003\056\004\055" +
    "\005\uffc8\006\uffc8\010\uffc8\012\063\013\050\014\017\040" +
    "\045\052\061\057\057\001\002\000\014\003\071\011\072" +
    "\026\070\027\074\035\073\001\002\000\004\006\065\001" +
    "\002\000\004\055\066\001\002\000\012\013\uffd4\014\uffd4" +
    "\034\uffd4\055\uffd4\001\002\000\012\003\123\012\124\023" +
    "\114\035\112\001\002\000\004\011\150\001\002\000\012" +
    "\003\123\012\124\023\114\035\112\001\002\000\022\003" +
    "\uff96\012\uff96\020\105\021\111\023\uff96\035\uff96\054\106" +
    "\056\076\001\002\000\024\003\113\012\116\020\105\021" +
    "\111\023\114\035\112\036\uffb5\054\106\056\076\001\002" +
    "\000\004\011\075\001\002\000\012\003\uff95\012\uff95\023" +
    "\uff95\035\uff95\001\002\000\050\003\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\025\uff9f\030\uff9f\031\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\052\uff9f\057\uff9f\001\002\000\010\003\uffb3\015" +
    "\uffb3\036\uffb3\001\002\000\004\036\145\001\002\000\060" +
    "\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\034\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\052\uff8c\055\uff8c\057\uff8c\001\002\000\060\003\uff91" +
    "\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\025\uff91\026\uff91\027\130" +
    "\030\uff91\031\uff91\034\uff91\036\uff91\037\uff91\040\uff91\052" +
    "\uff91\055\uff91\057\uff91\001\002\000\060\003\uff8f\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\052\uff8f\055" +
    "\uff8f\057\uff8f\001\002\000\034\003\uffba\004\uffba\005\uffba" +
    "\006\uffba\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\036" +
    "\uffba\040\uffba\052\uffba\057\uffba\001\002\000\050\003\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\025\uffa2\030\uffa2\031\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\052\uffa2\057\uffa2\001\002\000" +
    "\052\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\025\uffa3\030" +
    "\uffa3\031\uffa3\036\uffa3\037\uffa3\040\uffa3\052\uffa3\053\uff9c" +
    "\057\uffa3\001\002\000\010\003\143\015\142\036\uffb6\001" +
    "\002\000\050\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\025" +
    "\uffa0\030\uffa0\031\uffa0\036\uffa0\037\uffa0\040\uffa0\052\uffa0" +
    "\057\uffa0\001\002\000\050\003\uffa1\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\025\uffa1\030\uffa1\031\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\052\uffa1\057\uffa1\001\002\000\012\003\123\012\124" +
    "\023\114\035\112\001\002\000\056\003\uff8a\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\035\125\036\uff8a\040\uff8a\052\uff8a\053\uff9a\057\uff8a" +
    "\001\002\000\060\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\034\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\052\uff8e\055\uff8e\057\uff8e\001\002" +
    "\000\004\053\132\001\002\000\056\003\uff8d\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\035\073\036\uff8d\040\uff8d\052\uff8d\053\uff9b\057\uff8d" +
    "\001\002\000\052\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\025\uff93\026\121\030\uff93\031\uff93\036\uff93\037\uff93\040" +
    "\uff93\052\uff93\057\uff93\001\002\000\034\003\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\036\uffb9\040\uffb9\052\uffb9\057\uffb9\001\002\000\012" +
    "\003\123\012\124\023\114\035\112\001\002\000\060\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\025\uff92\026\uff92\027" +
    "\130\030\uff92\031\uff92\034\uff92\036\uff92\037\uff92\040\uff92" +
    "\052\uff92\055\uff92\057\uff92\001\002\000\062\003\uff8a\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\034\uff8a\035\125\036\uff8a\037\uff8a\040\uff8a" +
    "\052\uff8a\055\uff8a\057\uff8a\001\002\000\062\003\uff8d\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\034\uff8d\035\073\036\uff8d\037\uff8d\040\uff8d" +
    "\052\uff8d\055\uff8d\057\uff8d\001\002\000\024\003\113\012" +
    "\116\020\105\021\111\023\114\035\112\036\uffb5\054\106" +
    "\056\076\001\002\000\004\036\127\001\002\000\060\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\052\uffb7\055\uffb7\057\uffb7\001\002\000\012\003\123\012" +
    "\124\023\114\035\112\001\002\000\060\003\uff90\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\034\uff90\036\uff90\037\uff90\040\uff90\052\uff90\055" +
    "\uff90\057\uff90\001\002\000\010\003\134\012\135\054\133" +
    "\001\002\000\056\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\025\uff9c\030\uff9c\031\uff9c\034\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\052\uff9c\053\uff9c\055\uff9c\057\uff9c\001\002\000\056" +
    "\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\025\uff9a\030\uff9a" +
    "\031\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a\052\uff9a\053" +
    "\uff9a\055\uff9a\057\uff9a\001\002\000\056\003\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\025\uff9b\030\uff9b\031\uff9b\034\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\052\uff9b\053\uff9b\055\uff9b\057" +
    "\uff9b\001\002\000\056\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\025\uff9d\030\uff9d\031\uff9d\034\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\052\uff9d\053\132\055\uff9d\057\uff9d\001\002\000" +
    "\054\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\025\uff9e\030" +
    "\uff9e\031\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\052\uff9e" +
    "\055\uff9e\057\uff9e\001\002\000\006\026\121\036\141\001" +
    "\002\000\060\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\052\uff8b\055\uff8b\057\uff8b\001\002\000" +
    "\022\003\113\012\116\020\105\021\111\023\114\035\112" +
    "\054\106\056\076\001\002\000\010\003\uffb2\015\uffb2\036" +
    "\uffb2\001\002\000\010\003\uffb4\015\uffb4\036\uffb4\001\002" +
    "\000\060\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\052\uffb8\055\uffb8\057\uffb8\001\002\000\032" +
    "\003\uffa4\004\uffa4\005\uffa4\006\uffa4\010\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\037\uffa4\040\uffa4\052\uffa4\057\uffa4\001\002" +
    "\000\032\003\uff98\004\uff98\005\uff98\006\uff98\010\uff98\012" +
    "\uff98\013\uff98\014\uff98\037\uff98\040\uff98\052\uff98\057\uff98" +
    "\001\002\000\012\003\uff94\012\uff94\023\uff94\035\uff94\001" +
    "\002\000\032\003\uff99\004\uff99\005\uff99\006\uff99\010\uff99" +
    "\012\uff99\013\uff99\014\uff99\037\uff99\040\uff99\052\uff99\057" +
    "\uff99\001\002\000\010\005\uffcb\006\uffcb\010\uffcb\001\002" +
    "\000\030\003\uffbb\004\uffbb\005\uffbb\006\uffbb\010\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\040\uffbb\052\uffbb\057\uffbb\001\002" +
    "\000\010\005\uffca\006\uffca\010\uffca\001\002\000\010\003" +
    "\160\012\161\054\157\001\002\000\010\003\160\012\161" +
    "\054\157\001\002\000\006\036\uff72\053\uff9c\001\002\000" +
    "\006\036\uff70\053\uff9a\001\002\000\006\036\uff73\053\uff9b" +
    "\001\002\000\004\036\uff71\001\002\000\004\036\164\001" +
    "\002\000\032\003\uff75\004\uff75\005\uff75\006\uff75\010\uff75" +
    "\012\uff75\013\uff75\014\uff75\037\uff75\040\uff75\052\uff75\057" +
    "\uff75\001\002\000\004\036\166\001\002\000\032\003\uff74" +
    "\004\uff74\005\uff74\006\uff74\010\uff74\012\uff74\013\uff74\014" +
    "\uff74\037\uff74\040\uff74\052\uff74\057\uff74\001\002\000\012" +
    "\003\123\012\124\023\114\035\112\001\002\000\012\003" +
    "\uff96\012\uff96\023\uff96\035\uff96\001\002\000\032\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\010\uff97\012\uff97\013\uff97\014" +
    "\uff97\037\uff97\040\uff97\052\uff97\057\uff97\001\002\000\012" +
    "\003\uffae\007\uffae\030\uffae\031\uffae\001\002\000\022\003" +
    "\113\012\116\020\105\021\111\023\114\035\112\054\106" +
    "\056\076\001\002\000\016\003\uffaa\007\uffaa\011\uffaa\025" +
    "\uffaa\030\uffaa\031\uffaa\001\002\000\006\011\266\025\264" +
    "\001\002\000\020\007\256\011\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\035\125\053\uff9a\001\002\000\012\003\201\007\203" +
    "\030\202\031\204\001\002\000\016\003\uffa9\007\uffa9\011" +
    "\uffa9\025\uffa9\030\uffa9\031\uffa9\001\002\000\004\013\251" +
    "\001\002\000\022\003\113\012\116\020\105\021\111\023" +
    "\114\035\112\054\106\056\076\001\002\000\006\003\206" +
    "\013\207\001\002\000\022\003\113\012\116\020\105\021" +
    "\111\023\114\035\112\054\106\056\076\001\002\000\012" +
    "\003\uffb0\007\uffb0\030\uffb0\031\uffb0\001\002\000\030\003" +
    "\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050" +
    "\014\017\040\045\052\061\057\057\001\002\000\030\003" +
    "\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050" +
    "\014\017\040\045\052\061\057\057\001\002\000\010\005" +
    "\212\006\uffc0\010\213\001\002\000\004\006\241\001\002" +
    "\000\006\003\235\013\236\001\002\000\024\003\214\012" +
    "\116\020\105\021\111\023\114\032\173\035\112\054\106" +
    "\056\076\001\002\000\020\007\231\011\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\035\125\053\uff9a\001\002\000\012\003\216" +
    "\007\217\030\202\031\204\001\002\000\004\013\226\001" +
    "\002\000\006\003\220\013\221\001\002\000\030\003\056" +
    "\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050\014" +
    "\017\040\045\052\061\057\057\001\002\000\030\003\056" +
    "\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050\014" +
    "\017\040\045\052\061\057\057\001\002\000\010\005\212" +
    "\006\uffc0\010\213\001\002\000\004\006\uffc2\001\002\000" +
    "\010\005\212\006\uffc0\010\213\001\002\000\004\006\uffbd" +
    "\001\002\000\030\003\056\004\055\005\uffc8\006\uffc8\010" +
    "\uffc8\012\063\013\050\014\017\040\045\052\061\057\057" +
    "\001\002\000\010\005\212\006\uffc0\010\213\001\002\000" +
    "\004\006\uffbe\001\002\000\004\013\232\001\002\000\030" +
    "\003\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013" +
    "\050\014\017\040\045\052\061\057\057\001\002\000\010" +
    "\005\212\006\uffc0\010\213\001\002\000\004\006\uffbf\001" +
    "\002\000\010\005\212\006\uffc0\010\213\001\002\000\010" +
    "\005\212\006\uffc0\010\213\001\002\000\004\006\uffc1\001" +
    "\002\000\004\006\uffbc\001\002\000\006\003\242\004\243" +
    "\001\002\000\030\003\uffc3\004\uffc3\005\uffc3\006\uffc3\010" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\040\uffc3\052\uffc3\057\uffc3" +
    "\001\002\000\030\003\uffc7\004\uffc7\005\uffc7\006\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\040\uffc7\052\uffc7\057\uffc7" +
    "\001\002\000\010\005\212\006\uffc0\010\213\001\002\000" +
    "\004\006\246\001\002\000\004\004\247\001\002\000\030" +
    "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\040\uffc4\052\uffc4\057\uffc4\001\002\000\012" +
    "\003\uffb1\007\uffb1\030\uffb1\031\uffb1\001\002\000\030\003" +
    "\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063\013\050" +
    "\014\017\040\045\052\061\057\057\001\002\000\010\005" +
    "\212\006\uffc0\010\213\001\002\000\004\006\254\001\002" +
    "\000\004\004\255\001\002\000\030\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\040\uffc5" +
    "\052\uffc5\057\uffc5\001\002\000\004\013\257\001\002\000" +
    "\030\003\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063" +
    "\013\050\014\017\040\045\052\061\057\057\001\002\000" +
    "\010\005\212\006\uffc0\010\213\001\002\000\004\006\262" +
    "\001\002\000\004\004\263\001\002\000\030\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\040\uffc6\052\uffc6\057\uffc6\001\002\000\022\003\uffac\012" +
    "\uffac\020\uffac\021\uffac\023\uffac\035\uffac\054\uffac\056\uffac" +
    "\001\002\000\022\003\113\012\116\020\105\021\111\023" +
    "\114\035\112\054\106\056\076\001\002\000\022\003\uffab" +
    "\012\uffab\020\uffab\021\uffab\023\uffab\035\uffab\054\uffab\056" +
    "\uffab\001\002\000\012\003\uffad\007\uffad\030\uffad\031\uffad" +
    "\001\002\000\012\003\uffaf\007\uffaf\030\uffaf\031\uffaf\001" +
    "\002\000\010\005\uffc9\006\uffc9\010\uffc9\001\002\000\010" +
    "\005\uffcd\006\uffcd\010\uffcd\001\002\000\010\005\uffcf\006" +
    "\uffcf\010\uffcf\001\002\000\010\005\uffd0\006\uffd0\010\uffd0" +
    "\001\002\000\010\005\uffcc\006\uffcc\010\uffcc\001\002\000" +
    "\030\003\056\004\055\005\uffc8\006\uffc8\010\uffc8\012\063" +
    "\013\050\014\017\040\045\052\061\057\057\001\002\000" +
    "\010\005\uffce\006\uffce\010\uffce\001\002\000\012\003\307" +
    "\017\042\022\040\024\041\001\002\000\010\017\042\022" +
    "\040\024\041\001\002\000\004\013\303\001\002\000\024" +
    "\003\056\004\055\006\uffc8\012\063\013\050\014\017\040" +
    "\045\052\061\057\057\001\002\000\004\006\305\001\002" +
    "\000\004\055\306\001\002\000\012\013\uffd3\014\uffd3\034" +
    "\uffd3\055\uffd3\001\002\000\004\013\321\001\002\000\006" +
    "\003\311\013\312\001\002\000\024\003\056\004\055\006" +
    "\uffc8\012\063\013\050\014\017\040\045\052\061\057\057" +
    "\001\002\000\024\003\056\004\055\006\uffc8\012\063\013" +
    "\050\014\017\040\045\052\061\057\057\001\002\000\004" +
    "\006\314\001\002\000\004\055\315\001\002\000\012\013" +
    "\uffd7\014\uffd7\034\uffd7\055\uffd7\001\002\000\004\006\317" +
    "\001\002\000\004\055\320\001\002\000\012\013\uffd1\014" +
    "\uffd1\034\uffd1\055\uffd1\001\002\000\024\003\056\004\055" +
    "\006\uffc8\012\063\013\050\014\017\040\045\052\061\057" +
    "\057\001\002\000\004\006\323\001\002\000\004\055\324" +
    "\001\002\000\012\013\uffd2\014\uffd2\034\uffd2\055\uffd2\001" +
    "\002\000\004\012\333\001\002\000\010\017\042\022\040" +
    "\024\041\001\002\000\040\003\uff80\004\uff80\005\uff80\006" +
    "\uff80\010\uff80\012\uff80\013\uff80\014\uff80\034\uff80\036\uff80" +
    "\037\uff80\040\uff80\052\uff80\055\uff80\057\uff80\001\002\000" +
    "\042\003\uff81\004\uff81\005\uff81\006\uff81\010\uff81\012\uff81" +
    "\013\uff81\014\uff81\015\331\034\uff81\036\uff81\037\uff81\040" +
    "\uff81\052\uff81\055\uff81\057\uff81\001\002\000\004\012\032" +
    "\001\002\000\040\003\uff82\004\uff82\005\uff82\006\uff82\010" +
    "\uff82\012\uff82\013\uff82\014\uff82\034\uff82\036\uff82\037\uff82" +
    "\040\uff82\052\uff82\055\uff82\057\uff82\001\002\000\010\003" +
    "\uff7f\015\uff7f\016\uff7f\001\002\000\004\036\335\001\002" +
    "\000\004\016\336\001\002\000\010\017\042\022\040\024" +
    "\041\001\002\000\004\013\340\001\002\000\024\003\056" +
    "\004\055\006\uffc8\012\063\013\050\014\017\040\045\052" +
    "\061\057\057\001\002\000\004\006\342\001\002\000\004" +
    "\055\343\001\002\000\012\013\uffd5\014\uffd5\034\uffd5\055" +
    "\uffd5\001\002\000\006\012\032\036\uffa7\001\002\000\004" +
    "\036\346\001\002\000\004\016\347\001\002\000\010\017" +
    "\042\022\040\024\041\001\002\000\004\013\351\001\002" +
    "\000\024\003\056\004\055\006\uffc8\012\063\013\050\014" +
    "\017\040\045\052\061\057\057\001\002\000\004\006\353" +
    "\001\002\000\004\055\354\001\002\000\012\013\uffd6\014" +
    "\uffd6\034\uffd6\055\uffd6\001\002\000\012\013\361\014\017" +
    "\034\016\055\022\001\002\000\012\013\361\014\017\034" +
    "\016\055\022\001\002\000\012\013\361\014\017\034\016" +
    "\055\022\001\002\000\006\003\ufff7\006\ufff7\001\002\000" +
    "\016\003\ufff2\006\ufff2\013\361\014\017\034\016\055\022" +
    "\001\002\000\006\003\ufff5\006\ufff5\001\002\000\006\003" +
    "\ufff4\006\ufff4\001\002\000\006\003\ufff6\006\ufff6\001\002" +
    "\000\006\003\ufff3\006\ufff3\001\002\000\004\033\372\001" +
    "\002\000\006\003\370\033\371\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffc\001" +
    "\002\000\036\003\uff88\004\uff88\005\uff88\006\uff88\010\uff88" +
    "\012\uff88\013\uff88\014\uff88\034\uff88\037\uff88\040\uff88\052" +
    "\uff88\055\uff88\057\uff88\001\002\000\036\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\010\uff89\012\uff89\013\uff89\014\uff89\034" +
    "\uff89\037\uff89\040\uff89\052\uff89\055\uff89\057\uff89\001\002" +
    "\000\006\015\376\016\377\001\002\000\004\012\032\001" +
    "\002\000\010\017\u0103\022\u0100\024\u0102\001\002\000\042" +
    "\003\uff78\004\uff78\005\uff78\006\uff78\010\uff78\011\u010d\012" +
    "\uff78\013\uff78\014\uff78\015\uff78\034\uff78\037\uff78\040\uff78" +
    "\052\uff78\055\uff78\057\uff78\001\002\000\036\003\uff87\004" +
    "\uff87\005\uff87\006\uff87\010\uff87\012\uff87\013\uff87\014\uff87" +
    "\034\uff87\037\uff87\040\uff87\052\uff87\055\uff87\057\uff87\001" +
    "\002\000\042\003\uff77\004\uff77\005\uff77\006\uff77\010\uff77" +
    "\011\u010a\012\uff77\013\uff77\014\uff77\015\uff77\034\uff77\037" +
    "\uff77\040\uff77\052\uff77\055\uff77\057\uff77\001\002\000\042" +
    "\003\uff76\004\uff76\005\uff76\006\uff76\010\uff76\011\u0107\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\034\uff76\037\uff76\040\uff76" +
    "\052\uff76\055\uff76\057\uff76\001\002\000\040\003\uff83\004" +
    "\uff83\005\uff83\006\uff83\010\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\u0105\034\uff83\037\uff83\040\uff83\052\uff83\055\uff83\057" +
    "\uff83\001\002\000\004\012\032\001\002\000\036\003\uff86" +
    "\004\uff86\005\uff86\006\uff86\010\uff86\012\uff86\013\uff86\014" +
    "\uff86\034\uff86\037\uff86\040\uff86\052\uff86\055\uff86\057\uff86" +
    "\001\002\000\006\020\u0108\021\u0109\001\002\000\036\003" +
    "\uff7b\004\uff7b\005\uff7b\006\uff7b\010\uff7b\012\uff7b\013\uff7b" +
    "\014\uff7b\034\uff7b\037\uff7b\040\uff7b\052\uff7b\055\uff7b\057" +
    "\uff7b\001\002\000\036\003\uff7a\004\uff7a\005\uff7a\006\uff7a" +
    "\010\uff7a\012\uff7a\013\uff7a\014\uff7a\034\uff7a\037\uff7a\040" +
    "\uff7a\052\uff7a\055\uff7a\057\uff7a\001\002\000\010\003\134" +
    "\012\135\054\u010b\001\002\000\040\003\uff7c\004\uff7c\005" +
    "\uff7c\006\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\034\uff7c" +
    "\037\uff7c\040\uff7c\052\uff7c\053\uff9c\055\uff7c\057\uff7c\001" +
    "\002\000\036\003\uff79\004\uff79\005\uff79\006\uff79\010\uff79" +
    "\012\uff79\013\uff79\014\uff79\034\uff79\037\uff79\040\uff79\052" +
    "\uff79\055\uff79\057\uff79\001\002\000\012\003\123\012\124" +
    "\023\114\035\112\001\002\000\040\003\uff7d\004\uff7d\005" +
    "\uff7d\006\uff7d\010\uff7d\012\uff7d\013\uff7d\014\uff7d\026\121" +
    "\034\uff7d\037\uff7d\040\uff7d\052\uff7d\055\uff7d\057\uff7d\001" +
    "\002\000\006\015\325\016\u0110\001\002\000\010\017\042" +
    "\022\040\024\041\001\002\000\040\003\uff84\004\uff84\005" +
    "\uff84\006\uff84\010\uff84\012\uff84\013\uff84\014\uff84\015\u0112" +
    "\034\uff84\037\uff84\040\uff84\052\uff84\055\uff84\057\uff84\001" +
    "\002\000\004\012\032\001\002\000\036\003\uff85\004\uff85" +
    "\005\uff85\006\uff85\010\uff85\012\uff85\013\uff85\014\uff85\034" +
    "\uff85\037\uff85\040\uff85\052\uff85\055\uff85\057\uff85\001\002" +
    "\000\004\035\u017a\001\002\000\006\003\u0116\035\u0117\001" +
    "\002\000\006\012\032\036\uffa7\001\002\000\010\003\uffa7" +
    "\012\032\036\uffa7\001\002\000\006\003\u011a\036\u0119\001" +
    "\002\000\006\003\u016c\013\u016d\001\002\000\004\013\u011b" +
    "\001\002\000\024\003\u0122\004\u0120\006\uffe4\012\063\013" +
    "\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000\004" +
    "\034\u016a\001\002\000\030\003\u0122\004\u0120\005\uffe4\006" +
    "\uffe4\010\uffe4\012\063\013\u011d\014\017\037\u0124\040\u011c" +
    "\057\057\001\002\000\030\003\u0122\004\u0120\005\uffe4\006" +
    "\uffe4\010\uffe4\012\063\013\u011d\014\017\037\u0124\040\u011c" +
    "\057\057\001\002\000\030\003\u0122\004\u0120\005\uffe4\006" +
    "\uffe4\010\uffe4\012\063\013\u011d\014\017\037\u0124\040\u011c" +
    "\057\057\001\002\000\024\003\u0136\012\116\020\105\021" +
    "\111\023\114\032\173\035\112\054\106\056\076\001\002" +
    "\000\004\006\u0134\001\002\000\040\003\u0122\004\u0120\005" +
    "\uffe4\006\uffe4\010\uffe4\011\170\012\063\013\u011d\014\017" +
    "\026\070\027\074\035\125\037\u0124\040\u011c\057\057\001" +
    "\002\000\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4" +
    "\012\063\013\u011d\014\017\037\u0124\040\u011c\057\057\001" +
    "\002\000\004\041\u0129\001\002\000\030\003\u0122\004\u0120" +
    "\005\uffe4\006\uffe4\010\uffe4\012\063\013\u011d\014\017\037" +
    "\u0124\040\u011c\057\057\001\002\000\030\003\u0122\004\u0120" +
    "\005\uffe4\006\uffe4\010\uffe4\012\063\013\u011d\014\017\037" +
    "\u0124\040\u011c\057\057\001\002\000\010\005\uffe6\006\uffe6" +
    "\010\uffe6\001\002\000\010\005\uffe8\006\uffe8\010\uffe8\001" +
    "\002\000\004\042\u012a\001\002\000\004\043\u012b\001\002" +
    "\000\004\044\u012c\001\002\000\004\045\u012d\001\002\000" +
    "\004\046\u012e\001\002\000\004\047\u012f\001\002\000\004" +
    "\050\u0130\001\002\000\004\051\u0131\001\002\000\010\005" +
    "\uff6f\006\uff6f\010\uff6f\001\002\000\010\005\uffe7\006\uffe7" +
    "\010\uffe7\001\002\000\010\005\uffe5\006\uffe5\010\uffe5\001" +
    "\002\000\004\034\u0135\001\002\000\012\013\uffee\014\uffee" +
    "\034\uffee\055\uffee\001\002\000\020\007\u0161\011\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\035\125\053\uff9a\001\002\000\012" +
    "\003\u0139\007\u0138\030\202\031\204\001\002\000\006\003" +
    "\u0156\013\u0157\001\002\000\004\013\u013a\001\002\000\030" +
    "\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063\013" +
    "\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000\010" +
    "\005\u013d\006\uffdc\010\u013c\001\002\000\024\003\u0145\012" +
    "\116\020\105\021\111\023\114\032\173\035\112\054\106" +
    "\056\076\001\002\000\006\003\u0141\013\u0142\001\002\000" +
    "\004\006\u013f\001\002\000\004\004\u0140\001\002\000\030" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\037\uffe1\040\uffe1\057\uffe1\001\002\000\024" +
    "\003\u0122\004\u0120\006\uffe4\012\063\013\u011d\014\017\037" +
    "\u0124\040\u011c\057\057\001\002\000\024\003\u0122\004\u0120" +
    "\006\uffe4\012\063\013\u011d\014\017\037\u0124\040\u011c\057" +
    "\057\001\002\000\004\006\uffdd\001\002\000\004\006\uffd8" +
    "\001\002\000\020\007\u0152\011\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\035\125\053\uff9a\001\002\000\012\003\u0147\007\u0148" +
    "\030\202\031\204\001\002\000\004\013\u014f\001\002\000" +
    "\006\003\u0149\013\u014a\001\002\000\030\003\u0122\004\u0120" +
    "\005\uffe4\006\uffe4\010\uffe4\012\063\013\u011d\014\017\037" +
    "\u0124\040\u011c\057\057\001\002\000\030\003\u0122\004\u0120" +
    "\005\uffe4\006\uffe4\010\uffe4\012\063\013\u011d\014\017\037" +
    "\u0124\040\u011c\057\057\001\002\000\010\005\u013d\006\uffdc" +
    "\010\u013c\001\002\000\004\006\uffde\001\002\000\010\005" +
    "\u013d\006\uffdc\010\u013c\001\002\000\004\006\uffd9\001\002" +
    "\000\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012" +
    "\063\013\u011d\014\017\037\u0124\040\u011c\057\057\001\002" +
    "\000\010\005\u013d\006\uffdc\010\u013c\001\002\000\004\006" +
    "\uffda\001\002\000\004\013\u0153\001\002\000\030\003\u0122" +
    "\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063\013\u011d\014" +
    "\017\037\u0124\040\u011c\057\057\001\002\000\010\005\u013d" +
    "\006\uffdc\010\u013c\001\002\000\004\006\uffdb\001\002\000" +
    "\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063" +
    "\013\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000" +
    "\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063" +
    "\013\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000" +
    "\010\005\u013d\006\uffdc\010\u013c\001\002\000\004\006\u015a" +
    "\001\002\000\006\003\u015b\004\u015c\001\002\000\030\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\037\uffdf\040\uffdf\057\uffdf\001\002\000\030\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\037\uffe3\040\uffe3\057\uffe3\001\002\000\010\005" +
    "\u013d\006\uffdc\010\u013c\001\002\000\004\006\u015f\001\002" +
    "\000\004\004\u0160\001\002\000\030\003\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\037\uffe0" +
    "\040\uffe0\057\uffe0\001\002\000\004\013\u0162\001\002\000" +
    "\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063" +
    "\013\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000" +
    "\010\005\u013d\006\uffdc\010\u013c\001\002\000\004\006\u0165" +
    "\001\002\000\004\004\u0166\001\002\000\030\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\037\uffe2\040\uffe2\057\uffe2\001\002\000\010\005\uffe9\006" +
    "\uffe9\010\uffe9\001\002\000\010\005\uffec\006\uffec\010\uffec" +
    "\001\002\000\010\005\uffeb\006\uffeb\010\uffeb\001\002\000" +
    "\030\003\u0122\004\u0120\005\uffe4\006\uffe4\010\uffe4\012\063" +
    "\013\u011d\014\017\037\u0124\040\u011c\057\057\001\002\000" +
    "\010\005\uffea\006\uffea\010\uffea\001\002\000\024\003\u0122" +
    "\004\u0120\006\uffe4\012\063\013\u011d\014\017\037\u0124\040" +
    "\u011c\057\057\001\002\000\024\003\u0122\004\u0120\006\uffe4" +
    "\012\063\013\u011d\014\017\037\u0124\040\u011c\057\057\001" +
    "\002\000\004\006\u016f\001\002\000\004\034\u0170\001\002" +
    "\000\012\013\ufff1\014\ufff1\034\ufff1\055\ufff1\001\002\000" +
    "\004\006\u0172\001\002\000\004\034\u0173\001\002\000\012" +
    "\013\uffed\014\uffed\034\uffed\055\uffed\001\002\000\004\036" +
    "\u0175\001\002\000\004\013\u0176\001\002\000\024\003\u0122" +
    "\004\u0120\006\uffe4\012\063\013\u011d\014\017\037\u0124\040" +
    "\u011c\057\057\001\002\000\004\006\u0178\001\002\000\004" +
    "\034\u0179\001\002\000\012\013\uffef\014\uffef\034\uffef\055" +
    "\uffef\001\002\000\006\012\032\036\uffa7\001\002\000\004" +
    "\036\u017c\001\002\000\004\013\u017d\001\002\000\024\003" +
    "\u0122\004\u0120\006\uffe4\012\063\013\u011d\014\017\037\u0124" +
    "\040\u011c\057\057\001\002\000\004\006\u017f\001\002\000" +
    "\004\034\u0180\001\002\000\012\013\ufff0\014\ufff0\034\ufff0" +
    "\055\ufff0\001\002\000\006\003\ufffa\006\ufffa\001\002\000" +
    "\006\003\ufff8\006\ufff8\001\002\000\004\006\u0184\001\002" +
    "\000\004\033\u0185\001\002\000\004\002\ufffd\001\002\000" +
    "\012\013\023\014\017\034\016\055\022\001\002\000\004" +
    "\006\u0188\001\002\000\004\033\u0189\001\002\000\004\002" +
    "\ufffe\001\002\000\004\013\u018b\001\002\000\012\013\023" +
    "\014\017\034\016\055\022\001\002\000\004\006\u018d\001" +
    "\002\000\004\033\u018e\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0182\005\020\011" +
    "\013\032\014\001\001\000\012\003\017\005\020\011\013" +
    "\032\014\001\001\000\012\003\u0181\005\020\011\013\032" +
    "\014\001\001\000\012\003\u0180\005\020\011\013\032\014" +
    "\001\001\000\002\001\001\000\004\031\373\001\001\000" +
    "\002\001\001\000\012\004\357\005\356\011\354\032\355" +
    "\001\001\000\002\001\001\000\012\003\023\005\020\011" +
    "\013\032\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\333\027\032\030\030\001" +
    "\001\000\010\010\033\027\032\030\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\063\014\045\016\061" +
    "\032\046\040\052\041\051\045\050\046\057\051\053\001" +
    "\001\000\002\001\001\000\024\012\274\014\045\016\061" +
    "\032\046\040\052\041\051\045\050\046\057\051\053\001" +
    "\001\000\024\012\273\014\045\016\061\032\046\040\052" +
    "\041\051\045\050\046\057\051\053\001\001\000\024\012" +
    "\272\014\045\016\061\032\046\040\052\041\051\045\050" +
    "\046\057\051\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\271\014\045\016\061\032\046\040\052" +
    "\041\051\045\050\046\057\051\053\001\001\000\024\012" +
    "\270\014\045\016\061\032\046\040\052\041\051\045\050" +
    "\046\057\051\053\001\001\000\030\016\100\021\176\022" +
    "\171\023\174\033\116\034\101\035\102\036\173\037\177" +
    "\042\107\043\114\001\001\000\004\044\166\001\001\000" +
    "\002\001\001\000\024\012\153\014\045\016\061\032\046" +
    "\040\052\041\051\045\050\046\057\051\053\001\001\000" +
    "\024\015\152\016\100\033\116\034\101\035\102\036\103" +
    "\037\117\042\107\043\114\001\001\000\024\012\151\014" +
    "\045\016\061\032\046\040\052\041\051\045\050\046\057" +
    "\051\053\001\001\000\004\044\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\100" +
    "\033\116\034\101\035\102\037\150\001\001\000\002\001" +
    "\001\000\014\016\100\033\116\034\101\035\102\037\146" +
    "\001\001\000\010\036\145\042\107\043\114\001\001\000" +
    "\030\015\076\016\100\017\106\020\077\033\116\034\101" +
    "\035\102\036\103\037\117\042\107\043\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\100\033\137\034\101\035\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\100\034\121\035\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\076" +
    "\016\100\017\106\020\125\033\116\034\101\035\102\036" +
    "\103\037\117\042\107\043\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\100\035\130\001\001\000" +
    "\002\001\001\000\006\042\136\043\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\143\016\100\033\116\034\101\035\102\036" +
    "\103\037\117\042\107\043\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\161\043\114\047\164\001\001\000\010\042\161\043\114" +
    "\047\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\100\033\116\034\101\035\102\037\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\100\022\267\023\174\033\116\034\101\035\102\036\173" +
    "\037\177\042\107\043\114\001\001\000\002\001\001\000" +
    "\004\024\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\100\022" +
    "\247\023\174\033\116\034\101\035\102\036\173\037\177" +
    "\042\107\043\114\001\001\000\002\001\001\000\026\016" +
    "\100\022\204\023\174\033\116\034\101\035\102\036\173" +
    "\037\177\042\107\043\114\001\001\000\002\001\001\000" +
    "\024\012\243\014\045\016\061\032\046\040\052\041\051" +
    "\045\050\046\057\051\053\001\001\000\024\012\207\014" +
    "\045\016\061\032\046\040\052\041\051\045\050\046\057" +
    "\051\053\001\001\000\004\013\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\100\021\214\022\171" +
    "\023\174\033\116\034\101\035\102\036\173\037\177\042" +
    "\107\043\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\223\014" +
    "\045\016\061\032\046\040\052\041\051\045\050\046\057" +
    "\051\053\001\001\000\024\012\221\014\045\016\061\032" +
    "\046\040\052\041\051\045\050\046\057\051\053\001\001" +
    "\000\004\013\222\001\001\000\002\001\001\000\004\013" +
    "\224\001\001\000\002\001\001\000\024\012\226\014\045" +
    "\016\061\032\046\040\052\041\051\045\050\046\057\051" +
    "\053\001\001\000\004\013\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\232\014\045\016\061\032" +
    "\046\040\052\041\051\045\050\046\057\051\053\001\001" +
    "\000\004\013\233\001\001\000\002\001\001\000\004\013" +
    "\237\001\001\000\004\013\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\251\014\045\016\061\032\046\040\052\041\051" +
    "\045\050\046\057\051\053\001\001\000\004\013\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\257\014\045\016\061\032" +
    "\046\040\052\041\051\045\050\046\057\051\053\001\001" +
    "\000\004\013\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\100" +
    "\023\266\033\116\034\101\035\102\036\173\037\177\042" +
    "\107\043\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\276\014\045\016\061\032\046\040\052\041\051\045" +
    "\050\046\057\051\053\001\001\000\002\001\001\000\004" +
    "\025\307\001\001\000\004\025\301\001\001\000\002\001" +
    "\001\000\024\012\303\014\045\016\061\032\046\040\052" +
    "\041\051\045\050\046\057\051\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\315\014\045\016\061\032" +
    "\046\040\052\041\051\045\050\046\057\051\053\001\001" +
    "\000\024\012\312\014\045\016\061\032\046\040\052\041" +
    "\051\045\050\046\057\051\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\321\014\045" +
    "\016\061\032\046\040\052\041\051\045\050\046\057\051" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\032\030\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\336\001\001\000\002" +
    "\001\001\000\024\012\340\014\045\016\061\032\046\040" +
    "\052\041\051\045\050\046\057\051\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\344\027\032\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\347\001\001\000\002\001\001\000" +
    "\024\012\351\014\045\016\061\032\046\040\052\041\051" +
    "\045\050\046\057\051\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\364\005\356" +
    "\011\354\032\355\001\001\000\012\004\363\005\356\011" +
    "\354\032\355\001\001\000\012\004\362\005\356\011\354" +
    "\032\355\001\001\000\002\001\001\000\012\004\361\005" +
    "\356\011\354\032\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u010e\001\001\000\006\025\u0103" +
    "\026\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\032\030\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u010b" +
    "\043\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\100\033\u010d\034\101\035\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0110\001\001\000" +
    "\002\001\001\000\006\027\032\030\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u0173\027\032\030\030\001\001\000\010\010\u0117\027\032" +
    "\030\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\u0120\016\u0124\032\u011d\040\u011e" +
    "\041\051\045\050\046\u0122\050\u0125\001\001\000\002\001" +
    "\001\000\022\006\u0168\016\u0124\032\u011d\040\u011e\041\051" +
    "\045\050\046\u0122\050\u0125\001\001\000\022\006\u0167\016" +
    "\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125" +
    "\001\001\000\022\006\u0166\016\u0124\032\u011d\040\u011e\041" +
    "\051\045\050\046\u0122\050\u0125\001\001\000\030\016\100" +
    "\021\u0136\022\171\023\174\033\116\034\101\035\102\036" +
    "\173\037\177\042\107\043\114\001\001\000\002\001\001" +
    "\000\024\006\u0132\016\u0124\032\u011d\040\u011e\041\051\044" +
    "\166\045\050\046\u0122\050\u0125\001\001\000\022\006\u0131" +
    "\016\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050" +
    "\u0125\001\001\000\002\001\001\000\022\006\u0127\016\u0124" +
    "\032\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125\001" +
    "\001\000\022\006\u0126\016\u0124\032\u011d\040\u011e\041\051" +
    "\045\050\046\u0122\050\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\u013a\016\u0124\032" +
    "\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125\001\001" +
    "\000\004\007\u013d\001\001\000\030\016\100\021\u0145\022" +
    "\171\023\174\033\116\034\101\035\102\036\173\037\177" +
    "\042\107\043\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\u0143" +
    "\016\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050" +
    "\u0125\001\001\000\022\006\u0142\016\u0124\032\u011d\040\u011e" +
    "\041\051\045\050\046\u0122\050\u0125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\u014c\016" +
    "\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125" +
    "\001\001\000\022\006\u014a\016\u0124\032\u011d\040\u011e\041" +
    "\051\045\050\046\u0122\050\u0125\001\001\000\004\007\u014b" +
    "\001\001\000\002\001\001\000\004\007\u014d\001\001\000" +
    "\002\001\001\000\022\006\u014f\016\u0124\032\u011d\040\u011e" +
    "\041\051\045\050\046\u0122\050\u0125\001\001\000\004\007" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\u0153\016\u0124\032\u011d\040\u011e\041\051\045\050\046" +
    "\u0122\050\u0125\001\001\000\004\007\u0154\001\001\000\002" +
    "\001\001\000\022\006\u015c\016\u0124\032\u011d\040\u011e\041" +
    "\051\045\050\046\u0122\050\u0125\001\001\000\022\006\u0157" +
    "\016\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050" +
    "\u0125\001\001\000\004\007\u0158\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\u0162\016" +
    "\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125" +
    "\001\001\000\004\007\u0163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\u016a\016\u0124\032" +
    "\u011d\040\u011e\041\051\045\050\046\u0122\050\u0125\001\001" +
    "\000\002\001\001\000\022\006\u0170\016\u0124\032\u011d\040" +
    "\u011e\041\051\045\050\046\u0122\050\u0125\001\001\000\022" +
    "\006\u016d\016\u0124\032\u011d\040\u011e\041\051\045\050\046" +
    "\u0122\050\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\u0176\016\u0124\032\u011d\040\u011e\041\051\045\050\046" +
    "\u0122\050\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u017a\027\032\030\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\u017d" +
    "\016\u0124\032\u011d\040\u011e\041\051\045\050\046\u0122\050" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u0186" +
    "\005\020\011\013\032\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u018b\005\020\011\013\032\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		System.out.println("Listo Module");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Entro a este"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAL ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAL ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMCALL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARCALL ::= VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARCALL ::= VARCALL error 
            {
              Object RESULT =null;
		 System.out.println("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALASIGN ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALUNIRSTR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGNINT ::= identificador error VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asiganción"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGNINT ::= error OPASING VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asiganción"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPP ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPP ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPP ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= DIM error 
            {
              Object RESULT =null;
		 System.out.println("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VARS ::= CANTVARS error 
            {
              Object RESULT =null;
		 System.out.println("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Error en WRITE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALWR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALWR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VALWR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SUBINSTRUC ::= CONTINUE FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
