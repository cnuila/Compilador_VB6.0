
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\002\000\002\005\013\000\002" +
    "\006\005\000\002\006\004\000\002\006\006\000\002\006" +
    "\005\000\002\006\002\000\002\006\013\000\002\007\010" +
    "\000\002\007\005\000\002\007\002\000\002\011\015\000" +
    "\002\012\005\000\002\012\004\000\002\012\006\000\002" +
    "\012\005\000\002\012\002\000\002\012\013\000\002\013" +
    "\010\000\002\013\005\000\002\013\002\000\002\014\005" +
    "\000\002\014\005\000\002\014\004\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\010\003\000\002\010\002" +
    "\000\002\033\003\000\002\033\003\000\002\037\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\035\005\000\002\034\005\000\002\036" +
    "\003\000\002\036\004\000\002\036\004\000\002\032\003" +
    "\000\002\026\005\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\005\000\002" +
    "\025\004\000\002\024\005\000\002\024\007\000\002\024" +
    "\011\000\002\024\007\000\002\023\007\000\002\023\005" +
    "\000\002\022\005\000\002\022\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\006\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\033\004\001\002\000\004\012\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\012\013\020\014\014\034" +
    "\012\055\017\001\002\000\012\013\020\014\014\034\012" +
    "\055\017\001\002\000\004\012\231\001\002\000\012\013" +
    "\020\014\014\034\012\055\017\001\002\000\004\012\201" +
    "\001\002\000\004\006\176\001\002\000\014\006\ufff7\013" +
    "\171\014\014\034\012\055\017\001\002\000\004\012\022" +
    "\001\002\000\012\013\020\014\014\034\012\055\017\001" +
    "\002\000\004\006\ufffe\001\002\000\004\035\023\001\002" +
    "\000\006\012\025\036\uffd5\001\002\000\004\036\uffd6\001" +
    "\002\000\006\015\uffb9\016\uffb9\001\002\000\006\015\157" +
    "\016\160\001\002\000\004\036\030\001\002\000\004\016" +
    "\031\001\002\000\010\017\034\022\032\024\033\001\002" +
    "\000\020\006\uffb3\013\uffb3\014\uffb3\015\uffb3\034\uffb3\036" +
    "\uffb3\055\uffb3\001\002\000\020\006\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\034\uffb2\036\uffb2\055\uffb2\001\002\000\020\006" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\034\uffb1\036\uffb1\055\uffb1" +
    "\001\002\000\004\013\036\001\002\000\016\004\045\006" +
    "\uffe7\012\046\013\040\014\014\040\037\001\002\000\004" +
    "\055\154\001\002\000\022\004\045\005\uffe7\006\uffe7\010" +
    "\uffe7\012\046\013\040\014\014\040\037\001\002\000\004" +
    "\013\151\001\002\000\004\013\uffd3\001\002\000\004\013" +
    "\uffd4\001\002\000\004\013\147\001\002\000\020\012\110" +
    "\020\060\021\061\023\070\032\107\035\074\054\057\001" +
    "\002\000\010\011\054\026\053\027\055\001\002\000\004" +
    "\006\050\001\002\000\004\055\051\001\002\000\014\006" +
    "\uffec\013\uffec\014\uffec\034\uffec\055\uffec\001\002\000\006" +
    "\023\070\035\074\001\002\000\004\011\066\001\002\000" +
    "\014\020\060\021\061\023\uffcb\035\uffcb\054\057\001\002" +
    "\000\004\011\056\001\002\000\006\023\uffca\035\uffca\001" +
    "\002\000\020\007\uffd1\011\uffd1\013\uffd1\025\uffd1\030\uffd1" +
    "\031\uffd1\053\064\001\002\000\016\007\uffd0\011\uffd0\013" +
    "\uffd0\025\uffd0\030\uffd0\031\uffd0\001\002\000\016\007\uffcf" +
    "\011\uffcf\013\uffcf\025\uffcf\030\uffcf\031\uffcf\001\002\000" +
    "\016\007\uffce\011\uffce\013\uffce\025\uffce\030\uffce\031\uffce" +
    "\001\002\000\004\013\uffd2\001\002\000\004\054\065\001" +
    "\002\000\026\006\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd" +
    "\025\uffcd\030\uffcd\031\uffcd\034\uffcd\055\uffcd\001\002\000" +
    "\006\023\uffc9\035\uffc9\001\002\000\004\013\uffcc\001\002" +
    "\000\034\006\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\034\uffc3\036\uffc3" +
    "\055\uffc3\001\002\000\034\006\uffc6\007\uffc6\011\uffc6\013" +
    "\uffc6\014\uffc6\025\uffc6\026\uffc6\027\101\030\uffc6\031\uffc6" +
    "\034\uffc6\036\uffc6\055\uffc6\001\002\000\034\006\uffc4\007" +
    "\uffc4\011\uffc4\013\uffc4\014\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\034\uffc4\036\uffc4\055\uffc4\001\002\000" +
    "\020\007\uffc8\011\uffc8\013\uffc8\025\uffc8\026\077\030\uffc8" +
    "\031\uffc8\001\002\000\006\023\070\035\074\001\002\000" +
    "\006\026\077\036\076\001\002\000\034\006\uffc2\007\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\034\uffc2\036\uffc2\055\uffc2\001\002\000\006" +
    "\023\070\035\074\001\002\000\034\006\uffc7\007\uffc7\011" +
    "\uffc7\013\uffc7\014\uffc7\025\uffc7\026\uffc7\027\101\030\uffc7" +
    "\031\uffc7\034\uffc7\036\uffc7\055\uffc7\001\002\000\006\023" +
    "\070\035\074\001\002\000\034\006\uffc5\007\uffc5\011\uffc5" +
    "\013\uffc5\014\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\034\uffc5\036\uffc5\055\uffc5\001\002\000\014\007\uffd7" +
    "\011\uffd7\025\uffd7\030\uffd7\031\uffd7\001\002\000\014\007" +
    "\uffd8\011\uffd8\025\uffd8\030\uffd8\031\uffd8\001\002\000\010" +
    "\007\uffdf\030\uffdf\031\uffdf\001\002\000\006\011\140\025" +
    "\136\001\002\000\016\012\110\020\060\021\061\023\070" +
    "\035\074\054\057\001\002\000\006\011\140\025\136\001" +
    "\002\000\010\007\112\030\113\031\114\001\002\000\004" +
    "\013\117\001\002\000\016\012\110\020\060\021\061\023" +
    "\070\035\074\054\057\001\002\000\016\012\110\020\060" +
    "\021\061\023\070\035\074\054\057\001\002\000\010\007" +
    "\uffe1\030\uffe1\031\uffe1\001\002\000\010\007\uffe2\030\uffe2" +
    "\031\uffe2\001\002\000\022\004\045\005\uffe7\006\uffe7\010" +
    "\uffe7\012\046\013\040\014\014\040\037\001\002\000\010" +
    "\005\123\006\uffe3\010\122\001\002\000\004\006\133\001" +
    "\002\000\020\012\110\020\060\021\061\023\070\032\107" +
    "\035\074\054\057\001\002\000\004\013\124\001\002\000" +
    "\010\005\123\006\uffe3\010\122\001\002\000\004\006\uffe4" +
    "\001\002\000\010\007\127\030\113\031\114\001\002\000" +
    "\004\013\130\001\002\000\022\004\045\005\uffe7\006\uffe7" +
    "\010\uffe7\012\046\013\040\014\014\040\037\001\002\000" +
    "\010\005\123\006\uffe3\010\122\001\002\000\004\006\uffe5" +
    "\001\002\000\004\004\134\001\002\000\022\004\045\005" +
    "\uffe7\006\uffe7\010\uffe7\012\046\013\040\014\014\040\037" +
    "\001\002\000\010\005\uffe6\006\uffe6\010\uffe6\001\002\000" +
    "\016\012\uffda\020\uffda\021\uffda\023\uffda\035\uffda\054\uffda" +
    "\001\002\000\016\012\142\020\060\021\061\023\070\035" +
    "\074\054\057\001\002\000\016\012\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\035\uffd9\054\uffd9\001\002\000\010\007\uffde\030" +
    "\uffde\031\uffde\001\002\000\010\007\uffdb\030\uffdb\031\uffdb" +
    "\001\002\000\010\007\uffe0\030\uffe0\031\uffe0\001\002\000" +
    "\016\012\146\020\060\021\061\023\070\035\074\054\057" +
    "\001\002\000\010\007\uffdc\030\uffdc\031\uffdc\001\002\000" +
    "\010\007\uffdd\030\uffdd\031\uffdd\001\002\000\022\004\045" +
    "\005\uffe7\006\uffe7\010\uffe7\012\046\013\040\014\014\040" +
    "\037\001\002\000\010\005\uffe8\006\uffe8\010\uffe8\001\002" +
    "\000\022\004\045\005\uffe7\006\uffe7\010\uffe7\012\046\013" +
    "\040\014\014\040\037\001\002\000\010\005\uffeb\006\uffeb" +
    "\010\uffeb\001\002\000\010\005\uffea\006\uffea\010\uffea\001" +
    "\002\000\004\013\155\001\002\000\022\004\045\005\uffe7" +
    "\006\uffe7\010\uffe7\012\046\013\040\014\014\040\037\001" +
    "\002\000\010\005\uffe9\006\uffe9\010\uffe9\001\002\000\004" +
    "\012\164\001\002\000\010\017\034\022\032\024\033\001" +
    "\002\000\020\006\uffbb\013\uffbb\014\uffbb\015\162\034\uffbb" +
    "\036\uffbb\055\uffbb\001\002\000\004\012\025\001\002\000" +
    "\016\006\uffbc\013\uffbc\014\uffbc\034\uffbc\036\uffbc\055\uffbc" +
    "\001\002\000\006\015\uffba\016\uffba\001\002\000\014\006" +
    "\ufff7\013\171\014\014\034\012\055\017\001\002\000\014" +
    "\006\ufff7\013\171\014\014\034\012\055\017\001\002\000" +
    "\014\006\ufff7\013\171\014\014\034\012\055\017\001\002" +
    "\000\004\006\ufffc\001\002\000\014\006\ufff7\013\171\014" +
    "\014\034\012\055\017\001\002\000\004\006\ufffa\001\002" +
    "\000\004\006\ufff9\001\002\000\004\006\ufffb\001\002\000" +
    "\004\006\ufff8\001\002\000\004\033\177\001\002\000\004" +
    "\002\000\001\002\000\014\006\uffc1\013\uffc1\014\uffc1\034" +
    "\uffc1\055\uffc1\001\002\000\006\015\202\016\203\001\002" +
    "\000\004\012\025\001\002\000\010\017\207\022\204\024" +
    "\206\001\002\000\006\011\221\015\uffb3\001\002\000\014" +
    "\006\uffc0\013\uffc0\014\uffc0\034\uffc0\055\uffc0\001\002\000" +
    "\006\011\216\015\uffb2\001\002\000\006\011\213\015\uffb1" +
    "\001\002\000\004\015\211\001\002\000\004\012\025\001" +
    "\002\000\014\006\uffbf\013\uffbf\014\uffbf\034\uffbf\055\uffbf" +
    "\001\002\000\006\020\214\021\215\001\002\000\014\006" +
    "\uffb6\013\uffb6\014\uffb6\034\uffb6\055\uffb6\001\002\000\014" +
    "\006\uffb5\013\uffb5\014\uffb5\034\uffb5\055\uffb5\001\002\000" +
    "\004\054\217\001\002\000\016\006\uffb7\013\uffb7\014\uffb7" +
    "\034\uffb7\053\064\055\uffb7\001\002\000\014\006\uffb4\013" +
    "\uffb4\014\uffb4\034\uffb4\055\uffb4\001\002\000\006\023\070" +
    "\035\074\001\002\000\016\006\uffb8\013\uffb8\014\uffb8\026" +
    "\077\034\uffb8\055\uffb8\001\002\000\006\015\157\016\224" +
    "\001\002\000\010\017\034\022\032\024\033\001\002\000" +
    "\016\006\uffbd\013\uffbd\014\uffbd\015\226\034\uffbd\055\uffbd" +
    "\001\002\000\004\012\025\001\002\000\014\006\uffbe\013" +
    "\uffbe\014\uffbe\034\uffbe\055\uffbe\001\002\000\004\006\uffff" +
    "\001\002\000\004\035\232\001\002\000\006\012\025\036" +
    "\uffd5\001\002\000\004\036\234\001\002\000\004\013\235" +
    "\001\002\000\020\004\242\006\ufff1\012\046\013\237\014" +
    "\014\037\244\040\236\001\002\000\004\034\310\001\002" +
    "\000\024\004\242\005\ufff1\006\ufff1\010\ufff1\012\046\013" +
    "\237\014\014\037\244\040\236\001\002\000\004\013\305" +
    "\001\002\000\004\013\303\001\002\000\020\012\110\020" +
    "\060\021\061\023\070\032\107\035\074\054\057\001\002" +
    "\000\004\006\260\001\002\000\004\040\245\001\002\000" +
    "\004\041\246\001\002\000\004\042\247\001\002\000\004" +
    "\043\250\001\002\000\004\044\251\001\002\000\004\045" +
    "\252\001\002\000\004\046\253\001\002\000\004\047\254" +
    "\001\002\000\004\050\255\001\002\000\004\051\256\001" +
    "\002\000\004\052\257\001\002\000\010\005\uffb0\006\uffb0" +
    "\010\uffb0\001\002\000\004\034\261\001\002\000\014\006" +
    "\ufff6\013\ufff6\014\ufff6\034\ufff6\055\ufff6\001\002\000\010" +
    "\007\263\030\113\031\114\001\002\000\004\013\264\001" +
    "\002\000\024\004\242\005\ufff1\006\ufff1\010\ufff1\012\046" +
    "\013\237\014\014\037\244\040\236\001\002\000\010\005" +
    "\267\006\uffed\010\266\001\002\000\020\012\110\020\060" +
    "\021\061\023\070\032\107\035\074\054\057\001\002\000" +
    "\004\013\274\001\002\000\004\006\271\001\002\000\004" +
    "\004\272\001\002\000\024\004\242\005\ufff1\006\ufff1\010" +
    "\ufff1\012\046\013\237\014\014\037\244\040\236\001\002" +
    "\000\010\005\ufff0\006\ufff0\010\ufff0\001\002\000\020\004" +
    "\242\006\ufff1\012\046\013\237\014\014\037\244\040\236" +
    "\001\002\000\004\006\uffee\001\002\000\010\007\277\030" +
    "\113\031\114\001\002\000\004\013\300\001\002\000\024" +
    "\004\242\005\ufff1\006\ufff1\010\ufff1\012\046\013\237\014" +
    "\014\037\244\040\236\001\002\000\010\005\267\006\uffed" +
    "\010\266\001\002\000\004\006\uffef\001\002\000\024\004" +
    "\242\005\ufff1\006\ufff1\010\ufff1\012\046\013\237\014\014" +
    "\037\244\040\236\001\002\000\010\005\ufff2\006\ufff2\010" +
    "\ufff2\001\002\000\024\004\242\005\ufff1\006\ufff1\010\ufff1" +
    "\012\046\013\237\014\014\037\244\040\236\001\002\000" +
    "\010\005\ufff5\006\ufff5\010\ufff5\001\002\000\010\005\ufff4" +
    "\006\ufff4\010\ufff4\001\002\000\004\013\311\001\002\000" +
    "\024\004\242\005\ufff1\006\ufff1\010\ufff1\012\046\013\237" +
    "\014\014\037\244\040\236\001\002\000\010\005\ufff3\006" +
    "\ufff3\010\ufff3\001\002\000\004\006\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\005\015\011\010\025\012\001\001\000\012\003" +
    "\312\005\015\011\010\025\012\001\001\000\002\001\001" +
    "\000\012\003\227\005\015\011\010\025\012\001\001\000" +
    "\004\024\177\001\001\000\002\001\001\000\012\004\167" +
    "\005\166\011\164\025\165\001\001\000\002\001\001\000" +
    "\012\003\020\005\015\011\010\025\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\026\022\025\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\046\025\040\033" +
    "\043\034\041\037\042\001\001\000\002\001\001\000\014" +
    "\012\152\025\040\033\043\034\041\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\110\015\104\016\105\026\072\027" +
    "\070\030\071\031\103\032\102\035\061\001\001\000\004" +
    "\036\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\072\027\070\030\071\032\066" +
    "\001\001\000\002\001\001\000\006\031\062\035\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\074" +
    "\027\070\030\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\077\030\071\001\001\000\002\001\001" +
    "\000\004\030\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\143" +
    "\001\001\000\022\015\142\016\105\026\072\027\070\030" +
    "\071\031\103\032\102\035\061\001\001\000\004\017\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\115\016\105\026\072\027\070\030\071\031\103\032\102" +
    "\035\061\001\001\000\022\015\114\016\105\026\072\027" +
    "\070\030\071\031\103\032\102\035\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\117\025\040\033" +
    "\043\034\041\037\042\001\001\000\004\013\120\001\001" +
    "\000\002\001\001\000\024\014\125\015\104\016\105\026" +
    "\072\027\070\030\071\031\103\032\102\035\061\001\001" +
    "\000\002\001\001\000\004\013\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\130" +
    "\025\040\033\043\034\041\037\042\001\001\000\004\013" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\134\025\040\033\043\034\041\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\140\026\072" +
    "\027\070\030\071\031\103\032\102\035\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\144\026\072\027\070\030\071\031" +
    "\103\032\102\035\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\147\025\040\033\043\034\041\037" +
    "\042\001\001\000\002\001\001\000\014\012\151\025\040" +
    "\033\043\034\041\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\155\025\040" +
    "\033\043\034\041\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\160\001\001\000\002\001\001" +
    "\000\006\022\025\023\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\174\005\166\011\164\025\165" +
    "\001\001\000\012\004\173\005\166\011\164\025\165\001" +
    "\001\000\012\004\172\005\166\011\164\025\165\001\001" +
    "\000\002\001\001\000\012\004\171\005\166\011\164\025" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\222" +
    "\001\001\000\006\020\207\021\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\025\023\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\221\027\070\030\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\224\001" +
    "\001\000\002\001\001\000\006\022\025\023\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\232\022\025\023\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\242\025\237\033\240\034" +
    "\041\037\042\001\001\000\002\001\001\000\014\006\306" +
    "\025\237\033\240\034\041\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\261\015\104\016\105" +
    "\026\072\027\070\030\071\031\103\032\102\035\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\264\025\237\033\240\034" +
    "\041\037\042\001\001\000\004\007\267\001\001\000\024" +
    "\014\275\015\104\016\105\026\072\027\070\030\071\031" +
    "\103\032\102\035\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\272\025\237\033" +
    "\240\034\041\037\042\001\001\000\002\001\001\000\014" +
    "\006\274\025\237\033\240\034\041\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\300\025\237\033\240\034\041\037\042\001\001\000" +
    "\004\007\301\001\001\000\002\001\001\000\014\006\303" +
    "\025\237\033\240\034\041\037\042\001\001\000\002\001" +
    "\001\000\014\006\305\025\237\033\240\034\041\037\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\311\025\237\033\240\034\041\037\042" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Syntax error");
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		System.out.println("Listo Module");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUBINSTRUC ::= DECLARACION saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUBINSTRUC ::= EXIT SUB saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBINSTRUC ::= ASIGN saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBINSTRUC ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF SUBINSTRUC 
            {
              Object RESULT =null;
		
                                                System.out.println("if terminado");
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCINSTRUC ::= DECLARACION saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCINSTRUC ::= EXIT FUNCTION saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCINSTRUC ::= ASIGN saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;
		System.out.println("vacio");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCINSTRUC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF FUNCINSTRUC 
            {
              Object RESULT =null;
		
                                                System.out.println("if terminado");
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;
		System.out.println("ok");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICIONP ::= identificador OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICIONP ::= VALCOND OPCONDICION identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICIONP ::= identificador OPCONDICION identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UNIRSTRNG ::= STRING CONCATSTRING STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SUBINSTRUC ::= CONTINUE EXIT FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
