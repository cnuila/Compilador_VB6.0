import java_cup.runtime.Symbol;
import java.util.ArrayList;

class parser2;

parser code
{:
    public int cont = 0;    
    public ArrayList<String> errores;
    public TablaSimbolos tablaSimbolos; 
    public int offset = 0;
    public int cantVarsCreadas = 0;    

    public void setErrores(ArrayList<String> _errores){
        errores = _errores;
    }
    
    public void setTablaSimbolos(TablaSimbolos _tabla){
        tablaSimbolos = _tabla;
    }

:}

terminal IF, ELSE, END, THEN, ELSEIF, IGUAL, STRUCTURE, saltoLinea, DIM, COMA, AS, BOOLEANTYPE, TRUE, FALSE, INTEGERTYPE, STRINGTYPE, AND, OR, NOT, NEW, MODULE, SUB, PARENTESISL, PARENTESISR, EXIT, FOR, TO, NEXT, WHILE, DO, LOOP, RETURN, CONCATSTRING, FUNCTION, READ, WRITE;
terminal String identificador, STRING, INTEGER, OPADICION, OPMULTI, OPREL, LLAMADOSTRUC;

nonterminal S, MDLINSTRUC, SUBPROCE, FUNC, WRCONSOLE, STRUCTINSTRUC, UNIRSTRNG, VALWR, OPARIT, DECLARACION, CALL, PARAMCALL, VARCALL, OPASIGN, ASIGN, CONDICION, CONDICIONP, RETVAL, SIFSTATEMENT, IFSTATEMENT, STATEMENTS,STRUCTUREDECLA, COUNTER, VARPARAMS, PARAMS,M,VALUNIRSTR, OPCONDICION, T, FORSTATEMENT, DOWHILESTATE, VALOR;
nonterminal String TIPO, CANTVARS, VARS, CANTVARS2, VARS2;

precedence left IGUAL;
precedence left OPREL;
precedence left OPADICION;
precedence left OPMULTI;

start with S;

S      ::= MODULE identificador:id saltoLinea MDLINSTRUC:m END MODULE {:            
            System.out.println("Listo Module");       
        :}
; 

//if m != null
//Instrucciones dentro del Module
MDLINSTRUC  ::= DECLARACION:d MDLINSTRUC:md {:                    
                :}
                | saltoLinea MDLINSTRUC:md {:
                :}
                | FUNC:f MDLINSTRUC:md {:                    
                :}
                | SUBPROCE:s MDLINSTRUC:md {:                    
                :}
                | STRUCTUREDECLA:sd MDLINSTRUC:md {:                    
                    
                :}
                | saltoLinea
;

//Intrucciones de una Structure
STRUCTUREDECLA   ::= STRUCTURE identificador:id saltoLinea STRUCTINSTRUC:s END STRUCTURE {:
                :}
;

STRUCTINSTRUC   ::= DECLARACION:d STRUCTINSTRUC:s {:
                    :} 
                    | saltoLinea STRUCTINSTRUC:s {:
                    :} 
                    | saltoLinea {:
                    :}
;

//Instrucciones de un subprocedure
SUBPROCE    ::= SUB identificador:id PARENTESISL PARAMS:p PARENTESISR saltoLinea STATEMENTS:s END SUB {::}
;

//Instrucciones de una función
FUNC        ::= FUNCTION identificador:id PARENTESISL PARAMS:p PARENTESISR AS TIPO:t saltoLinea STATEMENTS:s END FUNCTION {::}
;

//gramática parámetros
PARAMS      ::=  VARPARAMS:v {::} 
                | {::}
;

VARPARAMS      ::= identificador:id AS TIPO:t COMA VARS2:v {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    :}
                    | identificador:id COMA CANTVARS2:c COMA VARS2:v {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    :}
                    | identificador:id COMA CANTVARS2:c {: 
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    :}
                    | identificador:id AS TIPO:t {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }  
                    :}
;

VARS2           ::= CANTVARS2:c COMA VARS2:v {: RESULT = c; :}
                    | CANTVARS2:c {: RESULT = c; :}                
;

CANTVARS2       ::= identificador:id COMA CANTVARS2:c {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        RESULT = c;
                    :}
                    | identificador:id AS TIPO:t {:
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        RESULT = t;
                    :}
;

//statements
STATEMENTS  ::= DECLARACION:d STATEMENTS:s {::}
                | saltoLinea STATEMENTS:s {::}
                | EXIT SUB STATEMENTS:s {::}
                | EXIT FUNCTION STATEMENTS:s {::}
                | ASIGN:a STATEMENTS:s {::}
                | RETVAL:r STATEMENTS:s {::}
                | CALL:c STATEMENTS:s {::}
                | WRCONSOLE:w STATEMENTS:s {::}
                | IFSTATEMENT:i STATEMENTS:s {::}
                | FORSTATEMENT:f STATEMENTS:s {::}
                |  DOWHILESTATE:d STATEMENTS:s {::}
                |{::}
;    

IFSTATEMENT      ::= IF CONDICION:c THEN M:m saltoLinea STATEMENTS:s SIFSTATEMENT:s2 END IF{::}
;        

SIFSTATEMENT ::= ELSEIF CONDICION:c THEN saltoLinea STATEMENTS:s SIFSTATEMENT:s2  {::}
                |  ELSE saltoLinea STATEMENTS:s {::} 
                | {::}
;


DOWHILESTATE  ::= DO WHILE CONDICION:c saltoLinea STATEMENTS:s LOOP{::}
;

FORSTATEMENT  ::= FOR COUNTER:c TO VALOR:v saltoLinea STATEMENTS:s NEXT{::}
;

RETVAL      ::= RETURN VALOR:v {::}
;

//Instrucciones del for
COUNTER     ::= identificador:id OPASIGN:o VALOR:v {::} 
                | identificador:id AS INTEGERTYPE IGUAL VALOR:v{::}
;

//llamado de funcion o sub procedure
CALL        ::= identificador:i PARENTESISL PARAMCALL:p PARENTESISR {::}
;                

PARAMCALL   ::= VARCALL:v {::} 
                | {::}
;

VARCALL     ::= VARCALL:v COMA VALOR:val {::}
                | VALOR:v {::}
;

//gramática condiciones
CONDICION   ::= CONDICION:c AND CONDICIONP:c1 {::}
                | CONDICION:c OR CONDICIONP:c1 {::}
                | NOT CONDICIONP:c {::}
                | CONDICIONP:c {: :}
;

CONDICIONP  ::= VALOR:v OPCONDICION:o VALOR:v2 {::};

OPCONDICION ::= OPREL:o {: :} 
                | IGUAL {: :}
;              

//gramática asignacion
ASIGN       ::= identificador:id OPASIGN:o VALOR:v {::}
                | identificador:id IGUAL READ {::}
                | LLAMADOSTRUC:l OPASIGN:o VALOR:v {::}
; 

UNIRSTRNG   ::= VALUNIRSTR:v CONCATSTRING UNIRSTRNG:ustr {::} 
                | VALUNIRSTR:v CONCATSTRING VALUNIRSTR:v2 {::}
;

VALUNIRSTR  ::= STRING:str {::} | identificador:id {::};

OPASIGN     ::= IGUAL {::} 
                | OPMULTI:op IGUAL {::}  
                | OPADICION:op IGUAL {::}  
;

//gramática operaciones aritméticas
OPARIT      ::= OPARIT:o OPADICION:oPa VALOR:v {::} 
                | OPARIT:o OPMULTI:oM VALOR:v {::}
                | PARENTESISL OPARIT:o PARENTESISR {: :} 
                | VALOR:v OPADICION:oPa VALOR:v2 {::}
                | VALOR:v OPMULTI:oM VALOR:v2 {::}
;

VALOR       ::= INTEGER:i {::}
                | STRING:str  {::}
                | TRUE {::}
                | FALSE {::}
                | NEW CALL:c {::}
                | CALL:c {::}
                | UNIRSTRNG:ustr {::}
                | identificador:id {:
                    //buscar id y asignarle ese el tipo a Objeto
                    :}
                | OPARIT:o {::}
;

//gramática declaración de variables
DECLARACION ::= DIM T;

T           ::= identificador:id AS TIPO:t IGUAL VALOR {::}
                | identificador:id AS TIPO:t COMA VARS:v {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                :}
                | identificador:id COMA CANTVARS:c COMA VARS:v {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                :}
                | identificador:id COMA CANTVARS:c {: 
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                :}
                | identificador:id AS TIPO:t {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }                   
                :}
;

VARS        ::= CANTVARS:c COMA VARS:v {: RESULT = c; :}
                | CANTVARS:c {: RESULT = c; :}                
;

CANTVARS    ::= identificador:id COMA CANTVARS:c {:
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    RESULT = c;
                :}
                | identificador:id AS TIPO:t {:                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    RESULT = t;
                :}
;


TIPO        ::= INTEGERTYPE {: RESULT="INTEGER"; :} | STRINGTYPE {: RESULT="STRING"; :} | BOOLEANTYPE {: RESULT="BOOLEAN"; :} | identificador:id {: RESULT=id; :} ;

//gramática escribir en consola
WRCONSOLE   ::= WRITE PARENTESISL VALWR:v PARENTESISR {::}
                
;

VALWR       ::= identificador:id {: :} 
                | STRING:str {: :} 
                | UNIRSTRNG:ustr {:  :}
; 

M           ::= {: :};