
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\246\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\044\010" +
    "\000\002\044\010\000\002\044\010\000\002\044\010\000" +
    "\002\011\004\000\002\011\004\000\002\011\003\000\002" +
    "\006\013\000\002\006\013\000\002\006\013\000\002\006" +
    "\013\000\002\006\013\000\002\007\015\000\002\007\015" +
    "\000\002\007\015\000\002\007\015\000\002\007\015\000" +
    "\002\007\015\000\002\007\015\000\002\060\003\000\002" +
    "\060\002\000\002\057\007\000\002\057\007\000\002\057" +
    "\005\000\002\057\005\000\002\061\005\000\002\061\003" +
    "\000\002\056\005\000\002\056\005\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\041\013\000\002\041\013\000\002" +
    "\041\013\000\002\041\013\000\002\041\013\000\002\040" +
    "\010\000\002\040\005\000\002\040\002\000\002\040\010" +
    "\000\002\040\010\000\002\040\010\000\002\040\005\000" +
    "\002\047\010\000\002\047\010\000\002\047\010\000\002" +
    "\047\010\000\002\047\010\000\002\046\011\000\002\046" +
    "\011\000\002\046\011\000\002\046\011\000\002\046\011" +
    "\000\002\037\004\000\002\025\003\000\002\025\003\000" +
    "\002\050\003\000\002\050\007\000\002\050\007\000\002" +
    "\022\006\000\002\022\006\000\002\023\003\000\002\023" +
    "\002\000\002\024\005\000\002\024\003\000\002\024\004" +
    "\000\002\035\005\000\002\035\005\000\002\035\004\000" +
    "\002\035\003\000\002\036\005\000\002\053\003\000\002" +
    "\053\003\000\002\034\003\000\002\034\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\033\005" +
    "\000\002\045\005\000\002\045\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\012\005\000\002\012\005\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\030\003\000" +
    "\002\030\004\000\002\030\004\000\002\027\003\000\002" +
    "\014\005\000\002\014\003\000\002\021\005\000\002\021" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\003\000\002\016\004\000" +
    "\002\016\004\000\002\017\005\000\002\017\007\000\002" +
    "\017\007\000\002\017\005\000\002\017\005\000\002\015" +
    "\005\000\002\015\003\000\002\054\005\000\002\054\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\006\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\010\006\000\002\010\006\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\062\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\006\003\004\030\005\001\002\000\004\050" +
    "\u01bf\001\002\000\006\003\010\050\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\013" +
    "\u01bb\001\002\000\006\003\012\013\013\001\002\000\014" +
    "\012\021\013\020\014\014\031\022\045\023\001\002\000" +
    "\014\012\021\013\020\014\014\031\022\045\023\001\002" +
    "\000\006\003\u0194\050\u0195\001\002\000\006\003\u018e\006" +
    "\u018f\001\002\000\014\012\021\013\020\014\014\031\022" +
    "\045\023\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\014\012\021\013\020\014\014" +
    "\031\022\045\023\001\002\000\006\003\u0176\050\u0177\001" +
    "\002\000\006\003\u0156\050\u0157\001\002\000\006\003\042" +
    "\050\043\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\014\012\021\013\031\014\014" +
    "\031\022\045\023\001\002\000\014\012\021\013\031\014" +
    "\014\031\022\045\023\001\002\000\006\003\ufff7\006\ufff7" +
    "\001\002\000\014\012\021\013\031\014\014\031\022\045" +
    "\023\001\002\000\020\003\ufff0\006\ufff0\012\021\013\031" +
    "\014\014\031\022\045\023\001\002\000\014\012\021\013" +
    "\031\014\014\031\022\045\023\001\002\000\014\012\021" +
    "\013\031\014\014\031\022\045\023\001\002\000\006\003" +
    "\ufff3\006\ufff3\001\002\000\006\003\ufff1\006\ufff1\001\002" +
    "\000\006\003\ufff4\006\ufff4\001\002\000\006\003\ufff5\006" +
    "\ufff5\001\002\000\006\003\ufff2\006\ufff2\001\002\000\006" +
    "\003\ufff6\006\ufff6\001\002\000\004\032\u014d\001\002\000" +
    "\006\003\044\032\045\001\002\000\006\033\uffdb\050\047" +
    "\001\002\000\010\003\uffdb\033\uffdb\050\047\001\002\000" +
    "\006\003\uffdc\033\uffdc\001\002\000\006\015\u0135\016\u0136" +
    "\001\002\000\006\003\052\033\051\001\002\000\006\003" +
    "\066\016\065\001\002\000\004\016\053\001\002\000\012" +
    "\017\057\022\054\023\056\050\055\001\002\000\054\003" +
    "\uff66\004\uff66\005\uff66\006\uff66\010\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\031\uff66\033\uff66\034\uff66\035\uff66\037" +
    "\uff66\041\uff66\042\uff66\043\uff66\045\uff66\047\uff66\050\uff66" +
    "\056\uff66\001\002\000\054\003\uff63\004\uff63\005\uff63\006" +
    "\uff63\010\uff63\012\uff63\013\uff63\014\uff63\015\uff63\031\uff63" +
    "\033\uff63\034\uff63\035\uff63\037\uff63\041\uff63\042\uff63\043" +
    "\uff63\045\uff63\047\uff63\050\uff63\056\uff63\001\002\000\054" +
    "\003\uff65\004\uff65\005\uff65\006\uff65\010\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\031\uff65\033\uff65\034\uff65\035\uff65" +
    "\037\uff65\041\uff65\042\uff65\043\uff65\045\uff65\047\uff65\050" +
    "\uff65\056\uff65\001\002\000\054\003\uff64\004\uff64\005\uff64" +
    "\006\uff64\010\uff64\012\uff64\013\uff64\014\uff64\015\uff64\031" +
    "\uff64\033\uff64\034\uff64\035\uff64\037\uff64\041\uff64\042\uff64" +
    "\043\uff64\045\uff64\047\uff64\050\uff64\056\uff64\001\002\000" +
    "\004\013\061\001\002\000\002\001\002\000\004\006\063" +
    "\001\002\000\004\045\064\001\002\000\050\003\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\031\uffe0\034\uffe0\035\uffe0\037\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\045\uffe0\047\uffe0\050\uffe0\056\uffe0\001\002\000\014" +
    "\003\074\017\057\022\054\023\056\050\055\001\002\000" +
    "\012\017\057\022\054\023\056\050\055\001\002\000\004" +
    "\013\070\001\002\000\002\001\002\000\004\006\072\001" +
    "\002\000\004\045\073\001\002\000\050\003\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\031" +
    "\uffdf\034\uffdf\035\uffdf\037\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\047\uffdf\050\uffdf\056\uffdf\001\002\000\004\013" +
    "\u0131\001\002\000\006\003\076\013\077\001\002\000\002" +
    "\001\002\000\032\003\122\004\110\006\uffc7\013\117\014" +
    "\014\034\100\035\123\041\116\043\106\047\112\050\125" +
    "\056\124\001\002\000\006\031\u012a\045\u012b\001\002\000" +
    "\042\003\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117" +
    "\014\014\034\100\035\123\037\uffc7\041\116\042\uffc7\043" +
    "\106\047\112\050\125\056\124\001\002\000\042\003\122" +
    "\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014\014\034" +
    "\100\035\123\037\uffc7\041\116\042\uffc7\043\106\047\112" +
    "\050\125\056\124\001\002\000\042\003\uff97\004\uff97\005" +
    "\uff97\006\uff97\010\uff97\013\uff97\014\uff97\034\uff97\035\uff97" +
    "\037\uff97\041\uff97\042\uff97\043\uff97\047\uff97\050\uff97\056" +
    "\uff97\001\002\000\042\003\122\004\110\005\uffc7\006\uffc7" +
    "\010\uffc7\013\117\014\014\034\100\035\123\037\uffc7\041" +
    "\116\042\uffc7\043\106\047\112\050\125\056\124\001\002" +
    "\000\042\003\122\004\110\005\uffc7\006\uffc7\010\uffc7\013" +
    "\117\014\014\034\100\035\123\037\uffc7\041\116\042\uffc7" +
    "\043\106\047\112\050\125\056\124\001\002\000\022\003" +
    "\152\020\144\021\150\032\151\046\135\050\155\051\145" +
    "\052\153\001\002\000\042\003\122\004\110\005\uffc7\006" +
    "\uffc7\010\uffc7\013\117\014\014\034\100\035\123\037\uffc7" +
    "\041\116\042\uffc7\043\106\047\112\050\125\056\124\001" +
    "\002\000\024\003\360\020\144\021\150\026\271\032\151" +
    "\046\135\050\155\051\145\052\153\001\002\000\042\003" +
    "\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014\014" +
    "\034\100\035\123\037\uffc7\041\116\042\uffc7\043\106\047" +
    "\112\050\125\056\124\001\002\000\006\003\345\032\346" +
    "\001\002\000\042\003\uff95\004\uff95\005\uff95\006\uff95\010" +
    "\uff95\013\uff95\014\uff95\034\uff95\035\uff95\037\uff95\041\uff95" +
    "\042\uff95\043\uff95\047\uff95\050\uff95\056\uff95\001\002\000" +
    "\004\006\343\001\002\000\042\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\010\uff96\013\uff96\014\uff96\034\uff96\035\uff96\037" +
    "\uff96\041\uff96\042\uff96\043\uff96\047\uff96\050\uff96\056\uff96" +
    "\001\002\000\006\003\322\040\323\001\002\000\042\003" +
    "\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014\014" +
    "\034\100\035\123\037\uffc7\041\116\042\uffc7\043\106\047" +
    "\112\050\125\056\124\001\002\000\042\003\122\004\110" +
    "\005\uffc7\006\uffc7\010\uffc7\013\117\014\014\034\100\035" +
    "\123\037\uffc7\041\116\042\uffc7\043\106\047\112\050\125" +
    "\056\124\001\002\000\042\003\122\004\110\005\uffc7\006" +
    "\uffc7\010\uffc7\013\117\014\014\034\100\035\123\037\uffc7" +
    "\041\116\042\uffc7\043\106\047\112\050\125\056\124\001" +
    "\002\000\060\003\264\004\110\005\uffc7\006\uffc7\010\uffc7" +
    "\011\237\013\117\014\014\031\261\032\164\034\100\035" +
    "\123\037\uffc7\040\257\041\116\042\uffc7\043\106\045\023" +
    "\047\112\050\265\053\127\054\133\056\124\001\002\000" +
    "\006\003\216\050\217\001\002\000\010\011\212\053\127" +
    "\054\133\001\002\000\014\003\130\011\131\032\132\053" +
    "\127\054\133\001\002\000\012\003\162\032\151\050\163" +
    "\052\153\001\002\000\004\011\207\001\002\000\012\003" +
    "\162\032\151\050\163\052\153\001\002\000\022\003\uff84" +
    "\020\144\021\150\032\uff84\046\135\050\uff84\051\145\052" +
    "\uff84\001\002\000\024\003\152\020\144\021\150\032\151" +
    "\033\uffa4\046\135\050\155\051\145\052\153\001\002\000" +
    "\004\011\134\001\002\000\012\003\uff83\032\uff83\050\uff83" +
    "\052\uff83\001\002\000\060\003\uff8d\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\024\uff8d\025\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\047\uff8d\050\uff8d\055\uff8d\056\uff8d" +
    "\001\002\000\010\003\uffa2\015\uffa2\033\uffa2\001\002\000" +
    "\004\033\204\001\002\000\074\003\uff7a\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014" +
    "\uff7a\015\uff7a\024\uff7a\025\uff7a\031\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\041\uff7a\042\uff7a\043\uff7a\045" +
    "\uff7a\047\uff7a\050\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\001\002\000\074\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007" +
    "\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\024\uff7f\025\uff7f\031\uff7f\033\uff7f\034\uff7f\035\uff7f\036" +
    "\uff7f\037\uff7f\041\uff7f\042\uff7f\043\uff7f\045\uff7f\047\uff7f" +
    "\050\uff7f\053\uff7f\054\167\055\uff7f\056\uff7f\001\002\000" +
    "\074\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\024\uff7d\025" +
    "\uff7d\031\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\045\uff7d\047\uff7d\050\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\001\002\000\046\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\010\uffac\013\uffac\014\uffac\015" +
    "\uffac\033\uffac\034\uffac\035\uffac\037\uffac\041\uffac\042\uffac" +
    "\043\uffac\047\uffac\050\uffac\056\uffac\001\002\000\060\003" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\013\uff90\014\uff90\015\uff90\024\uff90\025\uff90\033\uff90\034" +
    "\uff90\035\uff90\037\uff90\041\uff90\042\uff90\043\uff90\047\uff90" +
    "\050\uff90\055\uff90\056\uff90\001\002\000\062\003\uff91\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\013\uff91" +
    "\014\uff91\015\uff91\024\uff91\025\uff91\033\uff91\034\uff91\035" +
    "\uff91\037\uff91\041\uff91\042\uff91\043\uff91\044\uff8a\047\uff91" +
    "\050\uff91\055\uff91\056\uff91\001\002\000\010\003\202\015" +
    "\201\033\uffa5\001\002\000\060\003\uff8e\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\013\uff8e\014\uff8e\015" +
    "\uff8e\024\uff8e\025\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\047\uff8e\050\uff8e\055\uff8e\056" +
    "\uff8e\001\002\000\060\003\uff8f\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\013\uff8f\014\uff8f\015\uff8f\024" +
    "\uff8f\025\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\047\uff8f\050\uff8f\055\uff8f\056\uff8f\001" +
    "\002\000\012\003\162\032\151\050\163\052\153\001\002" +
    "\000\070\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\013\uff78\014\uff78\015\uff78\024\uff78\025\uff78" +
    "\032\164\033\uff78\034\uff78\035\uff78\037\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff88\047\uff78\050\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\001\002\000\074\003\uff7c\004\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\024\uff7c\025\uff7c\031\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\045\uff7c\047\uff7c\050\uff7c\053\uff7c\054\uff7c\055\uff7c\056" +
    "\uff7c\001\002\000\004\044\171\001\002\000\070\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\013" +
    "\uff7b\014\uff7b\015\uff7b\024\uff7b\025\uff7b\032\132\033\uff7b" +
    "\034\uff7b\035\uff7b\037\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff89\047\uff7b\050\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\001\002\000\064\003\uff81\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\013\uff81\014\uff81\015\uff81\024\uff81" +
    "\025\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\041" +
    "\uff81\042\uff81\043\uff81\047\uff81\050\uff81\053\160\055\uff81" +
    "\056\uff81\001\002\000\046\003\uffab\004\uffab\005\uffab\006" +
    "\uffab\010\uffab\013\uffab\014\uffab\015\uffab\033\uffab\034\uffab" +
    "\035\uffab\037\uffab\041\uffab\042\uffab\043\uffab\047\uffab\050" +
    "\uffab\056\uffab\001\002\000\012\003\162\032\151\050\163" +
    "\052\153\001\002\000\074\003\uff80\004\uff80\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\024\uff80\025\uff80\031\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\041\uff80\042\uff80\043\uff80\045\uff80" +
    "\047\uff80\050\uff80\053\uff80\054\167\055\uff80\056\uff80\001" +
    "\002\000\076\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\024" +
    "\uff78\025\uff78\031\uff78\032\164\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\041\uff78\042\uff78\043\uff78\045\uff78\047" +
    "\uff78\050\uff78\053\uff78\054\uff78\055\uff78\056\uff78\001\002" +
    "\000\076\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\024\uff7b" +
    "\025\uff7b\031\uff7b\032\132\033\uff7b\034\uff7b\035\uff7b\036" +
    "\uff7b\037\uff7b\041\uff7b\042\uff7b\043\uff7b\045\uff7b\047\uff7b" +
    "\050\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\001\002\000" +
    "\024\003\152\020\144\021\150\032\151\033\uffa4\046\135" +
    "\050\155\051\145\052\153\001\002\000\004\033\166\001" +
    "\002\000\074\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\024" +
    "\uffa6\025\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\047\uffa6\050" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\001\002\000\012" +
    "\003\162\032\151\050\163\052\153\001\002\000\074\003" +
    "\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\015\uff7e\024\uff7e\025\uff7e\031" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\045\uff7e\047\uff7e\050\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\001\002\000\010\003\173\050\174" +
    "\051\172\001\002\000\070\003\uff8a\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\024\uff8a\025\uff8a\031\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\047\uff8a\050\uff8a\055\uff8a\056\uff8a\001\002\000\070\003" +
    "\uff88\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\015\uff88\024\uff88\025\uff88\031" +
    "\uff88\033\uff88\034\uff88\035\uff88\037\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\047\uff88\050\uff88\055\uff88\056" +
    "\uff88\001\002\000\070\003\uff89\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\024\uff89\025\uff89\031\uff89\033\uff89\034\uff89\035\uff89" +
    "\037\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047" +
    "\uff89\050\uff89\055\uff89\056\uff89\001\002\000\070\003\uff8b" +
    "\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\024\uff8b\025\uff8b\031\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\037\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\044\171\045\uff8b\047\uff8b\050\uff8b\055\uff8b\056\uff8b" +
    "\001\002\000\066\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\024\uff8c\025\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\037" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c\047\uff8c\050\uff8c" +
    "\055\uff8c\056\uff8c\001\002\000\006\033\200\053\160\001" +
    "\002\000\074\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79\024" +
    "\uff79\025\uff79\031\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\041\uff79\042\uff79\043\uff79\045\uff79\047\uff79\050" +
    "\uff79\053\uff79\054\uff79\055\uff79\056\uff79\001\002\000\022" +
    "\003\152\020\144\021\150\032\151\046\135\050\155\051" +
    "\145\052\153\001\002\000\010\003\uffa1\015\uffa1\033\uffa1" +
    "\001\002\000\010\003\uffa3\015\uffa3\033\uffa3\001\002\000" +
    "\074\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\024\uffa7\025" +
    "\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\045\uffa7\047\uffa7\050\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000\042\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\010\uff94\013\uff94\014\uff94\034" +
    "\uff94\035\uff94\037\uff94\041\uff94\042\uff94\043\uff94\047\uff94" +
    "\050\uff94\056\uff94\001\002\000\044\003\uff86\004\uff86\005" +
    "\uff86\006\uff86\010\uff86\013\uff86\014\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\041\uff86\042\uff86\043\uff86\047\uff86\050" +
    "\uff86\056\uff86\001\002\000\012\003\uff82\032\uff82\050\uff82" +
    "\052\uff82\001\002\000\044\003\uff87\004\uff87\005\uff87\006" +
    "\uff87\010\uff87\013\uff87\014\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\041\uff87\042\uff87\043\uff87\047\uff87\050\uff87\056" +
    "\uff87\001\002\000\012\003\162\032\151\050\163\052\153" +
    "\001\002\000\022\003\uff84\020\144\021\150\032\uff84\046" +
    "\135\050\uff84\051\145\052\uff84\001\002\000\042\003\uff93" +
    "\004\uff93\005\uff93\006\uff93\010\uff93\013\uff93\014\uff93\034" +
    "\uff93\035\uff93\037\uff93\041\uff93\042\uff93\043\uff93\047\uff93" +
    "\050\uff93\056\uff93\001\002\000\042\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\010\uff92\013\uff92\014\uff92\034\uff92\035\uff92" +
    "\037\uff92\041\uff92\042\uff92\043\uff92\047\uff92\050\uff92\056" +
    "\uff92\001\002\000\006\003\uffaa\036\uffaa\001\002\000\014" +
    "\011\237\016\245\036\244\053\127\054\133\001\002\000" +
    "\014\003\130\011\237\016\236\053\127\054\133\001\002" +
    "\000\006\003\222\036\221\001\002\000\012\003\162\032" +
    "\151\050\163\052\153\001\002\000\012\003\162\032\151" +
    "\050\163\052\153\001\002\000\006\013\224\053\160\001" +
    "\002\000\032\003\122\004\110\013\117\014\014\034\100" +
    "\035\123\037\uffc7\041\116\043\106\047\112\050\125\056" +
    "\124\001\002\000\004\037\226\001\002\000\042\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\010\uffaf\013\uffaf\014\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf" +
    "\050\uffaf\056\uffaf\001\002\000\010\003\230\013\231\053" +
    "\160\001\002\000\032\003\122\004\110\013\117\014\014" +
    "\034\100\035\123\037\uffc7\041\116\043\106\047\112\050" +
    "\125\056\124\001\002\000\032\003\122\004\110\013\117" +
    "\014\014\034\100\035\123\037\uffc7\041\116\043\106\047" +
    "\112\050\125\056\124\001\002\000\004\037\233\001\002" +
    "\000\042\003\uffb2\004\uffb2\005\uffb2\006\uffb2\010\uffb2\013" +
    "\uffb2\014\uffb2\034\uffb2\035\uffb2\037\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\047\uffb2\050\uffb2\056\uffb2\001\002\000\004\037" +
    "\235\001\002\000\042\003\uffae\004\uffae\005\uffae\006\uffae" +
    "\010\uffae\013\uffae\014\uffae\034\uffae\035\uffae\037\uffae\041" +
    "\uffae\042\uffae\043\uffae\047\uffae\050\uffae\056\uffae\001\002" +
    "\000\004\022\240\001\002\000\012\003\uff84\032\uff84\050" +
    "\uff84\052\uff84\001\002\000\004\011\241\001\002\000\012" +
    "\003\162\032\151\050\163\052\153\001\002\000\010\003" +
    "\uffa9\036\uffa9\053\160\001\002\000\012\003\162\032\151" +
    "\050\163\052\153\001\002\000\012\003\162\032\151\050" +
    "\163\052\153\001\002\000\004\022\246\001\002\000\004" +
    "\011\247\001\002\000\012\003\162\032\151\050\163\052" +
    "\153\001\002\000\010\003\uffa8\036\uffa8\053\160\001\002" +
    "\000\006\013\252\053\160\001\002\000\032\003\122\004" +
    "\110\013\117\014\014\034\100\035\123\037\uffc7\041\116" +
    "\043\106\047\112\050\125\056\124\001\002\000\004\037" +
    "\254\001\002\000\042\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\010\uffb0\013\uffb0\014\uffb0\034\uffb0\035\uffb0\037\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\047\uffb0\050\uffb0\056\uffb0\001\002" +
    "\000\044\003\uff85\004\uff85\005\uff85\006\uff85\010\uff85\013" +
    "\uff85\014\uff85\034\uff85\035\uff85\036\uff85\037\uff85\041\uff85" +
    "\042\uff85\043\uff85\047\uff85\050\uff85\056\uff85\001\002\000" +
    "\004\036\312\001\002\000\024\003\152\020\144\021\150" +
    "\026\271\032\151\046\135\050\155\051\145\052\153\001" +
    "\002\000\014\005\uffc6\006\uffc6\010\uffc6\037\uffc6\042\uffc6" +
    "\001\002\000\042\003\122\004\110\005\uffc7\006\uffc7\010" +
    "\uffc7\013\117\014\014\034\100\035\123\037\uffc7\041\116" +
    "\042\uffc7\043\106\047\112\050\125\056\124\001\002\000" +
    "\034\003\uff96\004\uff96\006\uff96\013\uff96\014\uff96\034\uff96" +
    "\035\uff96\036\uffaa\041\uff96\043\uff96\047\uff96\050\uff96\056" +
    "\uff96\001\002\000\042\003\122\004\110\005\uffc7\006\uffc7" +
    "\010\uffc7\013\117\014\014\034\100\035\123\037\uffc7\041" +
    "\116\042\uffc7\043\106\047\112\050\125\056\124\001\002" +
    "\000\062\003\264\004\110\005\uffc7\006\uffc7\010\uffc7\011" +
    "\237\013\117\014\014\016\245\031\261\032\164\034\100" +
    "\035\123\037\uffc7\040\257\041\116\042\uffc7\043\106\045" +
    "\023\047\112\050\265\053\127\054\133\056\124\001\002" +
    "\000\016\003\130\011\131\016\236\032\132\053\127\054" +
    "\133\001\002\000\014\005\uffc4\006\uffc4\010\uffc4\037\uffc4" +
    "\042\uffc4\001\002\000\014\005\uffc5\006\uffc5\010\uffc5\037" +
    "\uffc5\042\uffc5\001\002\000\014\003\uff9d\007\uff9d\013\uff9d" +
    "\024\uff9d\025\uff9d\001\002\000\022\003\152\020\144\021" +
    "\150\032\151\046\135\050\155\051\145\052\153\001\002" +
    "\000\020\003\uff99\007\uff99\011\uff99\013\uff99\024\uff99\025" +
    "\uff99\055\uff99\001\002\000\006\011\307\055\305\001\002" +
    "\000\010\013\300\024\276\025\277\001\002\000\020\003" +
    "\uff98\007\uff98\011\uff98\013\uff98\024\uff98\025\uff98\055\uff98" +
    "\001\002\000\022\003\152\020\144\021\150\032\151\046" +
    "\135\050\155\051\145\052\153\001\002\000\022\003\152" +
    "\020\144\021\150\032\151\046\135\050\155\051\145\052" +
    "\153\001\002\000\032\003\122\004\110\013\117\014\014" +
    "\034\100\035\123\041\116\042\uffc7\043\106\047\112\050" +
    "\125\056\124\001\002\000\004\042\302\001\002\000\042" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\010\uffb6\013\uffb6\014" +
    "\uffb6\034\uffb6\035\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\047\uffb6\050\uffb6\056\uffb6\001\002\000\014\003\uff9f\007" +
    "\uff9f\013\uff9f\024\uff9f\025\uff9f\001\002\000\014\003\uffa0" +
    "\007\uffa0\013\uffa0\024\uffa0\025\uffa0\001\002\000\022\003" +
    "\uff9b\020\uff9b\021\uff9b\032\uff9b\046\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\001\002\000\022\003\152\020\144\021\150\032" +
    "\151\046\135\050\155\051\145\052\153\001\002\000\022" +
    "\003\uff9a\020\uff9a\021\uff9a\032\uff9a\046\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\001\002\000\014\003\uff9c\007\uff9c\013\uff9c" +
    "\024\uff9c\025\uff9c\001\002\000\014\003\uff9e\007\uff9e\013" +
    "\uff9e\024\uff9e\025\uff9e\001\002\000\012\003\162\032\151" +
    "\050\163\052\153\001\002\000\006\013\314\053\160\001" +
    "\002\000\032\003\122\004\110\013\117\014\014\034\100" +
    "\035\123\037\uffc7\041\116\043\106\047\112\050\125\056" +
    "\124\001\002\000\004\037\316\001\002\000\042\003\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\010\uffb1\013\uffb1\014\uffb1\034" +
    "\uffb1\035\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\047\uffb1" +
    "\050\uffb1\056\uffb1\001\002\000\014\005\uffc8\006\uffc8\010" +
    "\uffc8\037\uffc8\042\uffc8\001\002\000\014\005\uffcb\006\uffcb" +
    "\010\uffcb\037\uffcb\042\uffcb\001\002\000\014\005\uffd1\006" +
    "\uffd1\010\uffd1\037\uffd1\042\uffd1\001\002\000\024\003\152" +
    "\020\144\021\150\026\271\032\151\046\135\050\155\051" +
    "\145\052\153\001\002\000\024\003\324\020\144\021\150" +
    "\026\271\032\151\046\135\050\155\051\145\052\153\001" +
    "\002\000\020\011\uff78\013\334\032\164\044\uff88\053\uff78" +
    "\054\uff78\055\uff78\001\002\000\012\003\326\013\327\024" +
    "\276\025\277\001\002\000\032\003\122\004\110\013\117" +
    "\014\014\034\100\035\123\041\116\042\uffc7\043\106\047" +
    "\112\050\125\056\124\001\002\000\032\003\122\004\110" +
    "\013\117\014\014\034\100\035\123\041\116\042\uffc7\043" +
    "\106\047\112\050\125\056\124\001\002\000\004\042\331" +
    "\001\002\000\042\003\uffb7\004\uffb7\005\uffb7\006\uffb7\010" +
    "\uffb7\013\uffb7\014\uffb7\034\uffb7\035\uffb7\037\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\047\uffb7\050\uffb7\056\uffb7\001\002\000" +
    "\004\042\333\001\002\000\042\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\010\uffb3\013\uffb3\014\uffb3\034\uffb3\035\uffb3\037" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\047\uffb3\050\uffb3\056\uffb3" +
    "\001\002\000\032\003\122\004\110\013\117\014\014\034" +
    "\100\035\123\041\116\042\uffc7\043\106\047\112\050\125" +
    "\056\124\001\002\000\004\042\336\001\002\000\042\003" +
    "\uffb4\004\uffb4\005\uffb4\006\uffb4\010\uffb4\013\uffb4\014\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\047" +
    "\uffb4\050\uffb4\056\uffb4\001\002\000\010\013\340\024\276" +
    "\025\277\001\002\000\032\003\122\004\110\013\117\014" +
    "\014\034\100\035\123\041\116\042\uffc7\043\106\047\112" +
    "\050\125\056\124\001\002\000\004\042\342\001\002\000" +
    "\042\003\uffb5\004\uffb5\005\uffb5\006\uffb5\010\uffb5\013\uffb5" +
    "\014\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\047\uffb5\050\uffb5\056\uffb5\001\002\000\004\045\344" +
    "\001\002\000\050\003\uffe3\004\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\031\uffe3\034\uffe3\035\uffe3" +
    "\037\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\050" +
    "\uffe3\056\uffe3\001\002\000\010\003\350\050\351\051\347" +
    "\001\002\000\010\003\350\050\351\051\347\001\002\000" +
    "\006\033\uff5f\044\uff8a\001\002\000\006\033\uff5d\044\uff88" +
    "\001\002\000\006\033\uff60\044\uff89\001\002\000\004\033" +
    "\uff5e\001\002\000\004\033\354\001\002\000\042\003\uff62" +
    "\004\uff62\005\uff62\006\uff62\010\uff62\013\uff62\014\uff62\034" +
    "\uff62\035\uff62\037\uff62\041\uff62\042\uff62\043\uff62\047\uff62" +
    "\050\uff62\056\uff62\001\002\000\004\033\356\001\002\000" +
    "\042\003\uff61\004\uff61\005\uff61\006\uff61\010\uff61\013\uff61" +
    "\014\uff61\034\uff61\035\uff61\037\uff61\041\uff61\042\uff61\043" +
    "\uff61\047\uff61\050\uff61\056\uff61\001\002\000\014\005\uffce" +
    "\006\uffce\010\uffce\037\uffce\042\uffce\001\002\000\020\007" +
    "\u011d\011\uff78\032\164\044\uff88\053\uff78\054\uff78\055\uff78" +
    "\001\002\000\012\003\362\007\363\024\276\025\277\001" +
    "\002\000\004\013\uff5c\001\002\000\006\003\uff5c\013\uff5c" +
    "\001\002\000\006\003\365\013\366\001\002\000\036\003" +
    "\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014\014" +
    "\034\100\035\123\041\116\043\106\047\112\050\125\056" +
    "\124\001\002\000\036\003\122\004\110\005\uffc7\006\uffc7" +
    "\010\uffc7\013\117\014\014\034\100\035\123\041\116\043" +
    "\106\047\112\050\125\056\124\001\002\000\010\005\370" +
    "\006\uffbc\010\371\001\002\000\006\003\u010f\013\u0110\001" +
    "\002\000\024\003\376\020\144\021\150\026\271\032\151" +
    "\046\135\050\155\051\145\052\153\001\002\000\004\006" +
    "\373\001\002\000\006\003\374\004\375\001\002\000\042" +
    "\003\uffbf\004\uffbf\005\uffbf\006\uffbf\010\uffbf\013\uffbf\014" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\047\uffbf\050\uffbf\056\uffbf\001\002\000\042\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\010\uffc3\013\uffc3\014\uffc3\034\uffc3" +
    "\035\uffc3\037\uffc3\041\uffc3\042\uffc3\043\uffc3\047\uffc3\050" +
    "\uffc3\056\uffc3\001\002\000\020\007\u010b\011\uff78\032\164" +
    "\044\uff88\053\uff78\054\uff78\055\uff78\001\002\000\012\003" +
    "\u0100\007\u0101\024\276\025\277\001\002\000\004\013\u0108" +
    "\001\002\000\006\003\u0102\013\u0103\001\002\000\036\003" +
    "\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014\014" +
    "\034\100\035\123\041\116\043\106\047\112\050\125\056" +
    "\124\001\002\000\036\003\122\004\110\005\uffc7\006\uffc7" +
    "\010\uffc7\013\117\014\014\034\100\035\123\041\116\043" +
    "\106\047\112\050\125\056\124\001\002\000\010\005\370" +
    "\006\uffbc\010\371\001\002\000\004\006\uffbe\001\002\000" +
    "\010\005\370\006\uffbc\010\371\001\002\000\004\006\uffb9" +
    "\001\002\000\036\003\122\004\110\005\uffc7\006\uffc7\010" +
    "\uffc7\013\117\014\014\034\100\035\123\041\116\043\106" +
    "\047\112\050\125\056\124\001\002\000\010\005\370\006" +
    "\uffbc\010\371\001\002\000\004\006\uffba\001\002\000\004" +
    "\013\u010c\001\002\000\036\003\122\004\110\005\uffc7\006" +
    "\uffc7\010\uffc7\013\117\014\014\034\100\035\123\041\116" +
    "\043\106\047\112\050\125\056\124\001\002\000\010\005" +
    "\370\006\uffbc\010\371\001\002\000\004\006\uffbb\001\002" +
    "\000\032\003\122\004\110\006\uffc7\013\117\014\014\034" +
    "\100\035\123\041\116\043\106\047\112\050\125\056\124" +
    "\001\002\000\032\003\122\004\110\006\uffc7\013\117\014" +
    "\014\034\100\035\123\041\116\043\106\047\112\050\125" +
    "\056\124\001\002\000\004\006\uffbd\001\002\000\004\006" +
    "\uffb8\001\002\000\010\005\370\006\uffbc\010\371\001\002" +
    "\000\004\006\u0115\001\002\000\004\004\u0116\001\002\000" +
    "\042\003\uffc0\004\uffc0\005\uffc0\006\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\034\uffc0\035\uffc0\037\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\047\uffc0\050\uffc0\056\uffc0\001\002\000\004\013\u0118" +
    "\001\002\000\036\003\122\004\110\005\uffc7\006\uffc7\010" +
    "\uffc7\013\117\014\014\034\100\035\123\041\116\043\106" +
    "\047\112\050\125\056\124\001\002\000\010\005\370\006" +
    "\uffbc\010\371\001\002\000\004\006\u011b\001\002\000\004" +
    "\004\u011c\001\002\000\042\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\034\uffc1\035\uffc1\037\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\047\uffc1\050\uffc1\056\uffc1\001" +
    "\002\000\004\013\uff5c\001\002\000\004\013\u011f\001\002" +
    "\000\036\003\122\004\110\005\uffc7\006\uffc7\010\uffc7\013" +
    "\117\014\014\034\100\035\123\041\116\043\106\047\112" +
    "\050\125\056\124\001\002\000\010\005\370\006\uffbc\010" +
    "\371\001\002\000\004\006\u0122\001\002\000\004\004\u0123" +
    "\001\002\000\042\003\uffc2\004\uffc2\005\uffc2\006\uffc2\010" +
    "\uffc2\013\uffc2\014\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\047\uffc2\050\uffc2\056\uffc2\001\002\000" +
    "\014\005\uffca\006\uffca\010\uffca\037\uffca\042\uffca\001\002" +
    "\000\042\003\uffad\004\uffad\005\uffad\006\uffad\010\uffad\013" +
    "\uffad\014\uffad\034\uffad\035\uffad\037\uffad\041\uffad\042\uffad" +
    "\043\uffad\047\uffad\050\uffad\056\uffad\001\002\000\014\005" +
    "\uffd2\006\uffd2\010\uffd2\037\uffd2\042\uffd2\001\002\000\014" +
    "\005\uffcc\006\uffcc\010\uffcc\037\uffcc\042\uffcc\001\002\000" +
    "\014\005\uffcd\006\uffcd\010\uffcd\037\uffcd\042\uffcd\001\002" +
    "\000\014\005\uffc9\006\uffc9\010\uffc9\037\uffc9\042\uffc9\001" +
    "\002\000\042\003\122\004\110\005\uffc7\006\uffc7\010\uffc7" +
    "\013\117\014\014\034\100\035\123\037\uffc7\041\116\042" +
    "\uffc7\043\106\047\112\050\125\056\124\001\002\000\042" +
    "\003\122\004\110\005\uffc7\006\uffc7\010\uffc7\013\117\014" +
    "\014\034\100\035\123\037\uffc7\041\116\042\uffc7\043\106" +
    "\047\112\050\125\056\124\001\002\000\014\005\uffcf\006" +
    "\uffcf\010\uffcf\037\uffcf\042\uffcf\001\002\000\014\005\uffd0" +
    "\006\uffd0\010\uffd0\037\uffd0\042\uffd0\001\002\000\004\006" +
    "\u012f\001\002\000\004\045\u0130\001\002\000\050\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\031\uffdd\034\uffdd\035\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\047\uffdd\050\uffdd\056\uffdd\001\002\000" +
    "\002\001\002\000\004\006\u0133\001\002\000\004\045\u0134" +
    "\001\002\000\050\003\uffde\004\uffde\005\uffde\006\uffde\010" +
    "\uffde\012\uffde\013\uffde\014\uffde\031\uffde\034\uffde\035\uffde" +
    "\037\uffde\041\uffde\042\uffde\043\uffde\045\uffde\047\uffde\050" +
    "\uffde\056\uffde\001\002\000\004\050\u0139\001\002\000\012" +
    "\017\057\022\054\023\056\050\055\001\002\000\010\003" +
    "\uffd7\015\u0138\033\uffd7\001\002\000\004\050\u0139\001\002" +
    "\000\006\015\u013e\016\u013f\001\002\000\006\003\uffda\033" +
    "\uffda\001\002\000\010\003\uffd5\015\u013c\033\uffd5\001\002" +
    "\000\004\050\u0139\001\002\000\006\003\uffd6\033\uffd6\001" +
    "\002\000\004\050\u0139\001\002\000\012\017\057\022\054" +
    "\023\056\050\055\001\002\000\010\003\uffd3\015\uffd3\033" +
    "\uffd3\001\002\000\010\003\uffd4\015\uffd4\033\uffd4\001\002" +
    "\000\010\003\uffd8\015\u0143\033\uffd8\001\002\000\004\050" +
    "\u0139\001\002\000\006\003\uffd9\033\uffd9\001\002\000\004" +
    "\033\u0146\001\002\000\004\016\u0147\001\002\000\012\017" +
    "\057\022\054\023\056\050\055\001\002\000\004\013\u0149" +
    "\001\002\000\002\001\002\000\004\006\u014b\001\002\000" +
    "\004\045\u014c\001\002\000\050\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\031\uffe1\034" +
    "\uffe1\035\uffe1\037\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1" +
    "\047\uffe1\050\uffe1\056\uffe1\001\002\000\006\033\uffdb\050" +
    "\047\001\002\000\004\033\u014f\001\002\000\004\016\u0150" +
    "\001\002\000\012\017\057\022\054\023\056\050\055\001" +
    "\002\000\004\013\u0152\001\002\000\002\001\002\000\004" +
    "\006\u0154\001\002\000\004\045\u0155\001\002\000\050\003" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\031\uffe2\034\uffe2\035\uffe2\037\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\045\uffe2\047\uffe2\050\uffe2\056\uffe2\001\002" +
    "\000\004\032\u016f\001\002\000\006\003\u0158\032\u0159\001" +
    "\002\000\006\033\uffdb\050\047\001\002\000\010\003\uffdb" +
    "\033\uffdb\050\047\001\002\000\006\003\u015c\033\u015b\001" +
    "\002\000\006\003\u0161\013\u0162\001\002\000\004\013\u015d" +
    "\001\002\000\002\001\002\000\004\006\u015f\001\002\000" +
    "\004\031\u0160\001\002\000\014\012\uffe5\013\uffe5\014\uffe5" +
    "\031\uffe5\045\uffe5\001\002\000\002\001\002\000\032\003" +
    "\122\004\110\006\uffc7\013\117\014\014\034\100\035\123" +
    "\041\116\043\106\047\112\050\125\056\124\001\002\000" +
    "\004\006\u0164\001\002\000\004\031\u0165\001\002\000\014" +
    "\012\uffe8\013\uffe8\014\uffe8\031\uffe8\045\uffe8\001\002\000" +
    "\004\006\u0167\001\002\000\004\031\u0168\001\002\000\014" +
    "\012\uffe4\013\uffe4\014\uffe4\031\uffe4\045\uffe4\001\002\000" +
    "\004\033\u016a\001\002\000\004\013\u016b\001\002\000\002" +
    "\001\002\000\004\006\u016d\001\002\000\004\031\u016e\001" +
    "\002\000\014\012\uffe6\013\uffe6\014\uffe6\031\uffe6\045\uffe6" +
    "\001\002\000\006\033\uffdb\050\047\001\002\000\004\033" +
    "\u0171\001\002\000\004\013\u0172\001\002\000\002\001\002" +
    "\000\004\006\u0174\001\002\000\004\031\u0175\001\002\000" +
    "\014\012\uffe7\013\uffe7\014\uffe7\031\uffe7\045\uffe7\001\002" +
    "\000\004\013\u0187\001\002\000\006\003\u0178\013\u0179\001" +
    "\002\000\006\013\u017b\014\014\001\002\000\006\013\u017b" +
    "\014\014\001\002\000\010\006\u0182\013\u017b\014\014\001" +
    "\002\000\010\006\uffe9\013\u017b\014\014\001\002\000\004" +
    "\006\u017d\001\002\000\004\012\u017e\001\002\000\014\012" +
    "\uffef\013\uffef\014\uffef\031\uffef\045\uffef\001\002\000\006" +
    "\013\u017b\014\014\001\002\000\004\006\uffea\001\002\000" +
    "\004\006\uffeb\001\002\000\004\003\u0183\001\002\000\014" +
    "\012\uffec\013\uffec\014\uffec\031\uffec\045\uffec\001\002\000" +
    "\004\006\u0185\001\002\000\004\012\u0186\001\002\000\014" +
    "\012\uffed\013\uffed\014\uffed\031\uffed\045\uffed\001\002\000" +
    "\006\013\u017b\014\014\001\002\000\004\006\u0189\001\002" +
    "\000\004\012\u018a\001\002\000\014\012\uffee\013\uffee\014" +
    "\uffee\031\uffee\045\uffee\001\002\000\006\003\ufff9\006\ufff9" +
    "\001\002\000\006\003\ufffa\006\ufffa\001\002\000\006\003" +
    "\ufff8\006\ufff8\001\002\000\004\030\u0192\001\002\000\006" +
    "\003\u0190\030\u0191\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufffc\001\002\000\050" +
    "\003\uff77\004\uff77\005\uff77\006\uff77\010\uff77\012\uff77\013" +
    "\uff77\014\uff77\031\uff77\034\uff77\035\uff77\037\uff77\041\uff77" +
    "\042\uff77\043\uff77\045\uff77\047\uff77\050\uff77\056\uff77\001" +
    "\002\000\050\003\uff76\004\uff76\005\uff76\006\uff76\010\uff76" +
    "\012\uff76\013\uff76\014\uff76\031\uff76\034\uff76\035\uff76\037" +
    "\uff76\041\uff76\042\uff76\043\uff76\045\uff76\047\uff76\050\uff76" +
    "\056\uff76\001\002\000\006\015\u0196\016\u0197\001\002\000" +
    "\004\050\u01a0\001\002\000\012\017\u019c\022\u0198\023\u019b" +
    "\050\u019a\001\002\000\054\003\uff66\004\uff66\005\uff66\006" +
    "\uff66\010\uff66\011\u01b3\012\uff66\013\uff66\014\uff66\015\uff66" +
    "\031\uff66\034\uff66\035\uff66\037\uff66\041\uff66\042\uff66\043" +
    "\uff66\045\uff66\047\uff66\050\uff66\056\uff66\001\002\000\050" +
    "\003\uff75\004\uff75\005\uff75\006\uff75\010\uff75\012\uff75\013" +
    "\uff75\014\uff75\031\uff75\034\uff75\035\uff75\037\uff75\041\uff75" +
    "\042\uff75\043\uff75\045\uff75\047\uff75\050\uff75\056\uff75\001" +
    "\002\000\054\003\uff63\004\uff63\005\uff63\006\uff63\010\uff63" +
    "\011\u01ae\012\uff63\013\uff63\014\uff63\015\uff63\031\uff63\034" +
    "\uff63\035\uff63\037\uff63\041\uff63\042\uff63\043\uff63\045\uff63" +
    "\047\uff63\050\uff63\056\uff63\001\002\000\054\003\uff65\004" +
    "\uff65\005\uff65\006\uff65\010\uff65\011\u01ab\012\uff65\013\uff65" +
    "\014\uff65\015\uff65\031\uff65\034\uff65\035\uff65\037\uff65\041" +
    "\uff65\042\uff65\043\uff65\045\uff65\047\uff65\050\uff65\056\uff65" +
    "\001\002\000\054\003\uff64\004\uff64\005\uff64\006\uff64\010" +
    "\uff64\011\u01a8\012\uff64\013\uff64\014\uff64\015\uff64\031\uff64" +
    "\034\uff64\035\uff64\037\uff64\041\uff64\042\uff64\043\uff64\045" +
    "\uff64\047\uff64\050\uff64\056\uff64\001\002\000\052\003\uff71" +
    "\004\uff71\005\uff71\006\uff71\010\uff71\012\uff71\013\uff71\014" +
    "\uff71\015\u019e\031\uff71\034\uff71\035\uff71\037\uff71\041\uff71" +
    "\042\uff71\043\uff71\045\uff71\047\uff71\050\uff71\056\uff71\001" +
    "\002\000\004\050\u01a0\001\002\000\050\003\uff74\004\uff74" +
    "\005\uff74\006\uff74\010\uff74\012\uff74\013\uff74\014\uff74\031" +
    "\uff74\034\uff74\035\uff74\037\uff74\041\uff74\042\uff74\043\uff74" +
    "\045\uff74\047\uff74\050\uff74\056\uff74\001\002\000\006\015" +
    "\u01a4\016\u01a5\001\002\000\052\003\uff6f\004\uff6f\005\uff6f" +
    "\006\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f\015\u01a2\031" +
    "\uff6f\034\uff6f\035\uff6f\037\uff6f\041\uff6f\042\uff6f\043\uff6f" +
    "\045\uff6f\047\uff6f\050\uff6f\056\uff6f\001\002\000\004\050" +
    "\u01a0\001\002\000\050\003\uff70\004\uff70\005\uff70\006\uff70" +
    "\010\uff70\012\uff70\013\uff70\014\uff70\031\uff70\034\uff70\035" +
    "\uff70\037\uff70\041\uff70\042\uff70\043\uff70\045\uff70\047\uff70" +
    "\050\uff70\056\uff70\001\002\000\004\050\u01a0\001\002\000" +
    "\012\017\057\022\054\023\056\050\055\001\002\000\052" +
    "\003\uff6d\004\uff6d\005\uff6d\006\uff6d\010\uff6d\012\uff6d\013" +
    "\uff6d\014\uff6d\015\uff6d\031\uff6d\034\uff6d\035\uff6d\037\uff6d" +
    "\041\uff6d\042\uff6d\043\uff6d\045\uff6d\047\uff6d\050\uff6d\056" +
    "\uff6d\001\002\000\052\003\uff6e\004\uff6e\005\uff6e\006\uff6e" +
    "\010\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\031\uff6e\034" +
    "\uff6e\035\uff6e\037\uff6e\041\uff6e\042\uff6e\043\uff6e\045\uff6e" +
    "\047\uff6e\050\uff6e\056\uff6e\001\002\000\006\020\u01a9\021" +
    "\u01aa\001\002\000\050\003\uff6a\004\uff6a\005\uff6a\006\uff6a" +
    "\010\uff6a\012\uff6a\013\uff6a\014\uff6a\031\uff6a\034\uff6a\035" +
    "\uff6a\037\uff6a\041\uff6a\042\uff6a\043\uff6a\045\uff6a\047\uff6a" +
    "\050\uff6a\056\uff6a\001\002\000\050\003\uff69\004\uff69\005" +
    "\uff69\006\uff69\010\uff69\012\uff69\013\uff69\014\uff69\031\uff69" +
    "\034\uff69\035\uff69\037\uff69\041\uff69\042\uff69\043\uff69\045" +
    "\uff69\047\uff69\050\uff69\056\uff69\001\002\000\010\003\173" +
    "\050\174\051\u01ac\001\002\000\052\003\uff6b\004\uff6b\005" +
    "\uff6b\006\uff6b\010\uff6b\012\uff6b\013\uff6b\014\uff6b\031\uff6b" +
    "\034\uff6b\035\uff6b\037\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff8a\045\uff6b\047\uff6b\050\uff6b\056\uff6b\001\002\000\050" +
    "\003\uff68\004\uff68\005\uff68\006\uff68\010\uff68\012\uff68\013" +
    "\uff68\014\uff68\031\uff68\034\uff68\035\uff68\037\uff68\041\uff68" +
    "\042\uff68\043\uff68\045\uff68\047\uff68\050\uff68\056\uff68\001" +
    "\002\000\004\027\u01af\001\002\000\006\003\u01b0\050\u01b1" +
    "\001\002\000\004\032\164\001\002\000\004\032\132\001" +
    "\002\000\050\003\uff67\004\uff67\005\uff67\006\uff67\010\uff67" +
    "\012\uff67\013\uff67\014\uff67\031\uff67\034\uff67\035\uff67\037" +
    "\uff67\041\uff67\042\uff67\043\uff67\045\uff67\047\uff67\050\uff67" +
    "\056\uff67\001\002\000\012\003\162\032\151\050\163\052" +
    "\153\001\002\000\052\003\uff6c\004\uff6c\005\uff6c\006\uff6c" +
    "\010\uff6c\012\uff6c\013\uff6c\014\uff6c\031\uff6c\034\uff6c\035" +
    "\uff6c\037\uff6c\041\uff6c\042\uff6c\043\uff6c\045\uff6c\047\uff6c" +
    "\050\uff6c\053\160\056\uff6c\001\002\000\052\003\uff72\004" +
    "\uff72\005\uff72\006\uff72\010\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\u01b6\031\uff72\034\uff72\035\uff72\037\uff72\041\uff72\042" +
    "\uff72\043\uff72\045\uff72\047\uff72\050\uff72\056\uff72\001\002" +
    "\000\004\050\u01a0\001\002\000\050\003\uff73\004\uff73\005" +
    "\uff73\006\uff73\010\uff73\012\uff73\013\uff73\014\uff73\031\uff73" +
    "\034\uff73\035\uff73\037\uff73\041\uff73\042\uff73\043\uff73\045" +
    "\uff73\047\uff73\050\uff73\056\uff73\001\002\000\004\006\u01b9" +
    "\001\002\000\004\030\u01ba\001\002\000\004\002\ufffd\001" +
    "\002\000\014\012\021\013\020\014\014\031\022\045\023" +
    "\001\002\000\004\006\u01bd\001\002\000\004\030\u01be\001" +
    "\002\000\004\002\ufffe\001\002\000\004\013\u01c0\001\002" +
    "\000\014\012\021\013\020\014\014\031\022\045\023\001" +
    "\002\000\004\006\u01c2\001\002\000\004\030\u01c3\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u01b7\006\024\007" +
    "\015\016\016\044\023\001\001\000\014\004\014\006\024" +
    "\007\015\016\016\044\023\001\001\000\004\017\u0192\001" +
    "\001\000\002\001\001\000\014\004\u018c\006\024\007\015" +
    "\016\016\044\023\001\001\000\014\004\u018b\006\024\007" +
    "\015\016\016\044\023\001\001\000\014\004\u018a\006\024" +
    "\007\015\016\016\044\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\040\006\024" +
    "\007\015\016\016\044\023\001\001\000\014\005\026\006" +
    "\032\007\025\016\027\044\031\001\001\000\014\005\037" +
    "\006\032\007\025\016\027\044\031\001\001\000\002\001" +
    "\001\000\014\005\036\006\032\007\025\016\027\044\031" +
    "\001\001\000\014\005\035\006\032\007\025\016\027\044" +
    "\031\001\001\000\014\005\034\006\032\007\025\016\027" +
    "\044\031\001\001\000\014\005\033\006\032\007\025\016" +
    "\027\044\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\045\060\u0144\001\001\000\006\057\045\060\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\074\001\001\000\004\052\066\001\001\000" +
    "\002\001\001\000\004\043\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u012d\001\001\000\032\003\113" +
    "\010\117\016\104\022\103\031\110\032\114\033\102\037" +
    "\101\041\106\045\112\046\100\047\120\001\001\000\002" +
    "\001\001\000\032\003\u0128\010\117\016\104\022\103\031" +
    "\110\032\114\033\102\037\101\041\106\045\112\046\100" +
    "\047\120\001\001\000\032\003\u0127\010\117\016\104\022" +
    "\103\031\110\032\114\033\102\037\101\041\106\045\112" +
    "\046\100\047\120\001\001\000\002\001\001\000\032\003" +
    "\u0126\010\117\016\104\022\103\031\110\032\114\033\102" +
    "\037\101\041\106\045\112\046\100\047\120\001\001\000" +
    "\032\003\u0125\010\117\016\104\022\103\031\110\032\114" +
    "\033\102\037\101\041\106\045\112\046\100\047\120\001" +
    "\001\000\024\012\146\014\155\020\141\021\140\022\137" +
    "\025\u0124\026\142\027\156\051\153\001\001\000\032\003" +
    "\u0123\010\117\016\104\022\103\031\110\032\114\033\102" +
    "\037\101\041\106\045\112\046\100\047\120\001\001\000" +
    "\030\012\146\014\155\020\141\021\140\022\137\026\271" +
    "\027\274\034\272\035\360\036\267\051\153\001\001\000" +
    "\032\003\356\010\117\016\104\022\103\031\110\032\114" +
    "\033\102\037\101\041\106\045\112\046\100\047\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\320\010" +
    "\117\016\104\022\103\031\110\032\114\033\102\037\101" +
    "\041\106\045\112\046\100\047\120\001\001\000\032\003" +
    "\317\010\117\016\104\022\103\031\110\032\114\033\102" +
    "\037\101\041\106\045\112\046\100\047\120\001\001\000" +
    "\032\003\316\010\117\016\104\022\103\031\110\032\114" +
    "\033\102\037\101\041\106\045\112\046\100\047\120\001" +
    "\001\000\040\003\257\007\262\010\117\016\104\022\103" +
    "\030\242\031\110\032\261\033\102\037\101\041\106\045" +
    "\112\046\100\047\120\050\255\001\001\000\006\032\214" +
    "\050\217\001\001\000\004\030\210\001\001\000\004\030" +
    "\125\001\001\000\014\014\155\020\141\021\140\022\137" +
    "\027\207\001\001\000\002\001\001\000\014\014\155\020" +
    "\141\021\140\022\137\027\205\001\001\000\010\012\146" +
    "\026\204\051\153\001\001\000\030\012\146\014\155\020" +
    "\141\021\140\022\137\023\136\024\145\025\135\026\142" +
    "\027\156\051\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\176\020\141\021\140\022\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\141\021\160" +
    "\022\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\146\014\155\020\141\021\140" +
    "\022\137\023\164\024\145\025\135\026\142\027\156\051" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\167\022\137\001\001\000\002\001\001\000\006\012" +
    "\175\051\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\146\014\155" +
    "\020\141\021\140\022\137\025\202\026\142\027\156\051" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\155\020\141\021\140" +
    "\022\137\027\213\001\001\000\010\012\146\026\212\051" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\242\001\001\000\004\030\125\001" +
    "\001\000\002\001\001\000\012\014\226\020\141\021\140" +
    "\022\137\001\001\000\012\014\222\020\141\021\140\022" +
    "\137\001\001\000\002\001\001\000\032\003\224\010\117" +
    "\016\104\022\103\031\110\032\114\033\102\037\101\041" +
    "\106\045\112\046\100\047\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\233\010" +
    "\117\016\104\022\103\031\110\032\114\033\102\037\101" +
    "\041\106\045\112\046\100\047\120\001\001\000\032\003" +
    "\231\010\117\016\104\022\103\031\110\032\114\033\102" +
    "\037\101\041\106\045\112\046\100\047\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\241\020\141\021\140\022\137\001\001" +
    "\000\002\001\001\000\014\014\155\020\141\021\140\022" +
    "\137\027\254\001\001\000\012\014\250\020\141\021\140" +
    "\022\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\247\020\141\021\140\022\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\252\010\117\016" +
    "\104\022\103\031\110\032\114\033\102\037\101\041\106" +
    "\045\112\046\100\047\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\146\014\155\020\141\021\140\022\137\026\271\027" +
    "\274\034\272\035\273\036\267\051\153\001\001\000\002" +
    "\001\001\000\032\003\266\010\117\016\104\022\103\031" +
    "\110\032\114\033\102\037\101\041\106\045\112\046\100" +
    "\047\120\001\001\000\002\001\001\000\032\003\265\010" +
    "\117\016\104\022\103\031\110\032\114\033\102\037\101" +
    "\041\106\045\112\046\100\047\120\001\001\000\040\003" +
    "\257\007\262\010\117\016\104\022\103\030\242\031\110" +
    "\032\261\033\102\037\101\041\106\045\112\046\100\047" +
    "\120\050\255\001\001\000\004\030\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\146\014\155\020\141\021\140\022\137\026\271\027\274" +
    "\034\272\036\310\051\153\001\001\000\002\001\001\000" +
    "\004\053\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\146\014\155\020\141\021\140\022\137\026" +
    "\271\027\274\034\272\036\303\051\153\001\001\000\026" +
    "\012\146\014\155\020\141\021\140\022\137\026\271\027" +
    "\274\034\272\036\302\051\153\001\001\000\032\003\300" +
    "\010\117\016\104\022\103\031\110\032\114\033\102\037" +
    "\101\041\106\045\112\046\100\047\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\146\014\155\020\141" +
    "\021\140\022\137\026\271\027\274\034\307\051\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\312\020\141\021\140\022\137\001\001\000" +
    "\002\001\001\000\032\003\314\010\117\016\104\022\103" +
    "\031\110\032\114\033\102\037\101\041\106\045\112\046" +
    "\100\047\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\146\014\155\020\141\021\140\022\137\026\271" +
    "\027\274\034\272\035\336\036\267\051\153\001\001\000" +
    "\030\012\146\014\155\020\141\021\140\022\137\026\271" +
    "\027\274\034\272\035\324\036\267\051\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\331\010\117" +
    "\016\104\022\103\031\110\032\114\033\102\037\101\041" +
    "\106\045\112\046\100\047\120\001\001\000\032\003\327" +
    "\010\117\016\104\022\103\031\110\032\114\033\102\037" +
    "\101\041\106\045\112\046\100\047\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\334\010\117\016\104\022\103\031\110" +
    "\032\114\033\102\037\101\041\106\045\112\046\100\047" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\340\010\117\016\104\022\103\031" +
    "\110\032\114\033\102\037\101\041\106\045\112\046\100" +
    "\047\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\351\013\354" +
    "\051\153\001\001\000\010\012\351\013\352\051\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u0116\001\001\000" +
    "\004\062\363\001\001\000\002\001\001\000\032\003\u0112" +
    "\010\117\016\104\022\103\031\110\032\114\033\102\037" +
    "\101\041\106\045\112\046\100\047\120\001\001\000\032" +
    "\003\366\010\117\016\104\022\103\031\110\032\114\033" +
    "\102\037\101\041\106\045\112\046\100\047\120\001\001" +
    "\000\004\040\371\001\001\000\002\001\001\000\030\012" +
    "\146\014\155\020\141\021\140\022\137\026\271\027\274" +
    "\034\272\035\376\036\267\051\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\u0105\010\117\016\104\022\103" +
    "\031\110\032\114\033\102\037\101\041\106\045\112\046" +
    "\100\047\120\001\001\000\032\003\u0103\010\117\016\104" +
    "\022\103\031\110\032\114\033\102\037\101\041\106\045" +
    "\112\046\100\047\120\001\001\000\004\040\u0104\001\001" +
    "\000\002\001\001\000\004\040\u0106\001\001\000\002\001" +
    "\001\000\032\003\u0108\010\117\016\104\022\103\031\110" +
    "\032\114\033\102\037\101\041\106\045\112\046\100\047" +
    "\120\001\001\000\004\040\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\u010c\010\117\016\104\022" +
    "\103\031\110\032\114\033\102\037\101\041\106\045\112" +
    "\046\100\047\120\001\001\000\004\040\u010d\001\001\000" +
    "\002\001\001\000\032\003\u0111\010\117\016\104\022\103" +
    "\031\110\032\114\033\102\037\101\041\106\045\112\046" +
    "\100\047\120\001\001\000\032\003\u0110\010\117\016\104" +
    "\022\103\031\110\032\114\033\102\037\101\041\106\045" +
    "\112\046\100\047\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\u0118\010\117\016\104\022\103\031\110\032\114\033" +
    "\102\037\101\041\106\045\112\046\100\047\120\001\001" +
    "\000\004\040\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u011d\001\001\000\002" +
    "\001\001\000\032\003\u011f\010\117\016\104\022\103\031" +
    "\110\032\114\033\102\037\101\041\106\045\112\046\100" +
    "\047\120\001\001\000\004\040\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u012c\010\117" +
    "\016\104\022\103\031\110\032\114\033\102\037\101\041" +
    "\106\045\112\046\100\047\120\001\001\000\032\003\u012b" +
    "\010\117\016\104\022\103\031\110\032\114\033\102\037" +
    "\101\041\106\045\112\046\100\047\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0141\001\001\000\004\052\u0136\001\001\000\002\001\001" +
    "\000\006\056\u013a\061\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\u013a\061\u013c" +
    "\001\001\000\002\001\001\000\004\056\u0140\001\001\000" +
    "\004\052\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\u013a\061\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u0147\001\001\000\002\001\001\000\004\043\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\045\060\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u0150\001\001\000\002\001\001" +
    "\000\004\043\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\045\060\u0168\001\001\000\006\057\045\060" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u015d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0165\001\001" +
    "\000\032\003\u0162\010\117\016\104\022\103\031\110\032" +
    "\114\033\102\037\101\041\106\045\112\046\100\047\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\045\060\u016f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u0183\016\u017e\001\001\000\006" +
    "\011\u017b\016\u0179\001\001\000\006\011\u0180\016\u017e\001" +
    "\001\000\006\011\u017f\016\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0180\016" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u0187\016\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u01b4\001\001\000\006\052" +
    "\u019c\055\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u019e\054\u01a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u01a2\054\u01a0\001\001\000\002\001\001\000\004\054\u01a6" +
    "\001\001\000\004\052\u01a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u01ac\051\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u01b1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\u01b3\020\141\021\140\022\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u01b6\054" +
    "\u01a0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u01bb\006\024\007" +
    "\015\016\016\044\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\u01c0\006\024\007\015\016\016\044\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();
    public TablaSimbolos tablaSimbolos = new TablaSimbolos(); 
    public int offset = 0;
    public int cantVarsCreadas = 0;    

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Nodo RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = md;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= DECLARACION MDLINP 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= saltoLinea MDLINP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (m != null){
                        RESULT=m;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= FUNC MDLINP 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            Nodo node = new Nodo("STRUCTURE",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++; 
                            node.addHijo(s);                            
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTUREDECLA ::= STRUCTURE error saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCTUREDECLA ::= STRUCTURE identificador error STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("STRUCTURE INSTRUCTIONS",parser.cont);
                        parser.cont++;
                        node.addHijo(d);
                        node.addHijo(s);                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=s;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRUCTINSTRUC ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                        Nodo node = new Nodo("VACIO",parser.cont);
                        parser.cont++;                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea STATEMENTS END SUB 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p.getNodo());
                        }
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas);

                        tablaSimbolos.agregarID(id,p.getTipo()+"->void",0,"");
                        offset = 0;                        
                        cantVarsCreadas = 0;                                                

                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea STATEMENTS END FUNCTION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p.getNodo() != null){
                            node.addHijo(p.getNodo());
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas);

                        tablaSimbolos.agregarID(id,p.getTipo()+"->"+t,0,"");
                        offset = 0;                        
                        cantVarsCreadas = 0;

                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMS ::= VARPARAMS 
            {
              Objeto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMS ::= 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;

                    Objeto retVal = new Objeto(node,"void");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,t,offset,"");

                        Objeto retVal = new Objeto(node, t+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+c.getAcumulada()+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+ c.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARPARAMS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;

                        tablaSimbolos.agregarID(id,t,offset,""); 

                        Objeto retVal = new Objeto(node,t); 
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v.getNodo());

                    Objeto retVal = new Objeto(node, c.getTipo(), c.getAcumulada()+v.getAcumulada());
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARS2 ::= CANTVARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("VARS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, c.getTipo(),"x"+c.getTipo()+c.getAcumulada());                                                    

                        RESULT=retVal;   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CANTVARS2 ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("VARS",parser.cont);   
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;           
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        
                        tablaSimbolos.agregarID(id,t,offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, t,"x"+t);                                                          

                        RESULT=retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENTS ::= saltoLinea STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (s != null){
                        RESULT = s;   
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENTS ::= EXIT SUB STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENTS ::= EXIT FUNCTION STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENTS ::= ASIGN STATEMENTS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTS ::= RETVAL STATEMENTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTS ::= CALL STATEMENTS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMETNS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTS ::= WRCONSOLE STATEMENTS 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTS ::= IFSTATEMENT STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTS ::= FORSTATEMENT STATEMENTS 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTS ::= DOWHILESTATE STATEMENTS 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENTS ::= error STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENTS ::= error SUB STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATEMENTS ::= error FUNC STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    
                    int cantVars = cantVarsCreadas - m.getNum();
                    tablaSimbolos.agregarAmbito("IF.", cantVars);
                    offset -= tablaSimbolos.disminuirOffset(cantVars);

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IFSTATEMENT ::= IF error THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IFSTATEMENT ::= IF CONDICION error M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IFSTATEMENT ::= IF CONDICION THEN M error STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIFSTATEMENT ::= ELSEIF CONDICION THEN saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIFSTATEMENT ::= ELSE saltoLinea STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIFSTATEMENT ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIFSTATEMENT ::= ELSEIF error THEN saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIFSTATEMENT ::= ELSEIF CONDICION error saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIFSTATEMENT ::= ELSEIF CONDICION THEN error STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIFSTATEMENT ::= ELSE error STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DOWHILESTATE ::= DO WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DOWHILESTATE ::= error WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DOWHILESTATE ::= DO error CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DOWHILESTATE ::= DO WHILE error saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DOWHILESTATE ::= DO WHILE CONDICION error STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FORSTATEMENT ::= FOR COUNTER TO OPARIT saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(o);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FORSTATEMENT ::= error COUNTER TO OPARIT saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FORSTATEMENT ::= FOR error TO OPARIT saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FORSTATEMENT ::= FOR COUNTER error OPARIT saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FORSTATEMENT ::= FOR COUNTER TO OPARIT error STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RETVAL ::= RETURN VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAL ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAL ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COUNTER ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ai = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=ai;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo node = new Nodo("=",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            node.addHijo(new Nodo("INTEGER",parser.cont));
                            parser.cont++;
                            node.addHijo(op);
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COUNTER ::= error AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(i,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMCALL ::= VARCALL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMCALL ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARCALL ::= VARCALL COMA VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(val);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARCALL ::= VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARCALL ::= VARCALL error 
            {
              Nodo RESULT =null;
		 errores.add("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= NOT CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(v2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 
                    RESULT="=";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALCOND ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALCOND ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGN ::= ASIGNOTRO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIGN ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIGN ::= ASIGNSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(l,parser.cont));
                    parser.cont++;
                    node.addHijo(va);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(l,parser.cont));                    
                    parser.cont++;                
                    o.addHijo(v);
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALASIGN ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALASIGN ::= TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALASIGN ::= FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("FALSE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALASIGN ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=ustr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALASIGN ::= READ 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("read console",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(v2,parser.cont));
                    parser.cont++;
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALUNIRSTR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALUNIRSTR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALUNIRSTR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v);
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNINT ::= identificador error VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNINT ::= error OPASING VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPASING ::= IGUAL 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPASING ::= OPMULTI IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPASING ::= OPADICION IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALINT ::= OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPARIT ::= OPARIT OPADICION OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPARIT ::= OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP ::= OP OPMULTI OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP ::= OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPP ::= INTEGER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(i,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPP ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPP ::= CALL 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = c;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPP ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= DIM T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= DIM error 
            {
              Nodo RESULT =null;
		 errores.add("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // T ::= identificador AS TIPOIGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto t = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(t.getNodo());

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // T ::= identificador AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // T ::= identificador COMA CANTVARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // T ::= identificador AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();  
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VARS ::= CANTVARS COMA VARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VARS ::= CANTVARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = c.getNodo();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CANTVARS ::= identificador COMA CANTVARS 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());                    

                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");

                    Objeto retVal = new Objeto(node, c.getTipo());                    
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT=retVal;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CANTVARS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);   
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;           
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;             

                    tablaSimbolos.agregarID(id,t,offset,"");       

                    Objeto retVal = new Objeto(node, t);                                  
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT=retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Objeto RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("INTEGER",parser.cont));
                    parser.cont++;
                    node.addHijo(o);

                    //ojo oparit el valor
                    Objeto retVal = new Objeto(node,"INTEGER");
                    RESULT=retVal;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Objeto RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(str.substring(1,str.length()-1),parser.cont));
                    parser.cont++;

                    //ojo str el valor
                    Objeto retVal = new Objeto(node,"STRING");
                    RESULT=retVal; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("TRUE",parser.cont));
                    parser.cont++;

                    //ojo true
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT=retVal;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("FALSE",parser.cont));
                    parser.cont++;

                    //ojo false 
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT=retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Objeto RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);

                    //ojo ustr
                    Objeto retVal = new Objeto(node,"STRING");
                    RESULT=retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOIGUAL ::= identificador IGUAL NEW CALL 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);

                    //ojo new call
                    Objeto retVal = new Objeto(node,id);
                    RESULT=retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VALWR ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VALWR ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALWR ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ustr; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VALWR ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT=new Marcador(cantVarsCreadas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
