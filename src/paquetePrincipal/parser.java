
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\032\010\000\002\032\010\000\002\032" +
    "\010\000\002\032\010\000\002\010\004\000\002\010\004" +
    "\000\002\010\003\000\002\005\014\000\002\005\014\000" +
    "\002\005\014\000\002\005\014\000\002\005\014\000\002" +
    "\006\016\000\002\006\016\000\002\006\016\000\002\006" +
    "\016\000\002\006\016\000\002\006\016\000\002\006\016" +
    "\000\002\044\003\000\002\044\002\000\002\043\007\000" +
    "\002\043\007\000\002\043\005\000\002\043\005\000\002" +
    "\045\005\000\002\045\003\000\002\042\005\000\002\042" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\002\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\027\013" +
    "\000\002\027\013\000\002\027\013\000\002\027\013\000" +
    "\002\027\013\000\002\026\010\000\002\026\005\000\002" +
    "\026\002\000\002\026\010\000\002\026\010\000\002\026" +
    "\010\000\002\026\005\000\002\034\010\000\002\034\010" +
    "\000\002\034\010\000\002\034\010\000\002\034\010\000" +
    "\002\033\011\000\002\033\011\000\002\033\011\000\002" +
    "\033\011\000\002\033\011\000\002\025\004\000\002\035" +
    "\005\000\002\035\007\000\002\035\007\000\002\047\006" +
    "\000\002\047\006\000\002\017\003\000\002\017\002\000" +
    "\002\020\005\000\002\020\003\000\002\020\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\040\003\000\002\040\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\011\005\000\002\011\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\021\003\000\002\021" +
    "\004\000\002\021\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\004\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\015\004" +
    "\000\002\015\004\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\005\000\002\016\005\000\002" +
    "\014\005\000\002\014\003\000\002\041\005\000\002\041" +
    "\005\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\007\006\000\002\007\006\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\006\003\004\030\005\001\002\000\004\050" +
    "\u01a2\001\002\000\006\003\010\050\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\013" +
    "\u019e\001\002\000\006\003\012\013\013\001\002\000\014" +
    "\012\021\013\020\014\014\031\022\045\023\001\002\000" +
    "\014\012\021\013\020\014\014\031\022\045\023\001\002" +
    "\000\006\003\u0187\050\u0188\001\002\000\006\003\u0181\006" +
    "\u0182\001\002\000\014\012\021\013\020\014\014\031\022" +
    "\045\023\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\020\003\ufff5\006\ufff5\012\021" +
    "\013\020\014\014\031\022\045\023\001\002\000\006\003" +
    "\u0169\050\u016a\001\002\000\006\003\u0147\050\u0148\001\002" +
    "\000\006\003\030\050\031\001\002\000\014\012\021\013" +
    "\020\014\014\031\022\045\023\001\002\000\014\012\021" +
    "\013\020\014\014\031\022\045\023\001\002\000\006\003" +
    "\ufff7\006\ufff7\001\002\000\006\003\ufff6\006\ufff6\001\002" +
    "\000\004\032\uff72\001\002\000\006\003\uff72\032\uff72\001" +
    "\002\000\006\003\033\032\034\001\002\000\006\033\uffe0" +
    "\050\036\001\002\000\010\003\uffe0\033\uffe0\050\036\001" +
    "\002\000\006\003\uffe1\033\uffe1\001\002\000\006\015\u0125" +
    "\016\u0126\001\002\000\006\003\041\033\040\001\002\000" +
    "\006\003\055\016\054\001\002\000\004\016\042\001\002" +
    "\000\012\017\046\022\043\023\045\050\044\001\002\000" +
    "\056\003\uff7c\004\uff7c\005\uff7c\006\uff7c\010\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\015\uff7c\031\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c\045\uff7c" +
    "\047\uff7c\050\uff7c\056\uff7c\001\002\000\056\003\uff79\004" +
    "\uff79\005\uff79\006\uff79\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\014\uff79\015\uff79\031\uff79\033\uff79\034\uff79\035\uff79\037" +
    "\uff79\041\uff79\042\uff79\043\uff79\045\uff79\047\uff79\050\uff79" +
    "\056\uff79\001\002\000\056\003\uff7b\004\uff7b\005\uff7b\006" +
    "\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b" +
    "\031\uff7b\033\uff7b\034\uff7b\035\uff7b\037\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\045\uff7b\047\uff7b\050\uff7b\056\uff7b\001\002" +
    "\000\056\003\uff7a\004\uff7a\005\uff7a\006\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\031\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\037\uff7a\041\uff7a\042\uff7a\043\uff7a\045" +
    "\uff7a\047\uff7a\050\uff7a\056\uff7a\001\002\000\004\013\050" +
    "\001\002\000\002\001\002\000\004\006\052\001\002\000" +
    "\004\045\053\001\002\000\050\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\031\uffe5\034" +
    "\uffe5\035\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\056\uffe5\001\002\000\014\003\063\017" +
    "\046\022\043\023\045\050\044\001\002\000\012\017\046" +
    "\022\043\023\045\050\044\001\002\000\004\013\057\001" +
    "\002\000\002\001\002\000\004\006\061\001\002\000\004" +
    "\045\062\001\002\000\050\003\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\031\uffe4\034\uffe4" +
    "\035\uffe4\037\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\056\uffe4\001\002\000\004\013\u0121\001\002" +
    "\000\006\003\065\013\066\001\002\000\002\001\002\000" +
    "\032\003\106\004\076\006\uffcc\013\103\014\014\034\067" +
    "\035\107\041\102\043\074\047\100\050\111\056\110\001" +
    "\002\000\006\031\u011a\045\u011b\001\002\000\042\003\106" +
    "\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034" +
    "\067\035\107\037\uffcc\041\102\042\uffcc\043\074\047\100" +
    "\050\111\056\110\001\002\000\042\003\106\004\076\005" +
    "\uffcc\006\uffcc\010\uffcc\013\103\014\014\034\067\035\107" +
    "\037\uffcc\041\102\042\uffcc\043\074\047\100\050\111\056" +
    "\110\001\002\000\042\003\106\004\076\005\uffcc\006\uffcc" +
    "\010\uffcc\013\103\014\014\034\067\035\107\037\uffcc\041" +
    "\102\042\uffcc\043\074\047\100\050\111\056\110\001\002" +
    "\000\042\003\106\004\076\005\uffcc\006\uffcc\010\uffcc\013" +
    "\103\014\014\034\067\035\107\037\uffcc\041\102\042\uffcc" +
    "\043\074\047\100\050\111\056\110\001\002\000\022\003" +
    "\141\020\125\021\131\027\124\032\136\050\135\051\130" +
    "\052\122\001\002\000\042\003\106\004\076\005\uffcc\006" +
    "\uffcc\010\uffcc\013\103\014\014\034\067\035\107\037\uffcc" +
    "\041\102\042\uffcc\043\074\047\100\050\111\056\110\001" +
    "\002\000\024\003\340\020\125\021\131\026\254\027\124" +
    "\032\136\050\135\051\130\052\122\001\002\000\042\003" +
    "\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014" +
    "\034\067\035\107\037\uffcc\041\102\042\uffcc\043\074\047" +
    "\100\050\111\056\110\001\002\000\006\003\325\032\326" +
    "\001\002\000\004\006\323\001\002\000\006\003\302\040" +
    "\303\001\002\000\042\003\106\004\076\005\uffcc\006\uffcc" +
    "\010\uffcc\013\103\014\014\034\067\035\107\037\uffcc\041" +
    "\102\042\uffcc\043\074\047\100\050\111\056\110\001\002" +
    "\000\042\003\106\004\076\005\uffcc\006\uffcc\010\uffcc\013" +
    "\103\014\014\034\067\035\107\037\uffcc\041\102\042\uffcc" +
    "\043\074\047\100\050\111\056\110\001\002\000\042\003" +
    "\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014" +
    "\034\067\035\107\037\uffcc\041\102\042\uffcc\043\074\047" +
    "\100\050\111\056\110\001\002\000\052\003\244\004\076" +
    "\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\031\242\032" +
    "\142\034\067\035\107\037\uffcc\040\240\041\102\042\uffcc" +
    "\043\074\045\023\047\100\050\245\056\110\001\002\000" +
    "\006\003\200\050\201\001\002\000\010\011\176\053\113" +
    "\054\116\001\002\000\012\011\114\032\115\053\113\054" +
    "\116\001\002\000\022\003\141\020\125\021\131\027\124" +
    "\032\136\050\135\051\130\052\122\001\002\000\004\011" +
    "\173\001\002\000\024\003\uff98\020\uff98\021\uff98\027\uff98" +
    "\032\uff98\046\172\050\uff98\051\uff98\052\uff98\001\002\000" +
    "\024\003\133\020\125\021\131\027\124\032\136\033\uffab" +
    "\050\135\051\130\052\122\001\002\000\004\011\117\001" +
    "\002\000\022\003\uff97\020\uff97\021\uff97\027\uff97\032\uff97" +
    "\050\uff97\051\uff97\052\uff97\001\002\000\012\015\170\033" +
    "\uffa9\053\151\054\152\001\002\000\074\003\uff8a\004\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\024\uff8a\025\uff8a\031\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\045\uff8a\047\uff8a\050\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\001\002\000\074\003\uff90\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\024\uff90\025\uff90\031\uff90\033\uff90\034\uff90\035" +
    "\uff90\036\uff90\037\uff90\041\uff90\042\uff90\043\uff90\045\uff90" +
    "\047\uff90\050\uff90\053\uff90\054\uff90\055\uff90\056\uff90\001" +
    "\002\000\074\003\uff88\004\uff88\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\024" +
    "\uff88\025\uff88\031\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\041\uff88\042\uff88\043\uff88\045\uff88\047\uff88\050" +
    "\uff88\053\146\054\147\055\uff88\056\uff88\001\002\000\006" +
    "\003\165\050\166\001\002\000\074\003\uff8e\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\024\uff8e\025\uff8e\031\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\045\uff8e\047\uff8e\050\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\001\002\000\004\033\uffac\001\002\000\004\044\157" +
    "\001\002\000\076\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\024\uff8f\025\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff9b\045\uff8f" +
    "\047\uff8f\050\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001" +
    "\002\000\074\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\024" +
    "\uff8d\025\uff8d\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\041\uff8d\042\uff8d\043\uff8d\045\uff8d\047\uff8d\050" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000\004" +
    "\033\156\001\002\000\010\032\142\033\uffa8\044\uff99\001" +
    "\002\000\074\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\024" +
    "\uff8b\025\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\001\002\000\100" +
    "\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\013\uff89\014\uff89\015\uff89\024\uff89\025\uff89" +
    "\031\uff89\032\115\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff9a\045\uff89\047\uff89" +
    "\050\uff89\053\uff89\054\uff89\055\uff89\056\uff89\001\002\000" +
    "\022\003\141\020\125\021\131\027\124\032\136\050\135" +
    "\051\130\052\122\001\002\000\006\053\151\054\152\001" +
    "\002\000\010\033\145\053\146\054\147\001\002\000\006" +
    "\032\142\044\uff99\001\002\000\024\003\133\020\125\021" +
    "\131\027\124\032\136\033\uffab\050\135\051\130\052\122" +
    "\001\002\000\004\033\144\001\002\000\074\003\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\024\uffad\025\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\041\uffad\042\uffad" +
    "\043\uffad\045\uffad\047\uffad\050\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\001\002\000\074\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\024\uff93\025\uff93\031\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\041\uff93\042\uff93\043\uff93\045" +
    "\uff93\047\uff93\050\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\001\002\000\022\003\141\020\125\021\131\027\124\032" +
    "\136\050\135\051\130\052\122\001\002\000\022\003\141" +
    "\020\125\021\131\027\124\032\136\050\135\051\130\052" +
    "\122\001\002\000\074\003\uff94\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\024\uff94\025\uff94\031\uff94\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\041\uff94\042\uff94\043\uff94\045\uff94\047" +
    "\uff94\050\uff94\053\uff94\054\uff94\055\uff94\056\uff94\001\002" +
    "\000\022\003\141\020\125\021\131\027\124\032\136\050" +
    "\135\051\130\052\122\001\002\000\022\003\141\020\125" +
    "\021\131\027\124\032\136\050\135\051\130\052\122\001" +
    "\002\000\074\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\024" +
    "\uff91\025\uff91\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\041\uff91\042\uff91\043\uff91\045\uff91\047\uff91\050" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\001\002\000\074" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\024\uff92\025\uff92" +
    "\031\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\041" +
    "\uff92\042\uff92\043\uff92\045\uff92\047\uff92\050\uff92\053\uff92" +
    "\054\152\055\uff92\056\uff92\001\002\000\074\003\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\024\uff95\025\uff95\031\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\041\uff95\042\uff95" +
    "\043\uff95\045\uff95\047\uff95\050\uff95\053\uff95\054\152\055" +
    "\uff95\056\uff95\001\002\000\074\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\024\uffae\025\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\041\uffae\042\uffae\043\uffae\045" +
    "\uffae\047\uffae\050\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\001\002\000\010\003\161\050\162\051\160\001\002\000" +
    "\076\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\024\uff9b\025" +
    "\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\050" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\001\002\000\076" +
    "\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\024\uff99\025\uff99" +
    "\031\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\047\uff99\050\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\001\002\000\076\003" +
    "\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\024\uff9a\025\uff9a\031" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\076\003\uff9c" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\024\uff9c\025\uff9c\031\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\157\045\uff9c\047\uff9c\050\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\001\002\000\074\003\uff9d\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\024\uff9d\025\uff9d\031\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\045\uff9d\047\uff9d\050\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\001\002\000\004\032\142\001\002\000\004" +
    "\032\115\001\002\000\074\003\uff8c\004\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\024\uff8c\025\uff8c\031\uff8c\033\uff8c\034\uff8c\035" +
    "\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c" +
    "\047\uff8c\050\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\001" +
    "\002\000\022\003\133\020\125\021\131\027\124\032\136" +
    "\050\135\051\130\052\122\001\002\000\004\033\uffaa\001" +
    "\002\000\042\003\uff9f\004\uff9f\005\uff9f\006\uff9f\010\uff9f" +
    "\013\uff9f\014\uff9f\034\uff9f\035\uff9f\037\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\047\uff9f\050\uff9f\056\uff9f\001\002\000\022" +
    "\003\uff96\020\uff96\021\uff96\027\uff96\032\uff96\050\uff96\051" +
    "\uff96\052\uff96\001\002\000\046\003\uffa0\004\uffa0\005\uffa0" +
    "\006\uffa0\010\uffa0\013\uffa0\014\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\047\uffa0\050\uffa0\053\151" +
    "\054\152\056\uffa0\001\002\000\022\003\141\020\125\021" +
    "\131\027\124\032\136\050\135\051\130\052\122\001\002" +
    "\000\022\003\uff98\020\uff98\021\uff98\027\uff98\032\uff98\050" +
    "\uff98\051\uff98\052\uff98\001\002\000\046\003\uff9e\004\uff9e" +
    "\005\uff9e\006\uff9e\010\uff9e\013\uff9e\014\uff9e\034\uff9e\035" +
    "\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e\047\uff9e\050\uff9e" +
    "\053\151\054\152\056\uff9e\001\002\000\006\016\227\036" +
    "\226\001\002\000\012\011\176\016\221\053\113\054\116" +
    "\001\002\000\006\003\204\036\203\001\002\000\022\003" +
    "\141\020\125\021\131\027\124\032\136\050\135\051\130" +
    "\052\122\001\002\000\022\003\141\020\125\021\131\027" +
    "\124\032\136\050\135\051\130\052\122\001\002\000\010" +
    "\013\206\053\151\054\152\001\002\000\032\003\106\004" +
    "\076\013\103\014\014\034\067\035\107\037\uffcc\041\102" +
    "\043\074\047\100\050\111\056\110\001\002\000\004\037" +
    "\210\001\002\000\042\003\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\010\uffb4\013\uffb4\014\uffb4\034\uffb4\035\uffb4\037\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\047\uffb4\050\uffb4\056\uffb4\001\002" +
    "\000\012\003\212\013\213\053\151\054\152\001\002\000" +
    "\032\003\106\004\076\013\103\014\014\034\067\035\107" +
    "\037\uffcc\041\102\043\074\047\100\050\111\056\110\001" +
    "\002\000\032\003\106\004\076\013\103\014\014\034\067" +
    "\035\107\037\uffcc\041\102\043\074\047\100\050\111\056" +
    "\110\001\002\000\004\037\215\001\002\000\042\003\uffb7" +
    "\004\uffb7\005\uffb7\006\uffb7\010\uffb7\013\uffb7\014\uffb7\034" +
    "\uffb7\035\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\047\uffb7" +
    "\050\uffb7\056\uffb7\001\002\000\004\037\217\001\002\000" +
    "\042\003\uffb3\004\uffb3\005\uffb3\006\uffb3\010\uffb3\013\uffb3" +
    "\014\uffb3\034\uffb3\035\uffb3\037\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\047\uffb3\050\uffb3\056\uffb3\001\002\000\022\003\141" +
    "\020\125\021\131\027\124\032\136\050\135\051\130\052" +
    "\122\001\002\000\004\022\222\001\002\000\004\011\223" +
    "\001\002\000\022\003\141\020\125\021\131\027\124\032" +
    "\136\050\135\051\130\052\122\001\002\000\012\003\uffb0" +
    "\036\uffb0\053\151\054\152\001\002\000\012\003\uffb1\036" +
    "\uffb1\053\151\054\152\001\002\000\022\003\141\020\125" +
    "\021\131\027\124\032\136\050\135\051\130\052\122\001" +
    "\002\000\004\022\230\001\002\000\004\011\231\001\002" +
    "\000\022\003\141\020\125\021\131\027\124\032\136\050" +
    "\135\051\130\052\122\001\002\000\012\003\uffaf\036\uffaf" +
    "\053\151\054\152\001\002\000\010\013\234\053\151\054" +
    "\152\001\002\000\032\003\106\004\076\013\103\014\014" +
    "\034\067\035\107\037\uffcc\041\102\043\074\047\100\050" +
    "\111\056\110\001\002\000\004\037\236\001\002\000\042" +
    "\003\uffb5\004\uffb5\005\uffb5\006\uffb5\010\uffb5\013\uffb5\014" +
    "\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\047\uffb5\050\uffb5\056\uffb5\001\002\000\004\036\272\001" +
    "\002\000\024\003\141\020\125\021\131\026\254\027\124" +
    "\032\136\050\135\051\130\052\122\001\002\000\014\005" +
    "\uffcb\006\uffcb\010\uffcb\037\uffcb\042\uffcb\001\002\000\042" +
    "\003\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014" +
    "\014\034\067\035\107\037\uffcc\041\102\042\uffcc\043\074" +
    "\047\100\050\111\056\110\001\002\000\042\003\106\004" +
    "\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034\067" +
    "\035\107\037\uffcc\041\102\042\uffcc\043\074\047\100\050" +
    "\111\056\110\001\002\000\054\003\244\004\076\005\uffcc" +
    "\006\uffcc\010\uffcc\013\103\014\014\016\227\031\242\032" +
    "\142\034\067\035\107\037\uffcc\040\240\041\102\042\uffcc" +
    "\043\074\045\023\047\100\050\245\056\110\001\002\000" +
    "\014\011\114\016\221\032\115\053\113\054\116\001\002" +
    "\000\022\003\141\020\125\021\131\027\124\032\136\050" +
    "\135\051\130\052\122\001\002\000\040\003\uffa0\004\uffa0" +
    "\006\uffa0\013\uffa0\014\uffa0\034\uffa0\035\uffa0\036\uffb1\041" +
    "\uffa0\043\uffa0\047\uffa0\050\uffa0\053\151\054\152\056\uffa0" +
    "\001\002\000\014\005\uffc9\006\uffc9\010\uffc9\037\uffc9\042" +
    "\uffc9\001\002\000\014\005\uffca\006\uffca\010\uffca\037\uffca" +
    "\042\uffca\001\002\000\012\011\270\053\151\054\152\055" +
    "\266\001\002\000\014\003\uffa4\007\uffa4\013\uffa4\024\262" +
    "\025\263\001\002\000\022\003\141\020\125\021\131\027" +
    "\124\032\136\050\135\051\130\052\122\001\002\000\004" +
    "\013\256\001\002\000\032\003\106\004\076\013\103\014" +
    "\014\034\067\035\107\041\102\042\uffcc\043\074\047\100" +
    "\050\111\056\110\001\002\000\004\042\260\001\002\000" +
    "\042\003\uffbb\004\uffbb\005\uffbb\006\uffbb\010\uffbb\013\uffbb" +
    "\014\uffbb\034\uffbb\035\uffbb\037\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\047\uffbb\050\uffbb\056\uffbb\001\002\000\010\003\uffa5" +
    "\007\uffa5\013\uffa5\001\002\000\024\003\141\020\125\021" +
    "\131\026\254\027\124\032\136\050\135\051\130\052\122" +
    "\001\002\000\024\003\141\020\125\021\131\026\254\027" +
    "\124\032\136\050\135\051\130\052\122\001\002\000\010" +
    "\003\uffa6\007\uffa6\013\uffa6\001\002\000\010\003\uffa7\007" +
    "\uffa7\013\uffa7\001\002\000\022\003\uffa2\020\uffa2\021\uffa2" +
    "\027\uffa2\032\uffa2\050\uffa2\051\uffa2\052\uffa2\001\002\000" +
    "\022\003\141\020\125\021\131\027\124\032\136\050\135" +
    "\051\130\052\122\001\002\000\022\003\uffa1\020\uffa1\021" +
    "\uffa1\027\uffa1\032\uffa1\050\uffa1\051\uffa1\052\uffa1\001\002" +
    "\000\020\003\uffa3\007\uffa3\013\uffa3\024\uffa3\025\uffa3\053" +
    "\151\054\152\001\002\000\022\003\141\020\125\021\131" +
    "\027\124\032\136\050\135\051\130\052\122\001\002\000" +
    "\010\013\274\053\151\054\152\001\002\000\032\003\106" +
    "\004\076\013\103\014\014\034\067\035\107\037\uffcc\041" +
    "\102\043\074\047\100\050\111\056\110\001\002\000\004" +
    "\037\276\001\002\000\042\003\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\034\uffb6\035\uffb6\037\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\047\uffb6\050\uffb6\056\uffb6\001" +
    "\002\000\014\005\uffcd\006\uffcd\010\uffcd\037\uffcd\042\uffcd" +
    "\001\002\000\014\005\uffd0\006\uffd0\010\uffd0\037\uffd0\042" +
    "\uffd0\001\002\000\014\005\uffd6\006\uffd6\010\uffd6\037\uffd6" +
    "\042\uffd6\001\002\000\024\003\141\020\125\021\131\026" +
    "\254\027\124\032\136\050\135\051\130\052\122\001\002" +
    "\000\024\003\304\020\125\021\131\026\254\027\124\032" +
    "\136\050\135\051\130\052\122\001\002\000\010\013\314" +
    "\032\142\044\uff99\001\002\000\006\003\306\013\307\001" +
    "\002\000\032\003\106\004\076\013\103\014\014\034\067" +
    "\035\107\041\102\042\uffcc\043\074\047\100\050\111\056" +
    "\110\001\002\000\032\003\106\004\076\013\103\014\014" +
    "\034\067\035\107\041\102\042\uffcc\043\074\047\100\050" +
    "\111\056\110\001\002\000\004\042\311\001\002\000\042" +
    "\003\uffbc\004\uffbc\005\uffbc\006\uffbc\010\uffbc\013\uffbc\014" +
    "\uffbc\034\uffbc\035\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\047\uffbc\050\uffbc\056\uffbc\001\002\000\004\042\313\001" +
    "\002\000\042\003\uffb8\004\uffb8\005\uffb8\006\uffb8\010\uffb8" +
    "\013\uffb8\014\uffb8\034\uffb8\035\uffb8\037\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\047\uffb8\050\uffb8\056\uffb8\001\002\000\032" +
    "\003\106\004\076\013\103\014\014\034\067\035\107\041" +
    "\102\042\uffcc\043\074\047\100\050\111\056\110\001\002" +
    "\000\004\042\316\001\002\000\042\003\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\010\uffb9\013\uffb9\014\uffb9\034\uffb9\035\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\043\uffb9\047\uffb9\050\uffb9\056" +
    "\uffb9\001\002\000\004\013\320\001\002\000\032\003\106" +
    "\004\076\013\103\014\014\034\067\035\107\041\102\042" +
    "\uffcc\043\074\047\100\050\111\056\110\001\002\000\004" +
    "\042\322\001\002\000\042\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\010\uffba\013\uffba\014\uffba\034\uffba\035\uffba\037\uffba" +
    "\041\uffba\042\uffba\043\uffba\047\uffba\050\uffba\056\uffba\001" +
    "\002\000\004\045\324\001\002\000\050\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\031" +
    "\uffe8\034\uffe8\035\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\045\uffe8\047\uffe8\050\uffe8\056\uffe8\001\002\000\010\003" +
    "\330\050\331\051\327\001\002\000\010\003\330\050\331" +
    "\051\327\001\002\000\006\033\uff75\044\uff9b\001\002\000" +
    "\006\033\uff73\044\uff99\001\002\000\006\033\uff76\044\uff9a" +
    "\001\002\000\004\033\uff74\001\002\000\004\033\334\001" +
    "\002\000\042\003\uff78\004\uff78\005\uff78\006\uff78\010\uff78" +
    "\013\uff78\014\uff78\034\uff78\035\uff78\037\uff78\041\uff78\042" +
    "\uff78\043\uff78\047\uff78\050\uff78\056\uff78\001\002\000\004" +
    "\033\336\001\002\000\042\003\uff77\004\uff77\005\uff77\006" +
    "\uff77\010\uff77\013\uff77\014\uff77\034\uff77\035\uff77\037\uff77" +
    "\041\uff77\042\uff77\043\uff77\047\uff77\050\uff77\056\uff77\001" +
    "\002\000\014\005\uffd3\006\uffd3\010\uffd3\037\uffd3\042\uffd3" +
    "\001\002\000\010\007\u010d\032\142\044\uff99\001\002\000" +
    "\006\003\342\007\343\001\002\000\004\013\uff72\001\002" +
    "\000\006\003\uff72\013\uff72\001\002\000\006\003\345\013" +
    "\346\001\002\000\036\003\106\004\076\005\uffcc\006\uffcc" +
    "\010\uffcc\013\103\014\014\034\067\035\107\041\102\043" +
    "\074\047\100\050\111\056\110\001\002\000\036\003\106" +
    "\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034" +
    "\067\035\107\041\102\043\074\047\100\050\111\056\110" +
    "\001\002\000\010\005\350\006\uffc1\010\351\001\002\000" +
    "\006\003\377\013\u0100\001\002\000\024\003\356\020\125" +
    "\021\131\026\254\027\124\032\136\050\135\051\130\052" +
    "\122\001\002\000\004\006\353\001\002\000\006\003\354" +
    "\004\355\001\002\000\042\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\010\uffc4\013\uffc4\014\uffc4\034\uffc4\035\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\047\uffc4\050\uffc4\056\uffc4\001" +
    "\002\000\042\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8" +
    "\013\uffc8\014\uffc8\034\uffc8\035\uffc8\037\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\047\uffc8\050\uffc8\056\uffc8\001\002\000\010" +
    "\007\373\032\142\044\uff99\001\002\000\006\003\360\007" +
    "\361\001\002\000\004\013\370\001\002\000\006\003\362" +
    "\013\363\001\002\000\036\003\106\004\076\005\uffcc\006" +
    "\uffcc\010\uffcc\013\103\014\014\034\067\035\107\041\102" +
    "\043\074\047\100\050\111\056\110\001\002\000\036\003" +
    "\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014" +
    "\034\067\035\107\041\102\043\074\047\100\050\111\056" +
    "\110\001\002\000\010\005\350\006\uffc1\010\351\001\002" +
    "\000\004\006\uffc3\001\002\000\010\005\350\006\uffc1\010" +
    "\351\001\002\000\004\006\uffbe\001\002\000\036\003\106" +
    "\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034" +
    "\067\035\107\041\102\043\074\047\100\050\111\056\110" +
    "\001\002\000\010\005\350\006\uffc1\010\351\001\002\000" +
    "\004\006\uffbf\001\002\000\004\013\374\001\002\000\036" +
    "\003\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014" +
    "\014\034\067\035\107\041\102\043\074\047\100\050\111" +
    "\056\110\001\002\000\010\005\350\006\uffc1\010\351\001" +
    "\002\000\004\006\uffc0\001\002\000\032\003\106\004\076" +
    "\006\uffcc\013\103\014\014\034\067\035\107\041\102\043" +
    "\074\047\100\050\111\056\110\001\002\000\032\003\106" +
    "\004\076\006\uffcc\013\103\014\014\034\067\035\107\041" +
    "\102\043\074\047\100\050\111\056\110\001\002\000\004" +
    "\006\uffc2\001\002\000\004\006\uffbd\001\002\000\010\005" +
    "\350\006\uffc1\010\351\001\002\000\004\006\u0105\001\002" +
    "\000\004\004\u0106\001\002\000\042\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\010\uffc5\013\uffc5\014\uffc5\034\uffc5\035\uffc5" +
    "\037\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\050\uffc5\056" +
    "\uffc5\001\002\000\004\013\u0108\001\002\000\036\003\106" +
    "\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034" +
    "\067\035\107\041\102\043\074\047\100\050\111\056\110" +
    "\001\002\000\010\005\350\006\uffc1\010\351\001\002\000" +
    "\004\006\u010b\001\002\000\004\004\u010c\001\002\000\042" +
    "\003\uffc6\004\uffc6\005\uffc6\006\uffc6\010\uffc6\013\uffc6\014" +
    "\uffc6\034\uffc6\035\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\047\uffc6\050\uffc6\056\uffc6\001\002\000\004\013\uff72\001" +
    "\002\000\004\013\u010f\001\002\000\036\003\106\004\076" +
    "\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034\067\035" +
    "\107\041\102\043\074\047\100\050\111\056\110\001\002" +
    "\000\010\005\350\006\uffc1\010\351\001\002\000\004\006" +
    "\u0112\001\002\000\004\004\u0113\001\002\000\042\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\010\uffc7\013\uffc7\014\uffc7\034" +
    "\uffc7\035\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7" +
    "\050\uffc7\056\uffc7\001\002\000\014\005\uffcf\006\uffcf\010" +
    "\uffcf\037\uffcf\042\uffcf\001\002\000\046\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\010\uffb2\013\uffb2\014\uffb2\034\uffb2\035" +
    "\uffb2\037\uffb2\041\uffb2\042\uffb2\043\uffb2\047\uffb2\050\uffb2" +
    "\053\151\054\152\056\uffb2\001\002\000\014\005\uffd7\006" +
    "\uffd7\010\uffd7\037\uffd7\042\uffd7\001\002\000\014\005\uffd1" +
    "\006\uffd1\010\uffd1\037\uffd1\042\uffd1\001\002\000\014\005" +
    "\uffd2\006\uffd2\010\uffd2\037\uffd2\042\uffd2\001\002\000\014" +
    "\005\uffce\006\uffce\010\uffce\037\uffce\042\uffce\001\002\000" +
    "\042\003\106\004\076\005\uffcc\006\uffcc\010\uffcc\013\103" +
    "\014\014\034\067\035\107\037\uffcc\041\102\042\uffcc\043" +
    "\074\047\100\050\111\056\110\001\002\000\042\003\106" +
    "\004\076\005\uffcc\006\uffcc\010\uffcc\013\103\014\014\034" +
    "\067\035\107\037\uffcc\041\102\042\uffcc\043\074\047\100" +
    "\050\111\056\110\001\002\000\014\005\uffd4\006\uffd4\010" +
    "\uffd4\037\uffd4\042\uffd4\001\002\000\014\005\uffd5\006\uffd5" +
    "\010\uffd5\037\uffd5\042\uffd5\001\002\000\004\006\u011f\001" +
    "\002\000\004\045\u0120\001\002\000\050\003\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\031" +
    "\uffe2\034\uffe2\035\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\045\uffe2\047\uffe2\050\uffe2\056\uffe2\001\002\000\002\001" +
    "\002\000\004\006\u0123\001\002\000\004\045\u0124\001\002" +
    "\000\050\003\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\031\uffe3\034\uffe3\035\uffe3\037\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\050\uffe3\056" +
    "\uffe3\001\002\000\004\050\u0129\001\002\000\012\017\046" +
    "\022\043\023\045\050\044\001\002\000\010\003\uffdc\015" +
    "\u0128\033\uffdc\001\002\000\004\050\u0129\001\002\000\006" +
    "\015\u012e\016\u012f\001\002\000\006\003\uffdf\033\uffdf\001" +
    "\002\000\010\003\uffda\015\u012c\033\uffda\001\002\000\004" +
    "\050\u0129\001\002\000\006\003\uffdb\033\uffdb\001\002\000" +
    "\004\050\u0129\001\002\000\012\017\046\022\043\023\045" +
    "\050\044\001\002\000\010\003\uffd8\015\uffd8\033\uffd8\001" +
    "\002\000\010\003\uffd9\015\uffd9\033\uffd9\001\002\000\010" +
    "\003\uffdd\015\u0133\033\uffdd\001\002\000\004\050\u0129\001" +
    "\002\000\006\003\uffde\033\uffde\001\002\000\004\033\u0136" +
    "\001\002\000\004\016\u0137\001\002\000\012\017\046\022" +
    "\043\023\045\050\044\001\002\000\004\013\u0139\001\002" +
    "\000\002\001\002\000\004\006\u013b\001\002\000\004\045" +
    "\u013c\001\002\000\050\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\031\uffe6\034\uffe6\035" +
    "\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\056\uffe6\001\002\000\004\032\u013e\001\002\000" +
    "\006\033\uffe0\050\036\001\002\000\004\033\u0140\001\002" +
    "\000\004\016\u0141\001\002\000\012\017\046\022\043\023" +
    "\045\050\044\001\002\000\004\013\u0143\001\002\000\002" +
    "\001\002\000\004\006\u0145\001\002\000\004\045\u0146\001" +
    "\002\000\050\003\uffe7\004\uffe7\005\uffe7\006\uffe7\010\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\031\uffe7\034\uffe7\035\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\056\uffe7\001\002\000\004\032\uff72\001\002\000\006\003" +
    "\uff72\032\uff72\001\002\000\006\003\u014a\032\u014b\001\002" +
    "\000\006\033\uffe0\050\036\001\002\000\010\003\uffe0\033" +
    "\uffe0\050\036\001\002\000\006\003\u014e\033\u014d\001\002" +
    "\000\006\003\u0153\013\u0154\001\002\000\004\013\u014f\001" +
    "\002\000\002\001\002\000\004\006\u0151\001\002\000\004" +
    "\031\u0152\001\002\000\014\012\uffea\013\uffea\014\uffea\031" +
    "\uffea\045\uffea\001\002\000\002\001\002\000\032\003\106" +
    "\004\076\006\uffcc\013\103\014\014\034\067\035\107\041" +
    "\102\043\074\047\100\050\111\056\110\001\002\000\004" +
    "\006\u0156\001\002\000\004\031\u0157\001\002\000\014\012" +
    "\uffed\013\uffed\014\uffed\031\uffed\045\uffed\001\002\000\004" +
    "\006\u0159\001\002\000\004\031\u015a\001\002\000\014\012" +
    "\uffe9\013\uffe9\014\uffe9\031\uffe9\045\uffe9\001\002\000\004" +
    "\033\u015c\001\002\000\004\013\u015d\001\002\000\002\001" +
    "\002\000\004\006\u015f\001\002\000\004\031\u0160\001\002" +
    "\000\014\012\uffeb\013\uffeb\014\uffeb\031\uffeb\045\uffeb\001" +
    "\002\000\004\032\u0162\001\002\000\006\033\uffe0\050\036" +
    "\001\002\000\004\033\u0164\001\002\000\004\013\u0165\001" +
    "\002\000\002\001\002\000\004\006\u0167\001\002\000\004" +
    "\031\u0168\001\002\000\014\012\uffec\013\uffec\014\uffec\031" +
    "\uffec\045\uffec\001\002\000\004\013\u017a\001\002\000\006" +
    "\003\u016b\013\u016c\001\002\000\006\013\u016f\014\014\001" +
    "\002\000\006\013\u016f\014\014\001\002\000\010\006\u0175" +
    "\013\u016f\014\014\001\002\000\004\006\u0173\001\002\000" +
    "\010\006\uffee\013\u016f\014\014\001\002\000\006\013\u016f" +
    "\014\014\001\002\000\004\006\uffef\001\002\000\004\006" +
    "\ufff0\001\002\000\004\012\u0174\001\002\000\014\012\ufff4" +
    "\013\ufff4\014\ufff4\031\ufff4\045\ufff4\001\002\000\004\003" +
    "\u0176\001\002\000\014\012\ufff1\013\ufff1\014\ufff1\031\ufff1" +
    "\045\ufff1\001\002\000\004\006\u0178\001\002\000\004\012" +
    "\u0179\001\002\000\014\012\ufff2\013\ufff2\014\ufff2\031\ufff2" +
    "\045\ufff2\001\002\000\006\013\u016f\014\014\001\002\000" +
    "\004\006\u017c\001\002\000\004\012\u017d\001\002\000\014" +
    "\012\ufff3\013\ufff3\014\ufff3\031\ufff3\045\ufff3\001\002\000" +
    "\006\003\ufff9\006\ufff9\001\002\000\006\003\ufffa\006\ufffa" +
    "\001\002\000\006\003\ufff8\006\ufff8\001\002\000\004\030" +
    "\u0185\001\002\000\006\003\u0183\030\u0184\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\000\001\002\000\004\002" +
    "\ufffc\001\002\000\050\003\uff87\004\uff87\005\uff87\006\uff87" +
    "\010\uff87\012\uff87\013\uff87\014\uff87\031\uff87\034\uff87\035" +
    "\uff87\037\uff87\041\uff87\042\uff87\043\uff87\045\uff87\047\uff87" +
    "\050\uff87\056\uff87\001\002\000\050\003\uff86\004\uff86\005" +
    "\uff86\006\uff86\010\uff86\012\uff86\013\uff86\014\uff86\031\uff86" +
    "\034\uff86\035\uff86\037\uff86\041\uff86\042\uff86\043\uff86\045" +
    "\uff86\047\uff86\050\uff86\056\uff86\001\002\000\006\015\u0189" +
    "\016\u018a\001\002\000\004\050\u0190\001\002\000\012\017" +
    "\046\022\043\023\045\050\044\001\002\000\054\003\uff81" +
    "\004\uff81\005\uff81\006\uff81\010\uff81\011\u018d\012\uff81\013" +
    "\uff81\014\uff81\015\u018c\031\uff81\034\uff81\035\uff81\037\uff81" +
    "\041\uff81\042\uff81\043\uff81\045\uff81\047\uff81\050\uff81\056" +
    "\uff81\001\002\000\004\050\u0190\001\002\000\022\003\141" +
    "\020\125\021\131\027\124\032\136\050\135\051\130\052" +
    "\122\001\002\000\054\003\uff85\004\uff85\005\uff85\006\uff85" +
    "\010\uff85\012\uff85\013\uff85\014\uff85\031\uff85\034\uff85\035" +
    "\uff85\037\uff85\041\uff85\042\uff85\043\uff85\045\uff85\047\uff85" +
    "\050\uff85\053\151\054\152\056\uff85\001\002\000\050\003" +
    "\uff84\004\uff84\005\uff84\006\uff84\010\uff84\012\uff84\013\uff84" +
    "\014\uff84\031\uff84\034\uff84\035\uff84\037\uff84\041\uff84\042" +
    "\uff84\043\uff84\045\uff84\047\uff84\050\uff84\056\uff84\001\002" +
    "\000\006\015\u0194\016\u0195\001\002\000\052\003\uff7f\004" +
    "\uff7f\005\uff7f\006\uff7f\010\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\u0192\031\uff7f\034\uff7f\035\uff7f\037\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\045\uff7f\047\uff7f\050\uff7f\056\uff7f\001\002" +
    "\000\004\050\u0190\001\002\000\050\003\uff80\004\uff80\005" +
    "\uff80\006\uff80\010\uff80\012\uff80\013\uff80\014\uff80\031\uff80" +
    "\034\uff80\035\uff80\037\uff80\041\uff80\042\uff80\043\uff80\045" +
    "\uff80\047\uff80\050\uff80\056\uff80\001\002\000\004\050\u0190" +
    "\001\002\000\012\017\046\022\043\023\045\050\044\001" +
    "\002\000\052\003\uff7d\004\uff7d\005\uff7d\006\uff7d\010\uff7d" +
    "\012\uff7d\013\uff7d\014\uff7d\015\uff7d\031\uff7d\034\uff7d\035" +
    "\uff7d\037\uff7d\041\uff7d\042\uff7d\043\uff7d\045\uff7d\047\uff7d" +
    "\050\uff7d\056\uff7d\001\002\000\052\003\uff7e\004\uff7e\005" +
    "\uff7e\006\uff7e\010\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\031\uff7e\034\uff7e\035\uff7e\037\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\045\uff7e\047\uff7e\050\uff7e\056\uff7e\001\002\000\052" +
    "\003\uff82\004\uff82\005\uff82\006\uff82\010\uff82\012\uff82\013" +
    "\uff82\014\uff82\015\u0199\031\uff82\034\uff82\035\uff82\037\uff82" +
    "\041\uff82\042\uff82\043\uff82\045\uff82\047\uff82\050\uff82\056" +
    "\uff82\001\002\000\004\050\u0190\001\002\000\050\003\uff83" +
    "\004\uff83\005\uff83\006\uff83\010\uff83\012\uff83\013\uff83\014" +
    "\uff83\031\uff83\034\uff83\035\uff83\037\uff83\041\uff83\042\uff83" +
    "\043\uff83\045\uff83\047\uff83\050\uff83\056\uff83\001\002\000" +
    "\004\006\u019c\001\002\000\004\030\u019d\001\002\000\004" +
    "\002\ufffd\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\004\006\u01a0\001\002\000\004" +
    "\030\u01a1\001\002\000\004\002\ufffe\001\002\000\004\013" +
    "\u01a3\001\002\000\014\012\021\013\020\014\014\031\022" +
    "\045\023\001\002\000\004\006\u01a5\001\002\000\004\030" +
    "\u01a6\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u019a\005\024\006" +
    "\015\015\016\032\023\001\001\000\014\004\014\005\024" +
    "\006\015\015\016\032\023\001\001\000\004\016\u0185\001" +
    "\001\000\002\001\001\000\014\004\u017f\005\024\006\015" +
    "\015\016\032\023\001\001\000\014\004\u017e\005\024\006" +
    "\015\015\016\032\023\001\001\000\014\004\u017d\005\024" +
    "\006\015\015\016\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\026\005\024" +
    "\006\015\015\016\032\023\001\001\000\014\004\025\005" +
    "\024\006\015\015\016\032\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u013c\001\001\000\004\050" +
    "\031\001\001\000\002\001\001\000\006\043\034\044\u0134" +
    "\001\001\000\006\043\034\044\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\063" +
    "\001\001\000\004\037\055\001\001\000\002\001\001\000" +
    "\004\031\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u011d\001\001\000\024\003\100\007\103\015\072" +
    "\022\076\025\070\027\074\033\067\034\104\047\071\001" +
    "\001\000\002\001\001\000\024\003\u0118\007\103\015\072" +
    "\022\076\025\070\027\074\033\067\034\104\047\071\001" +
    "\001\000\024\003\u0117\007\103\015\072\022\076\025\070" +
    "\027\074\033\067\034\104\047\071\001\001\000\024\003" +
    "\u0116\007\103\015\072\022\076\025\070\027\074\033\067" +
    "\034\104\047\071\001\001\000\024\003\u0115\007\103\015" +
    "\072\022\076\025\070\027\074\033\067\034\104\047\071" +
    "\001\001\000\014\011\120\013\122\036\126\046\u0114\047" +
    "\133\001\001\000\024\003\u0113\007\103\015\072\022\076" +
    "\025\070\027\074\033\067\034\104\047\071\001\001\000" +
    "\020\011\120\013\122\023\340\024\252\036\126\046\251" +
    "\047\133\001\001\000\024\003\336\007\103\015\072\022" +
    "\076\025\070\027\074\033\067\034\104\047\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\300\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\024\003\277\007" +
    "\103\015\072\022\076\025\070\027\074\033\067\034\104" +
    "\047\071\001\001\000\024\003\276\007\103\015\072\022" +
    "\076\025\070\027\074\033\067\034\104\047\071\001\001" +
    "\000\030\003\240\006\242\007\103\015\072\022\076\025" +
    "\070\027\074\033\067\034\104\035\236\047\071\001\001" +
    "\000\004\035\201\001\001\000\004\021\174\001\001\000" +
    "\004\021\111\001\001\000\014\011\120\013\122\036\126" +
    "\046\173\047\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\120\013\122\017\131\020\125\036\126" +
    "\046\117\047\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\120\013\137" +
    "\036\126\046\136\047\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\120\013\122" +
    "\017\142\020\125\036\126\046\117\047\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\120\013\122\036\126\046\154\047\133\001\001\000" +
    "\014\011\120\013\122\036\126\046\147\047\133\001\001" +
    "\000\002\001\001\000\014\011\120\013\122\036\126\046" +
    "\153\047\133\001\001\000\014\011\120\013\122\036\126" +
    "\046\152\047\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\163" +
    "\036\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\120\013\122\020\170\036\126\046\117\047\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\120\013\122\036\126\046\176" +
    "\047\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\217\001\001\000\002\001\001" +
    "\000\014\011\120\013\122\036\126\046\210\047\133\001" +
    "\001\000\014\011\120\013\122\036\126\046\204\047\133" +
    "\001\001\000\002\001\001\000\024\003\206\007\103\015" +
    "\072\022\076\025\070\027\074\033\067\034\104\047\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\215\007\103\015\072\022\076\025\070" +
    "\027\074\033\067\034\104\047\071\001\001\000\024\003" +
    "\213\007\103\015\072\022\076\025\070\027\074\033\067" +
    "\034\104\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\120" +
    "\013\122\036\126\046\224\047\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\120\013\122\036\126" +
    "\046\223\047\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\120\013\122\036\126\046\232\047\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\120\013\122\036\126\046\231\047\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\234\007\103\015" +
    "\072\022\076\025\070\027\074\033\067\034\104\047\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\120\013\122\023\254\024\252\036\126" +
    "\046\251\047\133\001\001\000\002\001\001\000\024\003" +
    "\250\007\103\015\072\022\076\025\070\027\074\033\067" +
    "\034\104\047\071\001\001\000\024\003\247\007\103\015" +
    "\072\022\076\025\070\027\074\033\067\034\104\047\071" +
    "\001\001\000\030\003\240\006\242\007\103\015\072\022" +
    "\076\025\070\027\074\033\067\034\104\035\236\047\071" +
    "\001\001\000\004\021\245\001\001\000\014\011\120\013" +
    "\122\036\126\046\246\047\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\266\001" +
    "\001\000\002\001\001\000\016\011\120\013\122\024\260" +
    "\036\126\046\251\047\133\001\001\000\002\001\001\000" +
    "\024\003\256\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\120\013\122" +
    "\023\264\024\252\036\126\046\251\047\133\001\001\000" +
    "\020\011\120\013\122\023\263\024\252\036\126\046\251" +
    "\047\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\120\013\122\036\126\046\270" +
    "\047\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\120\013\122\036\126\046\272\047\133\001\001" +
    "\000\002\001\001\000\024\003\274\007\103\015\072\022" +
    "\076\025\070\027\074\033\067\034\104\047\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\120\013\122" +
    "\023\316\024\252\036\126\046\251\047\133\001\001\000" +
    "\020\011\120\013\122\023\304\024\252\036\126\046\251" +
    "\047\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\311\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\024\003\307\007" +
    "\103\015\072\022\076\025\070\027\074\033\067\034\104" +
    "\047\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\314\007\103" +
    "\015\072\022\076\025\070\027\074\033\067\034\104\047" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\320\007\103\015\072\022\076\025" +
    "\070\027\074\033\067\034\104\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\331\012\334\036\126\001\001\000\010" +
    "\011\331\012\332\036\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0106\001\001\000\004\050\343\001\001\000" +
    "\002\001\001\000\024\003\u0102\007\103\015\072\022\076" +
    "\025\070\027\074\033\067\034\104\047\071\001\001\000" +
    "\024\003\346\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\004\026\351\001" +
    "\001\000\002\001\001\000\020\011\120\013\122\023\356" +
    "\024\252\036\126\046\251\047\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\365\007\103\015\072\022\076" +
    "\025\070\027\074\033\067\034\104\047\071\001\001\000" +
    "\024\003\363\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\004\026\364\001" +
    "\001\000\002\001\001\000\004\026\366\001\001\000\002" +
    "\001\001\000\024\003\370\007\103\015\072\022\076\025" +
    "\070\027\074\033\067\034\104\047\071\001\001\000\004" +
    "\026\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\374\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\004\026\375\001" +
    "\001\000\002\001\001\000\024\003\u0101\007\103\015\072" +
    "\022\076\025\070\027\074\033\067\034\104\047\071\001" +
    "\001\000\024\003\u0100\007\103\015\072\022\076\025\070" +
    "\027\074\033\067\034\104\047\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\u0108\007\103\015\072\022\076\025\070" +
    "\027\074\033\067\034\104\047\071\001\001\000\004\026" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u010d\001\001\000\002\001\001\000" +
    "\024\003\u010f\007\103\015\072\022\076\025\070\027\074" +
    "\033\067\034\104\047\071\001\001\000\004\026\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\u011c\007\103\015\072\022\076\025\070\027\074\033" +
    "\067\034\104\047\071\001\001\000\024\003\u011b\007\103" +
    "\015\072\022\076\025\070\027\074\033\067\034\104\047" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0131\001\001\000\004\037\u0126\001" +
    "\001\000\002\001\001\000\006\042\u012a\045\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\u012a\045\u012c\001\001\000\002\001\001\000\004" +
    "\042\u0130\001\001\000\004\037\u012f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u012a" +
    "\045\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0137\001\001\000\002\001\001" +
    "\000\004\031\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\034" +
    "\044\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0141\001\001\000\002\001\001\000\004\031\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0160\001\001\000\004\050\u0148\001\001" +
    "\000\002\001\001\000\006\043\034\044\u015a\001\001\000" +
    "\006\043\034\044\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u014f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u0157\001\001\000\024\003\u0154\007\103\015\072\022" +
    "\076\025\070\027\074\033\067\034\104\047\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u015d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\034\044\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0176\015\u016f\001\001" +
    "\000\006\010\u016d\015\u016c\001\001\000\006\010\u0171\015" +
    "\u016f\001\001\000\002\001\001\000\006\010\u0170\015\u016f" +
    "\001\001\000\006\010\u0171\015\u016f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u017a\015\u016f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u0197\001\001\000" +
    "\004\037\u018a\001\001\000\002\001\001\000\006\014\u018e" +
    "\041\u0190\001\001\000\014\011\120\013\122\036\126\046" +
    "\u018d\047\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\u0192\041" +
    "\u0190\001\001\000\002\001\001\000\004\041\u0196\001\001" +
    "\000\004\037\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0199\041\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\u019e\005\024\006\015\015\016" +
    "\032\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\u01a3\005\024" +
    "\006\015\015\016\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();
    public TablaSimbolos tablaSimbolos = new TablaSimbolos(); 
    public int offset = 0;
    public int cantVarsCreadas = 0;    

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Nodo RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (md != null){
                        RESULT=md;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINSTRUC ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            Nodo node = new Nodo("STRUCTURE",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++; 
                            node.addHijo(s);                            
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTUREDECLA ::= STRUCTURE error saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCTUREDECLA ::= STRUCTURE identificador error STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("STRUCTURE INSTRUCTIONS",parser.cont);
                        parser.cont++;
                        node.addHijo(d);
                        node.addHijo(s);                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=s;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTINSTRUC ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                        Nodo node = new Nodo("VACIO",parser.cont);
                        parser.cont++;                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBPROCE ::= SUB identificador M PARENTESISL PARAMS PARENTESISR saltoLinea STATEMENTS END SUB 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p.getNodo());
                        }
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas - m.getNum());

                        tablaSimbolos.agregarID(id,p.getTipo()+"->void",0,"");
                        offset = m.getNum2();                        
                        cantVarsCreadas = m.getNum();                                                

                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBPROCE ::= SUB error M PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBPROCE ::= SUB identificador M error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBPROCE ::= SUB identificador M PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBPROCE ::= SUB identificador M PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea STATEMENTS END FUNCTION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p.getNodo() != null){
                            node.addHijo(p.getNodo());
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (s != null){
                            node.addHijo(s);
                        }

                        //agregar ambito y offset
                        tablaSimbolos.agregarAmbito(id+".", cantVarsCreadas - m.getNum());

                        tablaSimbolos.agregarID(id,p.getTipo()+"->"+t,0,"");
                        offset = m.getNum2();                        
                        cantVarsCreadas = m.getNum();

                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= FUNCTION error M PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNC ::= FUNCTION identificador M error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= VARPARAMS 
            {
              Objeto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;

                    Objeto retVal = new Objeto(node,"void");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,t,offset,"");

                        Objeto retVal = new Objeto(node, t+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());
                        node.addHijo(v.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+c.getAcumulada()+v.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,""); 

                        Objeto retVal = new Objeto(node, c.getTipo()+ c.getAcumulada());
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARPARAMS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("PARAMS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;

                        tablaSimbolos.agregarID(id,t,offset,""); 

                        Objeto retVal = new Objeto(node,t); 
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        RESULT = retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARPARAMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v.getNodo());

                    Objeto retVal = new Objeto(node, c.getTipo(), c.getAcumulada()+v.getAcumulada());
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARS2 ::= CANTVARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("VARS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        node.addHijo(c.getNodo());

                        tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, c.getTipo(),"x"+c.getTipo()+c.getAcumulada());                                                    

                        RESULT=retVal;   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CANTVARS2 ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("VARS",parser.cont);   
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;           
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        
                        tablaSimbolos.agregarID(id,t,offset,"");
                        offset += tablaSimbolos.sizeUltimo();
                        cantVarsCreadas += 1;

                        Objeto retVal = new Objeto(node, t,"x"+t);                                                          

                        RESULT=retVal;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENTS ::= saltoLinea STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (s != null){
                        RESULT = s;   
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENTS ::= EXIT SUB STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENTS ::= EXIT FUNCTION STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= ASIGN STATEMENTS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS ::= RETVAL STATEMENTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENTS ::= CALL STATEMENTS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMETNS",parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENTS ::= WRCONSOLE STATEMENTS 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENTS ::= IFSTATEMENT STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENTS ::= FORSTATEMENT STATEMENTS 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTS ::= DOWHILESTATE STATEMENTS 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("STATEMENTS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTS ::= error STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTS ::= error SUB STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTS ::= error FUNC STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    
                    int cantVars = cantVarsCreadas - m.getNum();
                    tablaSimbolos.agregarAmbito("IF.", cantVars);
                    offset -= tablaSimbolos.disminuirOffset(cantVars);

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFSTATEMENT ::= IF error THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFSTATEMENT ::= IF CONDICION error M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IFSTATEMENT ::= IF CONDICION THEN M error STATEMENTS SIFSTATEMENT END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SIFSTATEMENT ::= ELSEIF CONDICION THEN saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SIFSTATEMENT ::= ELSE saltoLinea STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIFSTATEMENT ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SIFSTATEMENT ::= ELSEIF error THEN saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIFSTATEMENT ::= ELSEIF CONDICION error saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIFSTATEMENT ::= ELSEIF CONDICION THEN error STATEMENTS SIFSTATEMENT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIFSTATEMENT ::= ELSE error STATEMENTS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DOWHILESTATE ::= DO WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DOWHILESTATE ::= error WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DOWHILESTATE ::= DO error CONDICION saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DOWHILESTATE ::= DO WHILE error saltoLinea STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DOWHILESTATE ::= DO WHILE CONDICION error STATEMENTS LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FORSTATEMENT ::= FOR COUNTER TO VALOR saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(v.getNodo());
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FORSTATEMENT ::= error COUNTER TO VALOR saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FORSTATEMENT ::= FOR error TO VALOR saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FORSTATEMENT ::= FOR COUNTER error VALOR saltoLinea STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FORSTATEMENT ::= FOR COUNTER TO VALOR error STATEMENTS NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETVAL ::= RETURN VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COUNTER ::= identificador OPASIGN VALOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v.getNodo());
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COUNTER ::= identificador AS INTEGERTYPE IGUAL VALOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo node = new Nodo("=",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            node.addHijo(new Nodo("INTEGER",parser.cont));
                            parser.cont++;
                            node.addHijo(v.getNodo());
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COUNTER ::= error AS INTEGERTYPE IGUAL VALOR 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }      
                    Objeto retVal = new Objeto(node,id);              
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Objeto RESULT =null;
		 errores.add("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMCALL ::= VARCALL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMCALL ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARCALL ::= VALOR COMA VARCALL 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(val.getNodo());
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARCALL ::= VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v.getNodo();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARCALL ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= CONDICIONP AND CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= CONDICIONP OR CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= NOT CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = c; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 
                    RESULT="=";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGN ::= identificador OPASIGN VALOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v.getNodo());
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGN ::= identificador IGUAL READ 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("read.console",parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGN ::= LLAMADOSTRUC OPASIGN VALOR 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(l,parser.cont));                    
                    parser.cont++;                
                    o.addHijo(v.getNodo());
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(v2,parser.cont));
                    parser.cont++;
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALUNIRSTR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALUNIRSTR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUNIRSTR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPASIGN ::= IGUAL 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPASIGN ::= OPMULTI IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPASIGN ::= OPADICION IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPARIT ::= OPARIT OPADICION VALOR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(o);                    
                    RESULT = node;                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPARIT ::= OPARIT OPMULTI VALOR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(o);                    
                    RESULT = node;                 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPARIT ::= PARENTESISL OPARIT PARENTESISR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPARIT ::= VALOR OPADICION VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPARIT ::= VALOR OPMULTI VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    node.addHijo(v2.getNodo());
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR ::= INTEGER 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(i,parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"INTEGER");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR ::= STRING 
            {
              Objeto RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"STRING");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR ::= TRUE 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR ::= FALSE 
            {
              Objeto RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"BOOLEAN");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR ::= NEW CALL 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= CALL 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= UNIRSTRNG 
            {
              Objeto RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Objeto retVal = new Objeto(ustr,"STRING");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR ::= identificador 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //buscar id y asignarle ese el tipo a Objeto
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    Objeto retVal = new Objeto(node,"POR_DETERMINAR");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALOR ::= OPARIT 
            {
              Objeto RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Objeto retVal = new Objeto(o,"INTEGER");
                    RESULT = retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= DIM T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    RESULT=t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= DIM error 
            {
              Nodo RESULT =null;
		 errores.add("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // T ::= identificador AS TIPO IGUAL VALOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v.getNodo());
                    
                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // T ::= identificador AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // T ::= identificador COMA CANTVARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                                         
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());


                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // T ::= identificador AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;

                    //agregar ambito y offset
                    tablaSimbolos.agregarID(id,t,offset,"");
                    offset += tablaSimbolos.sizeUltimo();  
                    cantVarsCreadas += 1;

                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VARS ::= CANTVARS COMA VARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c.getNodo());
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VARS ::= CANTVARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = c.getNodo();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANTVARS ::= identificador COMA CANTVARS 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c.getNodo());                                      

                    tablaSimbolos.agregarID(id,c.getTipo(),offset,"");

                    Objeto retVal = new Objeto(node, c.getTipo());                    
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;
                    
                    RESULT=retVal;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CANTVARS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                    Nodo node = new Nodo("VARS",parser.cont);   
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;           
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;    

                           

                    tablaSimbolos.agregarID(id,t,offset,"");       

                    Objeto retVal = new Objeto(node, t);                                  
                    offset += tablaSimbolos.sizeUltimo();
                    cantVarsCreadas += 1;

                    RESULT=retVal;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALWR ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALWR ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALWR ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ustr; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALWR ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT=new Marcador(cantVarsCreadas,offset); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
