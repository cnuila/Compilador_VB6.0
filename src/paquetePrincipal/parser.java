
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\045\010" +
    "\000\002\045\010\000\002\045\010\000\002\045\010\000" +
    "\002\045\010\000\002\005\013\000\002\005\013\000\002" +
    "\005\013\000\002\005\013\000\002\005\013\000\002\043" +
    "\004\000\002\043\004\000\002\043\005\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\005\000\002\043\002\000\002\041\012\000\002\041" +
    "\012\000\002\041\012\000\002\041\012\000\002\041\012" +
    "\000\002\040\010\000\002\040\005\000\002\040\002\000" +
    "\002\040\010\000\002\040\010\000\002\040\010\000\002" +
    "\040\005\000\002\050\010\000\002\050\010\000\002\050" +
    "\010\000\002\050\010\000\002\050\010\000\002\047\011" +
    "\000\002\047\011\000\002\047\011\000\002\047\011\000" +
    "\002\047\011\000\002\006\015\000\002\006\015\000\002" +
    "\006\015\000\002\006\015\000\002\006\015\000\002\006" +
    "\015\000\002\006\015\000\002\044\004\000\002\044\004" +
    "\000\002\044\005\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\002\000\002\044" +
    "\005\000\002\044\004\000\002\042\012\000\002\042\012" +
    "\000\002\042\012\000\002\042\012\000\002\042\012\000" +
    "\002\037\010\000\002\037\006\000\002\037\002\000\002" +
    "\037\010\000\002\037\010\000\002\037\010\000\002\037" +
    "\005\000\002\052\010\000\002\052\010\000\002\052\010" +
    "\000\002\052\010\000\002\052\010\000\002\051\011\000" +
    "\002\051\011\000\002\051\011\000\002\051\011\000\002" +
    "\051\011\000\002\036\004\000\002\023\003\000\002\023" +
    "\003\000\002\053\003\000\002\053\007\000\002\053\007" +
    "\000\002\020\006\000\002\020\006\000\002\021\003\000" +
    "\002\021\002\000\002\022\005\000\002\022\003\000\002" +
    "\022\004\000\002\034\005\000\002\034\005\000\002\034" +
    "\004\000\002\034\003\000\002\035\005\000\002\060\003" +
    "\000\002\060\003\000\002\033\003\000\002\033\003\000" +
    "\002\032\003\000\002\032\002\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\031\005\000\002\046" +
    "\005\000\002\046\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\055\005\000\002\055\005\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\026\003\000\002\026\004" +
    "\000\002\026\004\000\002\025\003\000\002\011\005\000" +
    "\002\011\003\000\002\017\005\000\002\017\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\003\000\002\014\004\000\002\014\004" +
    "\000\002\015\005\000\002\015\007\000\002\015\011\000" +
    "\002\015\007\000\002\015\005\000\002\013\007\000\002" +
    "\013\005\000\002\013\004\000\002\012\005\000\002\012" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\006\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\007\006\000\002\007\006\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0226\000\006\003\004\031\005\001\002\000\004\051" +
    "\u0224\001\002\000\006\003\010\051\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\014" +
    "\u0220\001\002\000\006\003\012\014\013\001\002\000\014" +
    "\012\021\014\020\015\014\032\022\046\023\001\002\000" +
    "\014\012\021\014\020\015\014\032\022\046\023\001\002" +
    "\000\006\003\u01ff\051\u0200\001\002\000\006\003\u01f9\006" +
    "\u01fa\001\002\000\014\012\021\014\020\015\014\032\022" +
    "\046\023\001\002\000\014\012\021\014\020\015\014\032" +
    "\022\046\023\001\002\000\014\012\021\014\020\015\014" +
    "\032\022\046\023\001\002\000\006\003\u01e4\051\u01e5\001" +
    "\002\000\006\003\u0148\051\u0149\001\002\000\006\003\042" +
    "\051\043\001\002\000\014\012\021\014\020\015\014\032" +
    "\022\046\023\001\002\000\014\012\021\014\031\015\014" +
    "\032\022\046\023\001\002\000\014\012\021\014\031\015" +
    "\014\032\022\046\023\001\002\000\006\003\ufff7\006\ufff7" +
    "\001\002\000\014\012\021\014\031\015\014\032\022\046" +
    "\023\001\002\000\020\003\ufff0\006\ufff0\012\021\014\031" +
    "\015\014\032\022\046\023\001\002\000\014\012\021\014" +
    "\031\015\014\032\022\046\023\001\002\000\014\012\021" +
    "\014\031\015\014\032\022\046\023\001\002\000\006\003" +
    "\ufff3\006\ufff3\001\002\000\006\003\ufff1\006\ufff1\001\002" +
    "\000\006\003\ufff4\006\ufff4\001\002\000\006\003\ufff5\006" +
    "\ufff5\001\002\000\006\003\ufff2\006\ufff2\001\002\000\006" +
    "\003\ufff6\006\ufff6\001\002\000\004\033\u013f\001\002\000" +
    "\006\003\044\033\045\001\002\000\006\034\uff82\051\047" +
    "\001\002\000\010\003\uff82\034\uff82\051\047\001\002\000" +
    "\006\003\uff83\034\uff83\001\002\000\010\003\uff56\016\uff56" +
    "\017\uff56\001\002\000\010\003\u0132\016\u0130\017\u0131\001" +
    "\002\000\006\003\053\034\052\001\002\000\006\003\u011c" +
    "\017\u011b\001\002\000\004\017\054\001\002\000\012\020" +
    "\060\023\055\024\057\051\056\001\002\000\054\003\uff4f" +
    "\004\uff4f\005\uff4f\006\uff4f\010\uff4f\012\uff4f\013\uff4f\014" +
    "\uff4f\015\uff4f\016\uff4f\032\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\040\uff4f\042\uff4f\043\uff4f\044\uff4f\046\uff4f\050\uff4f\051" +
    "\uff4f\001\002\000\054\003\uff4c\004\uff4c\005\uff4c\006\uff4c" +
    "\010\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\032" +
    "\uff4c\034\uff4c\035\uff4c\036\uff4c\040\uff4c\042\uff4c\043\uff4c" +
    "\044\uff4c\046\uff4c\050\uff4c\051\uff4c\001\002\000\054\003" +
    "\uff4e\004\uff4e\005\uff4e\006\uff4e\010\uff4e\012\uff4e\013\uff4e" +
    "\014\uff4e\015\uff4e\016\uff4e\032\uff4e\034\uff4e\035\uff4e\036" +
    "\uff4e\040\uff4e\042\uff4e\043\uff4e\044\uff4e\046\uff4e\050\uff4e" +
    "\051\uff4e\001\002\000\054\003\uff4d\004\uff4d\005\uff4d\006" +
    "\uff4d\010\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d" +
    "\032\uff4d\034\uff4d\035\uff4d\036\uff4d\040\uff4d\042\uff4d\043" +
    "\uff4d\044\uff4d\046\uff4d\050\uff4d\051\uff4d\001\002\000\004" +
    "\014\062\001\002\000\032\003\105\004\074\006\uffb2\013" +
    "\107\014\101\015\014\035\063\036\106\042\100\044\071" +
    "\050\075\051\110\001\002\000\004\046\u0119\001\002\000" +
    "\042\003\105\004\074\005\uffb2\006\uffb2\010\uffb2\013\107" +
    "\014\101\015\014\035\063\036\106\040\uffb2\042\100\043" +
    "\uffb2\044\071\050\075\051\110\001\002\000\042\003\105" +
    "\004\074\005\uffb2\006\uffb2\010\uffb2\013\107\014\101\015" +
    "\014\035\063\036\106\040\uffb2\042\100\043\uffb2\044\071" +
    "\050\075\051\110\001\002\000\042\003\uff81\004\uff81\005" +
    "\uff81\006\uff81\010\uff81\013\uff81\014\uff81\015\uff81\035\uff81" +
    "\036\uff81\040\uff81\042\uff81\043\uff81\044\uff81\050\uff81\051" +
    "\uff81\001\002\000\042\003\105\004\074\005\uffb2\006\uffb2" +
    "\010\uffb2\013\107\014\101\015\014\035\063\036\106\040" +
    "\uffb2\042\100\043\uffb2\044\071\050\075\051\110\001\002" +
    "\000\042\003\105\004\074\005\uffb2\006\uffb2\010\uffb2\013" +
    "\107\014\101\015\014\035\063\036\106\040\uffb2\042\100" +
    "\043\uffb2\044\071\050\075\051\110\001\002\000\022\003" +
    "\135\021\127\022\133\033\134\047\120\051\140\052\130" +
    "\053\136\001\002\000\042\003\105\004\074\005\uffb2\006" +
    "\uffb2\010\uffb2\013\107\014\101\015\014\035\063\036\106" +
    "\040\uffb2\042\100\043\uffb2\044\071\050\075\051\110\001" +
    "\002\000\004\006\u0111\001\002\000\024\003\337\021\127" +
    "\022\133\027\252\033\134\047\120\051\140\052\130\053" +
    "\136\001\002\000\006\003\325\033\326\001\002\000\042" +
    "\003\uff7f\004\uff7f\005\uff7f\006\uff7f\010\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\035\uff7f\036\uff7f\040\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\050\uff7f\051\uff7f\001\002\000\042\003\uff80\004" +
    "\uff80\005\uff80\006\uff80\010\uff80\013\uff80\014\uff80\015\uff80" +
    "\035\uff80\036\uff80\040\uff80\042\uff80\043\uff80\044\uff80\050" +
    "\uff80\051\uff80\001\002\000\006\003\304\041\305\001\002" +
    "\000\042\003\105\004\074\005\uffb2\006\uffb2\010\uffb2\013" +
    "\107\014\101\015\014\035\063\036\106\040\uffb2\042\100" +
    "\043\uffb2\044\071\050\075\051\110\001\002\000\042\003" +
    "\105\004\074\005\uffb2\006\uffb2\010\uffb2\013\107\014\101" +
    "\015\014\035\063\036\106\040\uffb2\042\100\043\uffb2\044" +
    "\071\050\075\051\110\001\002\000\042\003\105\004\074" +
    "\005\uffb2\006\uffb2\010\uffb2\013\107\014\101\015\014\035" +
    "\063\036\106\040\uffb2\042\100\043\uffb2\044\071\050\075" +
    "\051\110\001\002\000\042\003\105\004\074\005\uffb2\006" +
    "\uffb2\010\uffb2\013\107\014\101\015\014\035\063\036\106" +
    "\040\uffb2\042\100\043\uffb2\044\071\050\075\051\110\001" +
    "\002\000\056\003\246\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\011\222\013\107\014\101\015\014\033\147\035\063\036" +
    "\106\040\uffb2\041\242\042\100\043\uffb2\044\071\046\023" +
    "\050\075\051\247\054\112\055\116\001\002\000\006\003" +
    "\201\051\202\001\002\000\010\011\175\054\112\055\116" +
    "\001\002\000\014\003\113\011\114\033\115\054\112\055" +
    "\116\001\002\000\012\003\145\033\134\051\146\053\136" +
    "\001\002\000\004\011\172\001\002\000\012\003\145\033" +
    "\134\051\146\053\136\001\002\000\022\003\uff6e\021\127" +
    "\022\133\033\uff6e\047\120\051\uff6e\052\130\053\uff6e\001" +
    "\002\000\024\003\135\021\127\022\133\033\134\034\uff90" +
    "\047\120\051\140\052\130\053\136\001\002\000\004\011" +
    "\117\001\002\000\012\003\uff6d\033\uff6d\051\uff6d\053\uff6d" +
    "\001\002\000\060\003\uff77\004\uff77\005\uff77\006\uff77\007" +
    "\uff77\010\uff77\011\uff77\013\uff77\014\uff77\015\uff77\016\uff77" +
    "\025\uff77\026\uff77\034\uff77\035\uff77\036\uff77\040\uff77\042" +
    "\uff77\043\uff77\044\uff77\050\uff77\051\uff77\056\uff77\001\002" +
    "\000\010\003\uff8e\016\uff8e\034\uff8e\001\002\000\004\034" +
    "\167\001\002\000\074\003\uff64\004\uff64\005\uff64\006\uff64" +
    "\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\025\uff64\026\uff64\032\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\042\uff64\043\uff64\044\uff64\046" +
    "\uff64\050\uff64\051\uff64\054\uff64\055\uff64\056\uff64\001\002" +
    "\000\074\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010" +
    "\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\025\uff69\026\uff69\032\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\042\uff69\043\uff69\044\uff69\046\uff69\050\uff69" +
    "\051\uff69\054\uff69\055\152\056\uff69\001\002\000\074\003" +
    "\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67" +
    "\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\025\uff67\026" +
    "\uff67\032\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67" +
    "\042\uff67\043\uff67\044\uff67\046\uff67\050\uff67\051\uff67\054" +
    "\uff67\055\uff67\056\uff67\001\002\000\046\003\uff98\004\uff98" +
    "\005\uff98\006\uff98\010\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\034\uff98\035\uff98\036\uff98\040\uff98\042\uff98\043\uff98" +
    "\044\uff98\050\uff98\051\uff98\001\002\000\060\003\uff7a\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\025\uff7a\026\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\040\uff7a\042\uff7a\043\uff7a\044\uff7a\050\uff7a" +
    "\051\uff7a\056\uff7a\001\002\000\062\003\uff7b\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\025\uff7b\026\uff7b\034\uff7b\035\uff7b\036" +
    "\uff7b\040\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff74\050\uff7b" +
    "\051\uff7b\056\uff7b\001\002\000\010\003\165\016\164\034" +
    "\uff91\001\002\000\060\003\uff78\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\025\uff78\026\uff78\034\uff78\035\uff78\036\uff78\040\uff78" +
    "\042\uff78\043\uff78\044\uff78\050\uff78\051\uff78\056\uff78\001" +
    "\002\000\060\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\013\uff79\014\uff79\015\uff79\016\uff79\025" +
    "\uff79\026\uff79\034\uff79\035\uff79\036\uff79\040\uff79\042\uff79" +
    "\043\uff79\044\uff79\050\uff79\051\uff79\056\uff79\001\002\000" +
    "\012\003\145\033\134\051\146\053\136\001\002\000\070" +
    "\003\uff62\004\uff62\005\uff62\006\uff62\007\uff62\010\uff62\011" +
    "\uff62\013\uff62\014\uff62\015\uff62\016\uff62\025\uff62\026\uff62" +
    "\033\147\034\uff62\035\uff62\036\uff62\040\uff62\042\uff62\043" +
    "\uff62\044\uff62\045\uff72\050\uff62\051\uff62\054\uff62\055\uff62" +
    "\056\uff62\001\002\000\074\003\uff66\004\uff66\005\uff66\006" +
    "\uff66\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66" +
    "\015\uff66\016\uff66\025\uff66\026\uff66\032\uff66\034\uff66\035" +
    "\uff66\036\uff66\037\uff66\040\uff66\042\uff66\043\uff66\044\uff66" +
    "\046\uff66\050\uff66\051\uff66\054\uff66\055\uff66\056\uff66\001" +
    "\002\000\004\045\154\001\002\000\070\003\uff65\004\uff65" +
    "\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65\013\uff65\014" +
    "\uff65\015\uff65\016\uff65\025\uff65\026\uff65\033\115\034\uff65" +
    "\035\uff65\036\uff65\040\uff65\042\uff65\043\uff65\044\uff65\045" +
    "\uff73\050\uff65\051\uff65\054\uff65\055\uff65\056\uff65\001\002" +
    "\000\064\003\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010" +
    "\uff6b\011\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\025\uff6b" +
    "\026\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\042" +
    "\uff6b\043\uff6b\044\uff6b\050\uff6b\051\uff6b\054\143\056\uff6b" +
    "\001\002\000\046\003\uff97\004\uff97\005\uff97\006\uff97\010" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\034\uff97\035\uff97" +
    "\036\uff97\040\uff97\042\uff97\043\uff97\044\uff97\050\uff97\051" +
    "\uff97\001\002\000\012\003\145\033\134\051\146\053\136" +
    "\001\002\000\074\003\uff6a\004\uff6a\005\uff6a\006\uff6a\007" +
    "\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\025\uff6a\026\uff6a\032\uff6a\034\uff6a\035\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\042\uff6a\043\uff6a\044\uff6a\046\uff6a" +
    "\050\uff6a\051\uff6a\054\uff6a\055\152\056\uff6a\001\002\000" +
    "\076\003\uff62\004\uff62\005\uff62\006\uff62\007\uff62\010\uff62" +
    "\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\025" +
    "\uff62\026\uff62\032\uff62\033\147\034\uff62\035\uff62\036\uff62" +
    "\037\uff62\040\uff62\042\uff62\043\uff62\044\uff62\046\uff62\050" +
    "\uff62\051\uff62\054\uff62\055\uff62\056\uff62\001\002\000\076" +
    "\003\uff65\004\uff65\005\uff65\006\uff65\007\uff65\010\uff65\011" +
    "\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65\025\uff65" +
    "\026\uff65\032\uff65\033\115\034\uff65\035\uff65\036\uff65\037" +
    "\uff65\040\uff65\042\uff65\043\uff65\044\uff65\046\uff65\050\uff65" +
    "\051\uff65\054\uff65\055\uff65\056\uff65\001\002\000\024\003" +
    "\135\021\127\022\133\033\134\034\uff90\047\120\051\140" +
    "\052\130\053\136\001\002\000\004\034\151\001\002\000" +
    "\074\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\025" +
    "\uff92\026\uff92\032\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\042\uff92\043\uff92\044\uff92\046\uff92\050\uff92\051" +
    "\uff92\054\uff92\055\uff92\056\uff92\001\002\000\012\003\145" +
    "\033\134\051\146\053\136\001\002\000\074\003\uff68\004" +
    "\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68" +
    "\013\uff68\014\uff68\015\uff68\016\uff68\025\uff68\026\uff68\032" +
    "\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\042\uff68" +
    "\043\uff68\044\uff68\046\uff68\050\uff68\051\uff68\054\uff68\055" +
    "\uff68\056\uff68\001\002\000\010\003\156\051\157\052\155" +
    "\001\002\000\070\003\uff74\004\uff74\005\uff74\006\uff74\007" +
    "\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74" +
    "\016\uff74\025\uff74\026\uff74\032\uff74\034\uff74\035\uff74\036" +
    "\uff74\040\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74" +
    "\050\uff74\051\uff74\056\uff74\001\002\000\070\003\uff72\004" +
    "\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72" +
    "\013\uff72\014\uff72\015\uff72\016\uff72\025\uff72\026\uff72\032" +
    "\uff72\034\uff72\035\uff72\036\uff72\040\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\050\uff72\051\uff72\056\uff72\001" +
    "\002\000\070\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\025\uff73\026\uff73\032\uff73\034\uff73\035\uff73\036\uff73" +
    "\040\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\050" +
    "\uff73\051\uff73\056\uff73\001\002\000\070\003\uff75\004\uff75" +
    "\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013" +
    "\uff75\014\uff75\015\uff75\016\uff75\025\uff75\026\uff75\032\uff75" +
    "\034\uff75\035\uff75\036\uff75\040\uff75\042\uff75\043\uff75\044" +
    "\uff75\045\154\046\uff75\050\uff75\051\uff75\056\uff75\001\002" +
    "\000\066\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010" +
    "\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\025\uff76\026\uff76\032\uff76\034\uff76\035\uff76\036\uff76\040" +
    "\uff76\042\uff76\043\uff76\044\uff76\046\uff76\050\uff76\051\uff76" +
    "\056\uff76\001\002\000\006\034\163\054\143\001\002\000" +
    "\074\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63" +
    "\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\025" +
    "\uff63\026\uff63\032\uff63\034\uff63\035\uff63\036\uff63\037\uff63" +
    "\040\uff63\042\uff63\043\uff63\044\uff63\046\uff63\050\uff63\051" +
    "\uff63\054\uff63\055\uff63\056\uff63\001\002\000\022\003\135" +
    "\021\127\022\133\033\134\047\120\051\140\052\130\053" +
    "\136\001\002\000\010\003\uff8d\016\uff8d\034\uff8d\001\002" +
    "\000\010\003\uff8f\016\uff8f\034\uff8f\001\002\000\074\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\025\uff93\026" +
    "\uff93\032\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\042\uff93\043\uff93\044\uff93\046\uff93\050\uff93\051\uff93\054" +
    "\uff93\055\uff93\056\uff93\001\002\000\042\003\uff7e\004\uff7e" +
    "\005\uff7e\006\uff7e\010\uff7e\013\uff7e\014\uff7e\015\uff7e\035" +
    "\uff7e\036\uff7e\040\uff7e\042\uff7e\043\uff7e\044\uff7e\050\uff7e" +
    "\051\uff7e\001\002\000\044\003\uff70\004\uff70\005\uff70\006" +
    "\uff70\010\uff70\013\uff70\014\uff70\015\uff70\035\uff70\036\uff70" +
    "\037\uff70\040\uff70\042\uff70\043\uff70\044\uff70\050\uff70\051" +
    "\uff70\001\002\000\012\003\uff6c\033\uff6c\051\uff6c\053\uff6c" +
    "\001\002\000\044\003\uff71\004\uff71\005\uff71\006\uff71\010" +
    "\uff71\013\uff71\014\uff71\015\uff71\035\uff71\036\uff71\037\uff71" +
    "\040\uff71\042\uff71\043\uff71\044\uff71\050\uff71\051\uff71\001" +
    "\002\000\012\003\145\033\134\051\146\053\136\001\002" +
    "\000\022\003\uff6e\021\127\022\133\033\uff6e\047\120\051" +
    "\uff6e\052\130\053\uff6e\001\002\000\042\003\uff7d\004\uff7d" +
    "\005\uff7d\006\uff7d\010\uff7d\013\uff7d\014\uff7d\015\uff7d\035" +
    "\uff7d\036\uff7d\040\uff7d\042\uff7d\043\uff7d\044\uff7d\050\uff7d" +
    "\051\uff7d\001\002\000\042\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\010\uff7c\013\uff7c\014\uff7c\015\uff7c\035\uff7c\036\uff7c" +
    "\040\uff7c\042\uff7c\043\uff7c\044\uff7c\050\uff7c\051\uff7c\001" +
    "\002\000\006\003\uff96\037\uff96\001\002\000\014\011\222" +
    "\017\230\037\227\054\112\055\116\001\002\000\014\003" +
    "\113\011\222\017\221\054\112\055\116\001\002\000\006" +
    "\003\205\037\204\001\002\000\012\003\145\033\134\051" +
    "\146\053\136\001\002\000\012\003\145\033\134\051\146" +
    "\053\136\001\002\000\006\014\207\054\143\001\002\000" +
    "\032\003\105\004\074\013\107\014\101\015\014\035\063" +
    "\036\106\040\uffb2\042\100\044\071\050\075\051\110\001" +
    "\002\000\004\040\211\001\002\000\042\003\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\010\uff9b\013\uff9b\014\uff9b\015\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\042\uff9b\043\uff9b\044\uff9b\050\uff9b" +
    "\051\uff9b\001\002\000\010\003\213\014\214\054\143\001" +
    "\002\000\032\003\105\004\074\013\107\014\101\015\014" +
    "\035\063\036\106\040\uffb2\042\100\044\071\050\075\051" +
    "\110\001\002\000\032\003\105\004\074\013\107\014\101" +
    "\015\014\035\063\036\106\040\uffb2\042\100\044\071\050" +
    "\075\051\110\001\002\000\004\040\216\001\002\000\042" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\010\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\035\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\050\uff9e\051\uff9e\001\002\000\004\040\220\001" +
    "\002\000\042\003\uff9a\004\uff9a\005\uff9a\006\uff9a\010\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\035\uff9a\036\uff9a\040\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\050\uff9a\051\uff9a\001\002\000\004" +
    "\023\223\001\002\000\012\003\uff6e\033\uff6e\051\uff6e\053" +
    "\uff6e\001\002\000\004\011\224\001\002\000\012\003\145" +
    "\033\134\051\146\053\136\001\002\000\010\003\uff95\037" +
    "\uff95\054\143\001\002\000\012\003\145\033\134\051\146" +
    "\053\136\001\002\000\012\003\145\033\134\051\146\053" +
    "\136\001\002\000\004\023\231\001\002\000\004\011\232" +
    "\001\002\000\012\003\145\033\134\051\146\053\136\001" +
    "\002\000\010\003\uff94\037\uff94\054\143\001\002\000\006" +
    "\014\235\054\143\001\002\000\032\003\105\004\074\013" +
    "\107\014\101\015\014\035\063\036\106\040\uffb2\042\100" +
    "\044\071\050\075\051\110\001\002\000\004\040\237\001" +
    "\002\000\042\003\uff9c\004\uff9c\005\uff9c\006\uff9c\010\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\035\uff9c\036\uff9c\040\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\050\uff9c\051\uff9c\001\002\000\044" +
    "\003\uff6f\004\uff6f\005\uff6f\006\uff6f\010\uff6f\013\uff6f\014" +
    "\uff6f\015\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\050\uff6f\051\uff6f\001\002\000\004\037" +
    "\273\001\002\000\024\003\135\021\127\022\133\027\252" +
    "\033\134\047\120\051\140\052\130\053\136\001\002\000" +
    "\014\005\uffb0\006\uffb0\010\uffb0\040\uffb0\043\uffb0\001\002" +
    "\000\034\003\uff80\004\uff80\006\uff80\013\uff80\014\uff80\015" +
    "\uff80\035\uff80\036\uff80\037\uff96\042\uff80\044\uff80\050\uff80" +
    "\051\uff80\001\002\000\042\003\105\004\074\005\uffb2\006" +
    "\uffb2\010\uffb2\013\107\014\101\015\014\035\063\036\106" +
    "\040\uffb2\042\100\043\uffb2\044\071\050\075\051\110\001" +
    "\002\000\060\003\246\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\011\222\013\107\014\101\015\014\017\230\033\147\035" +
    "\063\036\106\040\uffb2\041\242\042\100\043\uffb2\044\071" +
    "\046\023\050\075\051\247\054\112\055\116\001\002\000" +
    "\016\003\113\011\114\017\221\033\115\054\112\055\116" +
    "\001\002\000\014\005\uffb1\006\uffb1\010\uffb1\040\uffb1\043" +
    "\uffb1\001\002\000\014\003\uff89\007\uff89\014\uff89\025\uff89" +
    "\026\uff89\001\002\000\022\003\135\021\127\022\133\033" +
    "\134\047\120\051\140\052\130\053\136\001\002\000\020" +
    "\003\uff85\007\uff85\011\uff85\014\uff85\025\uff85\026\uff85\056" +
    "\uff85\001\002\000\006\011\270\056\266\001\002\000\010" +
    "\014\261\025\257\026\260\001\002\000\020\003\uff84\007" +
    "\uff84\011\uff84\014\uff84\025\uff84\026\uff84\056\uff84\001\002" +
    "\000\022\003\135\021\127\022\133\033\134\047\120\051" +
    "\140\052\130\053\136\001\002\000\022\003\135\021\127" +
    "\022\133\033\134\047\120\051\140\052\130\053\136\001" +
    "\002\000\032\003\105\004\074\013\107\014\101\015\014" +
    "\035\063\036\106\042\100\043\uffb2\044\071\050\075\051" +
    "\110\001\002\000\004\043\263\001\002\000\042\003\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\010\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\035\uffa2\036\uffa2\040\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\050\uffa2\051\uffa2\001\002\000\014\003\uff8b\007\uff8b\014" +
    "\uff8b\025\uff8b\026\uff8b\001\002\000\014\003\uff8c\007\uff8c" +
    "\014\uff8c\025\uff8c\026\uff8c\001\002\000\022\003\uff87\021" +
    "\uff87\022\uff87\033\uff87\047\uff87\051\uff87\052\uff87\053\uff87" +
    "\001\002\000\022\003\135\021\127\022\133\033\134\047" +
    "\120\051\140\052\130\053\136\001\002\000\022\003\uff86" +
    "\021\uff86\022\uff86\033\uff86\047\uff86\051\uff86\052\uff86\053" +
    "\uff86\001\002\000\014\003\uff88\007\uff88\014\uff88\025\uff88" +
    "\026\uff88\001\002\000\014\003\uff8a\007\uff8a\014\uff8a\025" +
    "\uff8a\026\uff8a\001\002\000\012\003\145\033\134\051\146" +
    "\053\136\001\002\000\006\014\275\054\143\001\002\000" +
    "\032\003\105\004\074\013\107\014\101\015\014\035\063" +
    "\036\106\040\uffb2\042\100\044\071\050\075\051\110\001" +
    "\002\000\004\040\277\001\002\000\042\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\010\uff9d\013\uff9d\014\uff9d\015\uff9d\035" +
    "\uff9d\036\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d\050\uff9d" +
    "\051\uff9d\001\002\000\014\005\uffb4\006\uffb4\010\uffb4\040" +
    "\uffb4\043\uffb4\001\002\000\014\005\uffb6\006\uffb6\010\uffb6" +
    "\040\uffb6\043\uffb6\001\002\000\014\005\uffb5\006\uffb5\010" +
    "\uffb5\040\uffb5\043\uffb5\001\002\000\014\005\uffbb\006\uffbb" +
    "\010\uffbb\040\uffbb\043\uffbb\001\002\000\024\003\135\021" +
    "\127\022\133\027\252\033\134\047\120\051\140\052\130" +
    "\053\136\001\002\000\024\003\306\021\127\022\133\027" +
    "\252\033\134\047\120\051\140\052\130\053\136\001\002" +
    "\000\020\011\uff62\014\316\033\147\045\uff72\054\uff62\055" +
    "\uff62\056\uff62\001\002\000\012\003\310\014\311\025\257" +
    "\026\260\001\002\000\032\003\105\004\074\013\107\014" +
    "\101\015\014\035\063\036\106\042\100\043\uffb2\044\071" +
    "\050\075\051\110\001\002\000\032\003\105\004\074\013" +
    "\107\014\101\015\014\035\063\036\106\042\100\043\uffb2" +
    "\044\071\050\075\051\110\001\002\000\004\043\313\001" +
    "\002\000\042\003\uffa3\004\uffa3\005\uffa3\006\uffa3\010\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\035\uffa3\036\uffa3\040\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\050\uffa3\051\uffa3\001\002\000\004" +
    "\043\315\001\002\000\042\003\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\010\uff9f\013\uff9f\014\uff9f\015\uff9f\035\uff9f\036\uff9f" +
    "\040\uff9f\042\uff9f\043\uff9f\044\uff9f\050\uff9f\051\uff9f\001" +
    "\002\000\032\003\105\004\074\013\107\014\101\015\014" +
    "\035\063\036\106\042\100\043\uffb2\044\071\050\075\051" +
    "\110\001\002\000\004\043\320\001\002\000\042\003\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\010\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\050\uffa0\051\uffa0\001\002\000\010\014\322\025\257\026" +
    "\260\001\002\000\032\003\105\004\074\013\107\014\101" +
    "\015\014\035\063\036\106\042\100\043\uffb2\044\071\050" +
    "\075\051\110\001\002\000\004\043\324\001\002\000\042" +
    "\003\uffa1\004\uffa1\005\uffa1\006\uffa1\010\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\035\uffa1\036\uffa1\040\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\050\uffa1\051\uffa1\001\002\000\010\003\330\051" +
    "\331\052\327\001\002\000\010\003\330\051\331\052\327" +
    "\001\002\000\006\034\uff48\045\uff74\001\002\000\006\034" +
    "\uff46\045\uff72\001\002\000\006\034\uff49\045\uff73\001\002" +
    "\000\004\034\uff47\001\002\000\004\034\334\001\002\000" +
    "\042\003\uff4b\004\uff4b\005\uff4b\006\uff4b\010\uff4b\013\uff4b" +
    "\014\uff4b\015\uff4b\035\uff4b\036\uff4b\040\uff4b\042\uff4b\043" +
    "\uff4b\044\uff4b\050\uff4b\051\uff4b\001\002\000\004\034\336" +
    "\001\002\000\042\003\uff4a\004\uff4a\005\uff4a\006\uff4a\010" +
    "\uff4a\013\uff4a\014\uff4a\015\uff4a\035\uff4a\036\uff4a\040\uff4a" +
    "\042\uff4a\043\uff4a\044\uff4a\050\uff4a\051\uff4a\001\002\000" +
    "\020\007\u010b\011\uff62\033\147\045\uff72\054\uff62\055\uff62" +
    "\056\uff62\001\002\000\012\003\342\007\341\025\257\026" +
    "\260\001\002\000\006\003\u0100\014\u0101\001\002\000\004" +
    "\014\343\001\002\000\036\003\105\004\074\005\uffb2\006" +
    "\uffb2\010\uffb2\013\107\014\101\015\014\035\063\036\106" +
    "\042\100\044\071\050\075\051\110\001\002\000\010\005" +
    "\347\006\uffa8\010\346\001\002\000\004\006\376\001\002" +
    "\000\024\003\355\021\127\022\133\027\252\033\134\047" +
    "\120\051\140\052\130\053\136\001\002\000\006\003\350" +
    "\014\351\001\002\000\010\005\347\006\uffa8\010\346\001" +
    "\002\000\036\003\105\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\042\100\044" +
    "\071\050\075\051\110\001\002\000\010\005\347\006\uffa8" +
    "\010\346\001\002\000\004\006\uffa9\001\002\000\004\006" +
    "\uffa4\001\002\000\020\007\372\011\uff62\033\147\045\uff72" +
    "\054\uff62\055\uff62\056\uff62\001\002\000\012\003\357\007" +
    "\360\025\257\026\260\001\002\000\004\014\367\001\002" +
    "\000\006\003\361\014\362\001\002\000\036\003\105\004" +
    "\074\005\uffb2\006\uffb2\010\uffb2\013\107\014\101\015\014" +
    "\035\063\036\106\042\100\044\071\050\075\051\110\001" +
    "\002\000\036\003\105\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\042\100\044" +
    "\071\050\075\051\110\001\002\000\010\005\347\006\uffa8" +
    "\010\346\001\002\000\004\006\uffaa\001\002\000\010\005" +
    "\347\006\uffa8\010\346\001\002\000\004\006\uffa5\001\002" +
    "\000\036\003\105\004\074\005\uffb2\006\uffb2\010\uffb2\013" +
    "\107\014\101\015\014\035\063\036\106\042\100\044\071" +
    "\050\075\051\110\001\002\000\010\005\347\006\uffa8\010" +
    "\346\001\002\000\004\006\uffa6\001\002\000\004\014\373" +
    "\001\002\000\036\003\105\004\074\005\uffb2\006\uffb2\010" +
    "\uffb2\013\107\014\101\015\014\035\063\036\106\042\100" +
    "\044\071\050\075\051\110\001\002\000\010\005\347\006" +
    "\uffa8\010\346\001\002\000\004\006\uffa7\001\002\000\004" +
    "\004\377\001\002\000\042\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\010\uffad\013\uffad\014\uffad\015\uffad\035\uffad\036\uffad" +
    "\040\uffad\042\uffad\043\uffad\044\uffad\050\uffad\051\uffad\001" +
    "\002\000\036\003\105\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\042\100\044" +
    "\071\050\075\051\110\001\002\000\036\003\105\004\074" +
    "\005\uffb2\006\uffb2\010\uffb2\013\107\014\101\015\014\035" +
    "\063\036\106\042\100\044\071\050\075\051\110\001\002" +
    "\000\010\005\347\006\uffa8\010\346\001\002\000\004\006" +
    "\u0104\001\002\000\006\003\u0105\004\u0106\001\002\000\042" +
    "\003\uffab\004\uffab\005\uffab\006\uffab\010\uffab\013\uffab\014" +
    "\uffab\015\uffab\035\uffab\036\uffab\040\uffab\042\uffab\043\uffab" +
    "\044\uffab\050\uffab\051\uffab\001\002\000\042\003\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\010\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\035\uffaf\036\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\050" +
    "\uffaf\051\uffaf\001\002\000\010\005\347\006\uffa8\010\346" +
    "\001\002\000\004\006\u0109\001\002\000\004\004\u010a\001" +
    "\002\000\042\003\uffac\004\uffac\005\uffac\006\uffac\010\uffac" +
    "\013\uffac\014\uffac\015\uffac\035\uffac\036\uffac\040\uffac\042" +
    "\uffac\043\uffac\044\uffac\050\uffac\051\uffac\001\002\000\004" +
    "\014\u010c\001\002\000\036\003\105\004\074\005\uffb2\006" +
    "\uffb2\010\uffb2\013\107\014\101\015\014\035\063\036\106" +
    "\042\100\044\071\050\075\051\110\001\002\000\010\005" +
    "\347\006\uffa8\010\346\001\002\000\004\006\u010f\001\002" +
    "\000\004\004\u0110\001\002\000\042\003\uffae\004\uffae\005" +
    "\uffae\006\uffae\010\uffae\013\uffae\014\uffae\015\uffae\035\uffae" +
    "\036\uffae\040\uffae\042\uffae\043\uffae\044\uffae\050\uffae\051" +
    "\uffae\001\002\000\004\046\u0112\001\002\000\050\003\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\010\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\032\uffc0\035\uffc0\036\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\046\uffc0\050\uffc0\051\uffc0\001\002\000" +
    "\014\005\uffb9\006\uffb9\010\uffb9\040\uffb9\043\uffb9\001\002" +
    "\000\042\003\uff99\004\uff99\005\uff99\006\uff99\010\uff99\013" +
    "\uff99\014\uff99\015\uff99\035\uff99\036\uff99\040\uff99\042\uff99" +
    "\043\uff99\044\uff99\050\uff99\051\uff99\001\002\000\014\005" +
    "\uffbc\006\uffbc\010\uffbc\040\uffbc\043\uffbc\001\002\000\014" +
    "\005\uffb7\006\uffb7\010\uffb7\040\uffb7\043\uffb7\001\002\000" +
    "\014\005\uffb3\006\uffb3\010\uffb3\040\uffb3\043\uffb3\001\002" +
    "\000\014\005\uffb8\006\uffb8\010\uffb8\040\uffb8\043\uffb8\001" +
    "\002\000\042\003\105\004\074\005\uffb2\006\uffb2\010\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\040\uffb2\042" +
    "\100\043\uffb2\044\071\050\075\051\110\001\002\000\014" +
    "\005\uffba\006\uffba\010\uffba\040\uffba\043\uffba\001\002\000" +
    "\014\003\u0122\020\060\023\055\024\057\051\056\001\002" +
    "\000\012\020\060\023\055\024\057\051\056\001\002\000" +
    "\004\014\u011e\001\002\000\032\003\105\004\074\006\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\042\100\044" +
    "\071\050\075\051\110\001\002\000\004\006\u0120\001\002" +
    "\000\004\046\u0121\001\002\000\050\003\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\032\uffbf\035\uffbf\036\uffbf\040\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\046\uffbf\050\uffbf\051\uffbf\001\002\000\004\014\u012c" +
    "\001\002\000\006\003\u0124\014\u0125\001\002\000\032\003" +
    "\105\004\074\006\uffb2\013\107\014\101\015\014\035\063" +
    "\036\106\042\100\044\071\050\075\051\110\001\002\000" +
    "\032\003\105\004\074\006\uffb2\013\107\014\101\015\014" +
    "\035\063\036\106\042\100\044\071\050\075\051\110\001" +
    "\002\000\004\006\u0127\001\002\000\004\046\u0128\001\002" +
    "\000\050\003\uffc3\004\uffc3\005\uffc3\006\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\032\uffc3\035\uffc3\036\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\050\uffc3\051" +
    "\uffc3\001\002\000\004\006\u012a\001\002\000\004\046\u012b" +
    "\001\002\000\050\003\uffbd\004\uffbd\005\uffbd\006\uffbd\010" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\032\uffbd\035\uffbd" +
    "\036\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\001\002\000\032\003\105\004\074\006\uffb2" +
    "\013\107\014\101\015\014\035\063\036\106\042\100\044" +
    "\071\050\075\051\110\001\002\000\004\006\u012e\001\002" +
    "\000\004\046\u012f\001\002\000\050\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\032\uffbe\035\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\046\uffbe\050\uffbe\051\uffbe\001\002\000\004\051\u0136" +
    "\001\002\000\012\020\060\023\055\024\057\051\056\001" +
    "\002\000\052\003\uff58\004\uff58\005\uff58\006\uff58\010\uff58" +
    "\012\uff58\013\uff58\014\uff58\015\uff58\032\uff58\034\uff58\035" +
    "\uff58\036\uff58\040\uff58\042\uff58\043\uff58\044\uff58\046\uff58" +
    "\050\uff58\051\uff58\001\002\000\054\003\uff59\004\uff59\005" +
    "\uff59\006\uff59\010\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\u0134\032\uff59\034\uff59\035\uff59\036\uff59\040\uff59\042" +
    "\uff59\043\uff59\044\uff59\046\uff59\050\uff59\051\uff59\001\002" +
    "\000\004\051\047\001\002\000\052\003\uff5a\004\uff5a\005" +
    "\uff5a\006\uff5a\010\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\032\uff5a\034\uff5a\035\uff5a\036\uff5a\040\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\046\uff5a\050\uff5a\051\uff5a\001\002\000\010" +
    "\003\uff57\016\uff57\017\uff57\001\002\000\004\034\u0138\001" +
    "\002\000\004\017\u0139\001\002\000\012\020\060\023\055" +
    "\024\057\051\056\001\002\000\004\014\u013b\001\002\000" +
    "\032\003\105\004\074\006\uffb2\013\107\014\101\015\014" +
    "\035\063\036\106\042\100\044\071\050\075\051\110\001" +
    "\002\000\004\006\u013d\001\002\000\004\046\u013e\001\002" +
    "\000\050\003\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\032\uffc1\035\uffc1\036\uffc1" +
    "\040\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\050\uffc1\051" +
    "\uffc1\001\002\000\006\034\uff82\051\047\001\002\000\004" +
    "\034\u0141\001\002\000\004\017\u0142\001\002\000\012\020" +
    "\060\023\055\024\057\051\056\001\002\000\004\014\u0144" +
    "\001\002\000\032\003\105\004\074\006\uffb2\013\107\014" +
    "\101\015\014\035\063\036\106\042\100\044\071\050\075" +
    "\051\110\001\002\000\004\006\u0146\001\002\000\004\046" +
    "\u0147\001\002\000\050\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\032\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\001\002\000\004\033\u01dd\001\002\000" +
    "\006\003\u014a\033\u014b\001\002\000\006\034\uff82\051\047" +
    "\001\002\000\010\003\uff82\034\uff82\051\047\001\002\000" +
    "\006\003\u014e\034\u014d\001\002\000\006\003\u01cf\014\u01d0" +
    "\001\002\000\004\014\u014f\001\002\000\030\003\u015b\004" +
    "\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c" +
    "\042\u0156\050\075\051\110\001\002\000\004\032\u01cd\001" +
    "\002\000\040\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda" +
    "\013\107\014\u0157\015\014\035\u0150\036\u015c\040\uffda\042" +
    "\u0156\043\uffda\050\075\051\110\001\002\000\040\003\u015b" +
    "\004\u0155\005\uffda\006\uffda\010\uffda\013\107\014\u0157\015" +
    "\014\035\u0150\036\u015c\040\uffda\042\u0156\043\uffda\050\075" +
    "\051\110\001\002\000\040\003\u015b\004\u0155\005\uffda\006" +
    "\uffda\010\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c" +
    "\040\uffda\042\u0156\043\uffda\050\075\051\110\001\002\000" +
    "\040\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013\107" +
    "\014\u0157\015\014\035\u0150\036\u015c\040\uffda\042\u0156\043" +
    "\uffda\050\075\051\110\001\002\000\024\003\u0198\021\127" +
    "\022\133\027\252\033\134\047\120\051\140\052\130\053" +
    "\136\001\002\000\006\003\u0187\041\u0188\001\002\000\040" +
    "\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013\107\014" +
    "\u0157\015\014\035\u0150\036\u015c\040\uffda\042\u0156\043\uffda" +
    "\050\075\051\110\001\002\000\040\003\u015b\004\u0155\005" +
    "\uffda\006\uffda\010\uffda\013\107\014\u0157\015\014\035\u0150" +
    "\036\u015c\040\uffda\042\u0156\043\uffda\050\075\051\110\001" +
    "\002\000\040\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda" +
    "\013\107\014\u0157\015\014\035\u0150\036\u015c\040\uffda\042" +
    "\u0156\043\uffda\050\075\051\110\001\002\000\004\006\u0182" +
    "\001\002\000\054\003\u0177\004\u0155\005\uffda\006\uffda\010" +
    "\uffda\011\222\013\107\014\u0157\015\014\032\u0175\033\147" +
    "\035\u0150\036\u015c\040\uffda\041\u0174\042\u0156\043\uffda\050" +
    "\075\051\247\054\112\055\116\001\002\000\006\003\u015f" +
    "\051\202\001\002\000\040\003\u015b\004\u0155\005\uffda\006" +
    "\uffda\010\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c" +
    "\040\uffda\042\u0156\043\uffda\050\075\051\110\001\002\000" +
    "\014\005\uffdf\006\uffdf\010\uffdf\040\uffdf\043\uffdf\001\002" +
    "\000\014\011\222\017\230\037\u016e\054\112\055\116\001" +
    "\002\000\006\003\u0162\037\u0161\001\002\000\012\003\145" +
    "\033\134\051\146\053\136\001\002\000\012\003\145\033" +
    "\134\051\146\053\136\001\002\000\006\014\u0164\054\143" +
    "\001\002\000\030\003\u015b\004\u0155\013\107\014\u0157\015" +
    "\014\035\u0150\036\u015c\040\uffda\042\u0156\050\075\051\110" +
    "\001\002\000\004\040\u0166\001\002\000\040\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\035\uffc5\036\uffc5\040\uffc5\042\uffc5\043\uffc5\050\uffc5\051" +
    "\uffc5\001\002\000\010\003\u0168\014\u0169\054\143\001\002" +
    "\000\030\003\u015b\004\u0155\013\107\014\u0157\015\014\035" +
    "\u0150\036\u015c\040\uffda\042\u0156\050\075\051\110\001\002" +
    "\000\030\003\u015b\004\u0155\013\107\014\u0157\015\014\035" +
    "\u0150\036\u015c\040\uffda\042\u0156\050\075\051\110\001\002" +
    "\000\004\040\u016b\001\002\000\040\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\035\uffc8" +
    "\036\uffc8\040\uffc8\042\uffc8\043\uffc8\050\uffc8\051\uffc8\001" +
    "\002\000\004\040\u016d\001\002\000\040\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\010\uffc4\013\uffc4\014\uffc4\015\uffc4\035" +
    "\uffc4\036\uffc4\040\uffc4\042\uffc4\043\uffc4\050\uffc4\051\uffc4" +
    "\001\002\000\012\003\145\033\134\051\146\053\136\001" +
    "\002\000\006\014\u0170\054\143\001\002\000\030\003\u015b" +
    "\004\u0155\013\107\014\u0157\015\014\035\u0150\036\u015c\040" +
    "\uffda\042\u0156\050\075\051\110\001\002\000\004\040\u0172" +
    "\001\002\000\040\003\uffc6\004\uffc6\005\uffc6\006\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\035\uffc6\036\uffc6\040\uffc6" +
    "\042\uffc6\043\uffc6\050\uffc6\051\uffc6\001\002\000\004\037" +
    "\u017d\001\002\000\024\003\135\021\127\022\133\027\252" +
    "\033\134\047\120\051\140\052\130\053\136\001\002\000" +
    "\040\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013\107" +
    "\014\u0157\015\014\035\u0150\036\u015c\040\uffda\042\u0156\043" +
    "\uffda\050\075\051\110\001\002\000\014\005\uffdc\006\uffdc" +
    "\010\uffdc\040\uffdc\043\uffdc\001\002\000\056\003\u0177\004" +
    "\u0155\005\uffda\006\uffda\010\uffda\011\222\013\107\014\u0157" +
    "\015\014\017\230\032\u0175\033\147\035\u0150\036\u015c\040" +
    "\uffda\041\u0174\042\u0156\043\uffda\050\075\051\247\054\112" +
    "\055\116\001\002\000\014\005\uffdb\006\uffdb\010\uffdb\040" +
    "\uffdb\043\uffdb\001\002\000\010\014\u017a\025\257\026\260" +
    "\001\002\000\030\003\u015b\004\u0155\013\107\014\u0157\015" +
    "\014\035\u0150\036\u015c\042\u0156\043\uffda\050\075\051\110" +
    "\001\002\000\004\043\u017c\001\002\000\040\003\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\042\uffcc\043\uffcc\050\uffcc\051" +
    "\uffcc\001\002\000\012\003\145\033\134\051\146\053\136" +
    "\001\002\000\006\014\u017f\054\143\001\002\000\030\003" +
    "\u015b\004\u0155\013\107\014\u0157\015\014\035\u0150\036\u015c" +
    "\040\uffda\042\u0156\050\075\051\110\001\002\000\004\040" +
    "\u0181\001\002\000\040\003\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\010\uffc7\013\uffc7\014\uffc7\015\uffc7\035\uffc7\036\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\050\uffc7\051\uffc7\001\002\000\004" +
    "\032\u0183\001\002\000\014\012\uffe7\014\uffe7\015\uffe7\032" +
    "\uffe7\046\uffe7\001\002\000\014\005\uffe0\006\uffe0\010\uffe0" +
    "\040\uffe0\043\uffe0\001\002\000\014\005\uffdd\006\uffdd\010" +
    "\uffdd\040\uffdd\043\uffdd\001\002\000\014\005\uffe4\006\uffe4" +
    "\010\uffe4\040\uffe4\043\uffe4\001\002\000\024\003\135\021" +
    "\127\022\133\027\252\033\134\047\120\051\140\052\130" +
    "\053\136\001\002\000\024\003\u0189\021\127\022\133\027" +
    "\252\033\134\047\120\051\140\052\130\053\136\001\002" +
    "\000\020\011\uff62\014\u0191\033\147\045\uff72\054\uff62\055" +
    "\uff62\056\uff62\001\002\000\012\003\u018b\014\u018c\025\257" +
    "\026\260\001\002\000\030\003\u015b\004\u0155\013\107\014" +
    "\u0157\015\014\035\u0150\036\u015c\042\u0156\043\uffda\050\075" +
    "\051\110\001\002\000\030\003\u015b\004\u0155\013\107\014" +
    "\u0157\015\014\035\u0150\036\u015c\042\u0156\043\uffda\050\075" +
    "\051\110\001\002\000\004\043\u018e\001\002\000\040\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\035\uffcd\036\uffcd\040\uffcd\042\uffcd\043\uffcd\050" +
    "\uffcd\051\uffcd\001\002\000\004\043\u0190\001\002\000\040" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\035\uffc9\036\uffc9\040\uffc9\042\uffc9\043\uffc9" +
    "\050\uffc9\051\uffc9\001\002\000\030\003\u015b\004\u0155\013" +
    "\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156\043\uffda" +
    "\050\075\051\110\001\002\000\004\043\u0193\001\002\000" +
    "\040\003\uffca\004\uffca\005\uffca\006\uffca\010\uffca\013\uffca" +
    "\014\uffca\015\uffca\035\uffca\036\uffca\040\uffca\042\uffca\043" +
    "\uffca\050\uffca\051\uffca\001\002\000\010\014\u0195\025\257" +
    "\026\260\001\002\000\030\003\u015b\004\u0155\013\107\014" +
    "\u0157\015\014\035\u0150\036\u015c\042\u0156\043\uffda\050\075" +
    "\051\110\001\002\000\004\043\u0197\001\002\000\040\003" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\035\uffcb\036\uffcb\040\uffcb\042\uffcb\043\uffcb\050" +
    "\uffcb\051\uffcb\001\002\000\020\007\u01c3\011\uff62\033\147" +
    "\045\uff72\054\uff62\055\uff62\056\uff62\001\002\000\012\003" +
    "\u019a\007\u019b\025\257\026\260\001\002\000\004\014\u01be" +
    "\001\002\000\006\003\u019c\014\u019d\001\002\000\034\003" +
    "\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013\107\014\u0157" +
    "\015\014\035\u0150\036\u015c\042\u0156\050\075\051\110\001" +
    "\002\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda" +
    "\013\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156\050" +
    "\075\051\110\001\002\000\010\005\u01a0\006\uffd2\010\u019f" +
    "\001\002\000\024\003\u01a9\021\127\022\133\027\252\033" +
    "\134\047\120\051\140\052\130\053\136\001\002\000\006" +
    "\003\u01a5\014\u01a6\001\002\000\004\006\u01a2\001\002\000" +
    "\006\003\u01a3\004\u01a4\001\002\000\040\003\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\010\uffd5\013\uffd5\014\uffd5\015\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\042\uffd5\043\uffd5\050\uffd5\051\uffd5" +
    "\001\002\000\040\003\uffd9\004\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\035\uffd9\036\uffd9\040\uffd9" +
    "\042\uffd9\043\uffd9\050\uffd9\051\uffd9\001\002\000\030\003" +
    "\u015b\004\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150" +
    "\036\u015c\042\u0156\050\075\051\110\001\002\000\030\003" +
    "\u015b\004\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150" +
    "\036\u015c\042\u0156\050\075\051\110\001\002\000\004\006" +
    "\uffd3\001\002\000\004\006\uffce\001\002\000\020\007\u01b6" +
    "\011\uff62\033\147\045\uff72\054\uff62\055\uff62\056\uff62\001" +
    "\002\000\012\003\u01ab\007\u01ac\025\257\026\260\001\002" +
    "\000\004\014\u01b3\001\002\000\006\003\u01ad\014\u01ae\001" +
    "\002\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda" +
    "\013\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156\050" +
    "\075\051\110\001\002\000\034\003\u015b\004\u0155\005\uffda" +
    "\006\uffda\010\uffda\013\107\014\u0157\015\014\035\u0150\036" +
    "\u015c\042\u0156\050\075\051\110\001\002\000\010\005\u01a0" +
    "\006\uffd2\010\u019f\001\002\000\004\006\uffd4\001\002\000" +
    "\010\005\u01a0\006\uffd2\010\u019f\001\002\000\004\006\uffcf" +
    "\001\002\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010" +
    "\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156" +
    "\050\075\051\110\001\002\000\010\005\u01a0\006\uffd2\010" +
    "\u019f\001\002\000\004\006\uffd0\001\002\000\004\014\u01b7" +
    "\001\002\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010" +
    "\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156" +
    "\050\075\051\110\001\002\000\010\005\u01a0\006\uffd2\010" +
    "\u019f\001\002\000\004\006\uffd1\001\002\000\010\005\u01a0" +
    "\006\uffd2\010\u019f\001\002\000\004\006\u01bc\001\002\000" +
    "\004\004\u01bd\001\002\000\040\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\010\uffd6\013\uffd6\014\uffd6\015\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\050\uffd6\051\uffd6\001\002" +
    "\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013" +
    "\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156\050\075" +
    "\051\110\001\002\000\010\005\u01a0\006\uffd2\010\u019f\001" +
    "\002\000\004\006\u01c1\001\002\000\004\004\u01c2\001\002" +
    "\000\040\003\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\035\uffd7\036\uffd7\040\uffd7\042\uffd7" +
    "\043\uffd7\050\uffd7\051\uffd7\001\002\000\004\014\u01c4\001" +
    "\002\000\034\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda" +
    "\013\107\014\u0157\015\014\035\u0150\036\u015c\042\u0156\050" +
    "\075\051\110\001\002\000\010\005\u01a0\006\uffd2\010\u019f" +
    "\001\002\000\004\006\u01c7\001\002\000\004\004\u01c8\001" +
    "\002\000\040\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\035\uffd8\036\uffd8\040\uffd8\042" +
    "\uffd8\043\uffd8\050\uffd8\051\uffd8\001\002\000\014\005\uffe2" +
    "\006\uffe2\010\uffe2\040\uffe2\043\uffe2\001\002\000\014\005" +
    "\uffde\006\uffde\010\uffde\040\uffde\043\uffde\001\002\000\014" +
    "\005\uffe5\006\uffe5\010\uffe5\040\uffe5\043\uffe5\001\002\000" +
    "\014\005\uffe1\006\uffe1\010\uffe1\040\uffe1\043\uffe1\001\002" +
    "\000\040\003\u015b\004\u0155\005\uffda\006\uffda\010\uffda\013" +
    "\107\014\u0157\015\014\035\u0150\036\u015c\040\uffda\042\u0156" +
    "\043\uffda\050\075\051\110\001\002\000\014\005\uffe3\006" +
    "\uffe3\010\uffe3\040\uffe3\043\uffe3\001\002\000\030\003\u015b" +
    "\004\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150\036" +
    "\u015c\042\u0156\050\075\051\110\001\002\000\030\003\u015b" +
    "\004\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150\036" +
    "\u015c\042\u0156\050\075\051\110\001\002\000\004\006\u01d2" +
    "\001\002\000\004\032\u01d3\001\002\000\014\012\uffea\014" +
    "\uffea\015\uffea\032\uffea\046\uffea\001\002\000\004\006\u01d5" +
    "\001\002\000\004\032\u01d6\001\002\000\014\012\uffe6\014" +
    "\uffe6\015\uffe6\032\uffe6\046\uffe6\001\002\000\004\034\u01d8" +
    "\001\002\000\004\014\u01d9\001\002\000\030\003\u015b\004" +
    "\u0155\006\uffda\013\107\014\u0157\015\014\035\u0150\036\u015c" +
    "\042\u0156\050\075\051\110\001\002\000\004\006\u01db\001" +
    "\002\000\004\032\u01dc\001\002\000\014\012\uffe8\014\uffe8" +
    "\015\uffe8\032\uffe8\046\uffe8\001\002\000\006\034\uff82\051" +
    "\047\001\002\000\004\034\u01df\001\002\000\004\014\u01e0" +
    "\001\002\000\030\003\u015b\004\u0155\006\uffda\013\107\014" +
    "\u0157\015\014\035\u0150\036\u015c\042\u0156\050\075\051\110" +
    "\001\002\000\004\006\u01e2\001\002\000\004\032\u01e3\001" +
    "\002\000\014\012\uffe9\014\uffe9\015\uffe9\032\uffe9\046\uffe9" +
    "\001\002\000\004\014\u01f2\001\002\000\006\003\u01e6\014" +
    "\u01e7\001\002\000\004\015\014\001\002\000\006\003\u01e9" +
    "\015\014\001\002\000\004\006\u01ec\001\002\000\004\006" +
    "\u01ea\001\002\000\004\012\u01eb\001\002\000\014\012\uffec" +
    "\014\uffec\015\uffec\032\uffec\046\uffec\001\002\000\006\003" +
    "\u01ed\012\u01ee\001\002\000\014\012\uffeb\014\uffeb\015\uffeb" +
    "\032\uffeb\046\uffeb\001\002\000\014\012\uffef\014\uffef\015" +
    "\uffef\032\uffef\046\uffef\001\002\000\004\006\u01f0\001\002" +
    "\000\004\012\u01f1\001\002\000\014\012\uffed\014\uffed\015" +
    "\uffed\032\uffed\046\uffed\001\002\000\004\015\014\001\002" +
    "\000\004\006\u01f4\001\002\000\004\012\u01f5\001\002\000" +
    "\014\012\uffee\014\uffee\015\uffee\032\uffee\046\uffee\001\002" +
    "\000\006\003\ufff9\006\ufff9\001\002\000\006\003\ufffa\006" +
    "\ufffa\001\002\000\006\003\ufff8\006\ufff8\001\002\000\004" +
    "\031\u01fd\001\002\000\006\003\u01fb\031\u01fc\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffc\001\002\000\050\003\uff61\004\uff61\005\uff61\006" +
    "\uff61\010\uff61\012\uff61\013\uff61\014\uff61\015\uff61\032\uff61" +
    "\035\uff61\036\uff61\040\uff61\042\uff61\043\uff61\044\uff61\046" +
    "\uff61\050\uff61\051\uff61\001\002\000\050\003\uff60\004\uff60" +
    "\005\uff60\006\uff60\010\uff60\012\uff60\013\uff60\014\uff60\015" +
    "\uff60\032\uff60\035\uff60\036\uff60\040\uff60\042\uff60\043\uff60" +
    "\044\uff60\046\uff60\050\uff60\051\uff60\001\002\000\006\016" +
    "\u0201\017\u0202\001\002\000\004\051\047\001\002\000\012" +
    "\020\u0207\023\u0203\024\u0206\051\u0205\001\002\000\054\003" +
    "\uff4f\004\uff4f\005\uff4f\006\uff4f\010\uff4f\011\u0216\012\uff4f" +
    "\013\uff4f\014\uff4f\015\uff4f\016\uff4f\032\uff4f\035\uff4f\036" +
    "\uff4f\040\uff4f\042\uff4f\043\uff4f\044\uff4f\046\uff4f\050\uff4f" +
    "\051\uff4f\001\002\000\050\003\uff5f\004\uff5f\005\uff5f\006" +
    "\uff5f\010\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\032\uff5f" +
    "\035\uff5f\036\uff5f\040\uff5f\042\uff5f\043\uff5f\044\uff5f\046" +
    "\uff5f\050\uff5f\051\uff5f\001\002\000\054\003\uff4c\004\uff4c" +
    "\005\uff4c\006\uff4c\010\uff4c\011\u0211\012\uff4c\013\uff4c\014" +
    "\uff4c\015\uff4c\016\uff4c\032\uff4c\035\uff4c\036\uff4c\040\uff4c" +
    "\042\uff4c\043\uff4c\044\uff4c\046\uff4c\050\uff4c\051\uff4c\001" +
    "\002\000\054\003\uff4e\004\uff4e\005\uff4e\006\uff4e\010\uff4e" +
    "\011\u020e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\032" +
    "\uff4e\035\uff4e\036\uff4e\040\uff4e\042\uff4e\043\uff4e\044\uff4e" +
    "\046\uff4e\050\uff4e\051\uff4e\001\002\000\054\003\uff4d\004" +
    "\uff4d\005\uff4d\006\uff4d\010\uff4d\011\u020b\012\uff4d\013\uff4d" +
    "\014\uff4d\015\uff4d\016\uff4d\032\uff4d\035\uff4d\036\uff4d\040" +
    "\uff4d\042\uff4d\043\uff4d\044\uff4d\046\uff4d\050\uff4d\051\uff4d" +
    "\001\002\000\052\003\uff5b\004\uff5b\005\uff5b\006\uff5b\010" +
    "\uff5b\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016\u0209\032\uff5b" +
    "\035\uff5b\036\uff5b\040\uff5b\042\uff5b\043\uff5b\044\uff5b\046" +
    "\uff5b\050\uff5b\051\uff5b\001\002\000\004\051\047\001\002" +
    "\000\050\003\uff5e\004\uff5e\005\uff5e\006\uff5e\010\uff5e\012" +
    "\uff5e\013\uff5e\014\uff5e\015\uff5e\032\uff5e\035\uff5e\036\uff5e" +
    "\040\uff5e\042\uff5e\043\uff5e\044\uff5e\046\uff5e\050\uff5e\051" +
    "\uff5e\001\002\000\006\021\u020c\022\u020d\001\002\000\050" +
    "\003\uff53\004\uff53\005\uff53\006\uff53\010\uff53\012\uff53\013" +
    "\uff53\014\uff53\015\uff53\032\uff53\035\uff53\036\uff53\040\uff53" +
    "\042\uff53\043\uff53\044\uff53\046\uff53\050\uff53\051\uff53\001" +
    "\002\000\050\003\uff52\004\uff52\005\uff52\006\uff52\010\uff52" +
    "\012\uff52\013\uff52\014\uff52\015\uff52\032\uff52\035\uff52\036" +
    "\uff52\040\uff52\042\uff52\043\uff52\044\uff52\046\uff52\050\uff52" +
    "\051\uff52\001\002\000\010\003\156\051\157\052\u020f\001" +
    "\002\000\052\003\uff54\004\uff54\005\uff54\006\uff54\010\uff54" +
    "\012\uff54\013\uff54\014\uff54\015\uff54\032\uff54\035\uff54\036" +
    "\uff54\040\uff54\042\uff54\043\uff54\044\uff54\045\uff74\046\uff54" +
    "\050\uff54\051\uff54\001\002\000\050\003\uff51\004\uff51\005" +
    "\uff51\006\uff51\010\uff51\012\uff51\013\uff51\014\uff51\015\uff51" +
    "\032\uff51\035\uff51\036\uff51\040\uff51\042\uff51\043\uff51\044" +
    "\uff51\046\uff51\050\uff51\051\uff51\001\002\000\004\030\u0212" +
    "\001\002\000\006\003\u0213\051\u0214\001\002\000\004\033" +
    "\147\001\002\000\004\033\115\001\002\000\050\003\uff50" +
    "\004\uff50\005\uff50\006\uff50\010\uff50\012\uff50\013\uff50\014" +
    "\uff50\015\uff50\032\uff50\035\uff50\036\uff50\040\uff50\042\uff50" +
    "\043\uff50\044\uff50\046\uff50\050\uff50\051\uff50\001\002\000" +
    "\012\003\145\033\134\051\146\053\136\001\002\000\052" +
    "\003\uff55\004\uff55\005\uff55\006\uff55\010\uff55\012\uff55\013" +
    "\uff55\014\uff55\015\uff55\032\uff55\035\uff55\036\uff55\040\uff55" +
    "\042\uff55\043\uff55\044\uff55\046\uff55\050\uff55\051\uff55\054" +
    "\143\001\002\000\006\016\u0130\017\u0219\001\002\000\012" +
    "\020\060\023\055\024\057\051\056\001\002\000\052\003" +
    "\uff5c\004\uff5c\005\uff5c\006\uff5c\010\uff5c\012\uff5c\013\uff5c" +
    "\014\uff5c\015\uff5c\016\u021b\032\uff5c\035\uff5c\036\uff5c\040" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\046\uff5c\050\uff5c\051\uff5c" +
    "\001\002\000\004\051\047\001\002\000\050\003\uff5d\004" +
    "\uff5d\005\uff5d\006\uff5d\010\uff5d\012\uff5d\013\uff5d\014\uff5d" +
    "\015\uff5d\032\uff5d\035\uff5d\036\uff5d\040\uff5d\042\uff5d\043" +
    "\uff5d\044\uff5d\046\uff5d\050\uff5d\051\uff5d\001\002\000\004" +
    "\006\u021e\001\002\000\004\031\u021f\001\002\000\004\002" +
    "\ufffd\001\002\000\014\012\021\014\020\015\014\032\022" +
    "\046\023\001\002\000\004\006\u0222\001\002\000\004\031" +
    "\u0223\001\002\000\004\002\ufffe\001\002\000\004\014\u0225" +
    "\001\002\000\014\012\021\014\020\015\014\032\022\046" +
    "\023\001\002\000\004\006\u0227\001\002\000\004\031\u0228" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0226\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u021c\005\024\006" +
    "\015\014\016\045\023\001\001\000\014\003\014\005\024" +
    "\006\015\014\016\045\023\001\001\000\004\015\u01fd\001" +
    "\001\000\002\001\001\000\014\003\u01f7\005\024\006\015" +
    "\014\016\045\023\001\001\000\014\003\u01f6\005\024\006" +
    "\015\014\016\045\023\001\001\000\014\003\u01f5\005\024" +
    "\006\015\014\016\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\040\005\024" +
    "\006\015\014\016\045\023\001\001\000\014\004\026\005" +
    "\032\006\025\014\027\045\031\001\001\000\014\004\037" +
    "\005\032\006\025\014\027\045\031\001\001\000\002\001" +
    "\001\000\014\004\036\005\032\006\025\014\027\045\031" +
    "\001\001\000\014\004\035\005\032\006\025\014\027\045" +
    "\031\001\001\000\014\004\034\005\032\006\025\014\027" +
    "\045\031\001\001\000\014\004\033\005\032\006\025\014" +
    "\027\045\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\047\013\045\032\u0136\001\001\000\010\012\047\013" +
    "\045\032\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\102\014\067\020\066\027\071" +
    "\030\076\031\065\036\063\042\101\044\072\046\075\051" +
    "\103\052\064\001\001\000\002\001\001\000\032\007\102" +
    "\014\067\020\066\027\071\030\076\031\065\036\063\042" +
    "\101\044\u0117\046\075\051\103\052\064\001\001\000\032" +
    "\007\102\014\067\020\066\027\071\030\076\031\065\036" +
    "\063\042\101\044\u0116\046\075\051\103\052\064\001\001" +
    "\000\002\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\u0115\046\075" +
    "\051\103\052\064\001\001\000\032\007\102\014\067\020" +
    "\066\027\071\030\076\031\065\036\063\042\101\044\u0114" +
    "\046\075\051\103\052\064\001\001\000\024\011\140\016" +
    "\124\017\123\020\122\023\u0113\024\125\025\141\055\131" +
    "\056\136\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\u0112\046\075" +
    "\051\103\052\064\001\001\000\002\001\001\000\030\011" +
    "\140\016\124\017\123\020\122\024\252\025\255\033\253" +
    "\034\337\035\250\055\131\056\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\014\067\020\066\027\071\030\076\031" +
    "\065\036\063\042\101\044\302\046\075\051\103\052\064" +
    "\001\001\000\032\007\102\014\067\020\066\027\071\030" +
    "\076\031\065\036\063\042\101\044\301\046\075\051\103" +
    "\052\064\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\300\046\075" +
    "\051\103\052\064\001\001\000\032\007\102\014\067\020" +
    "\066\027\071\030\076\031\065\036\063\042\101\044\277" +
    "\046\075\051\103\052\064\001\001\000\040\006\244\007" +
    "\102\014\067\020\066\026\225\027\071\030\243\031\065" +
    "\036\063\042\101\044\242\046\075\051\103\052\064\053" +
    "\240\001\001\000\006\030\177\053\202\001\001\000\004" +
    "\026\173\001\001\000\004\026\110\001\001\000\014\011" +
    "\140\016\124\017\123\020\122\025\172\001\001\000\002" +
    "\001\001\000\014\011\140\016\124\017\123\020\122\025" +
    "\170\001\001\000\010\024\167\055\131\056\136\001\001" +
    "\000\030\011\140\016\124\017\123\020\122\021\121\022" +
    "\130\023\120\024\125\025\141\055\131\056\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\161\016\124\017\123\020" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\124\017\143\020\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\140\016\124\017\123\020\122\021\147\022\130\023\120" +
    "\024\125\025\141\055\131\056\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\152\020\122\001\001" +
    "\000\002\001\001\000\006\055\160\056\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\140\016\124\017\123\020\122\023\165" +
    "\024\125\025\141\055\131\056\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\140\016\124\017\123\020\122\025\176\001\001" +
    "\000\010\024\175\055\131\056\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\225" +
    "\001\001\000\004\026\110\001\001\000\002\001\001\000" +
    "\012\011\211\016\124\017\123\020\122\001\001\000\012" +
    "\011\205\016\124\017\123\020\122\001\001\000\002\001" +
    "\001\000\032\007\102\014\067\020\066\027\071\030\076" +
    "\031\065\036\063\042\101\044\207\046\075\051\103\052" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\102\014\067\020\066\027\071\030" +
    "\076\031\065\036\063\042\101\044\216\046\075\051\103" +
    "\052\064\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\214\046\075" +
    "\051\103\052\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\224\016" +
    "\124\017\123\020\122\001\001\000\002\001\001\000\014" +
    "\011\140\016\124\017\123\020\122\025\237\001\001\000" +
    "\012\011\233\016\124\017\123\020\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\232\016\124\017" +
    "\123\020\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\014\067\020\066\027\071\030\076\031" +
    "\065\036\063\042\101\044\235\046\075\051\103\052\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\140\016\124\017\123" +
    "\020\122\024\252\025\255\033\253\034\254\035\250\055" +
    "\131\056\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\014\067\020\066\027\071\030\076\031" +
    "\065\036\063\042\101\044\247\046\075\051\103\052\064" +
    "\001\001\000\040\006\244\007\102\014\067\020\066\026" +
    "\225\027\071\030\243\031\065\036\063\042\101\044\242" +
    "\046\075\051\103\052\064\053\240\001\001\000\004\026" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\140\016\124\017\123\020\122\024\252\025\255\033" +
    "\253\035\271\055\131\056\136\001\001\000\002\001\001" +
    "\000\004\060\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\140\016\124\017\123\020\122\024\252" +
    "\025\255\033\253\035\264\055\131\056\136\001\001\000" +
    "\026\011\140\016\124\017\123\020\122\024\252\025\255" +
    "\033\253\035\263\055\131\056\136\001\001\000\032\007" +
    "\102\014\067\020\066\027\071\030\076\031\065\036\063" +
    "\042\101\044\261\046\075\051\103\052\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\140\016\124\017" +
    "\123\020\122\024\252\025\255\033\270\055\131\056\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\273\016\124\017\123\020\122\001\001" +
    "\000\002\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\275\046\075" +
    "\051\103\052\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\140\016\124\017\123\020" +
    "\122\024\252\025\255\033\253\034\320\035\250\055\131" +
    "\056\136\001\001\000\030\011\140\016\124\017\123\020" +
    "\122\024\252\025\255\033\253\034\306\035\250\055\131" +
    "\056\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\102\014\067\020\066\027\071\030\076\031\065" +
    "\036\063\042\101\044\313\046\075\051\103\052\064\001" +
    "\001\000\032\007\102\014\067\020\066\027\071\030\076" +
    "\031\065\036\063\042\101\044\311\046\075\051\103\052" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\102\014\067\020" +
    "\066\027\071\030\076\031\065\036\063\042\101\044\316" +
    "\046\075\051\103\052\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\014\067" +
    "\020\066\027\071\030\076\031\065\036\063\042\101\044" +
    "\322\046\075\051\103\052\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\054\334\055\331\056\136\001" +
    "\001\000\010\054\332\055\331\056\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\014\067" +
    "\020\066\027\071\030\076\031\065\036\063\042\101\044" +
    "\343\046\075\051\103\052\064\001\001\000\004\037\344" +
    "\001\001\000\002\001\001\000\030\011\140\016\124\017" +
    "\123\020\122\024\252\025\255\033\253\034\355\035\250" +
    "\055\131\056\136\001\001\000\002\001\001\000\004\037" +
    "\353\001\001\000\032\007\102\014\067\020\066\027\071" +
    "\030\076\031\065\036\063\042\101\044\351\046\075\051" +
    "\103\052\064\001\001\000\004\037\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\102" +
    "\014\067\020\066\027\071\030\076\031\065\036\063\042" +
    "\101\044\364\046\075\051\103\052\064\001\001\000\032" +
    "\007\102\014\067\020\066\027\071\030\076\031\065\036" +
    "\063\042\101\044\362\046\075\051\103\052\064\001\001" +
    "\000\004\037\363\001\001\000\002\001\001\000\004\037" +
    "\365\001\001\000\002\001\001\000\032\007\102\014\067" +
    "\020\066\027\071\030\076\031\065\036\063\042\101\044" +
    "\367\046\075\051\103\052\064\001\001\000\004\037\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\102\014\067\020\066\027\071\030\076\031\065\036\063" +
    "\042\101\044\373\046\075\051\103\052\064\001\001\000" +
    "\004\037\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\102\014\067\020\066\027" +
    "\071\030\076\031\065\036\063\042\101\044\u0106\046\075" +
    "\051\103\052\064\001\001\000\032\007\102\014\067\020" +
    "\066\027\071\030\076\031\065\036\063\042\101\044\u0101" +
    "\046\075\051\103\052\064\001\001\000\004\037\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\014\067\020\066\027\071\030\076\031" +
    "\065\036\063\042\101\044\u010c\046\075\051\103\052\064" +
    "\001\001\000\004\037\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\014\067\020\066\027\071\030\076\031" +
    "\065\036\063\042\101\044\u0119\046\075\051\103\052\064" +
    "\001\001\000\002\001\001\000\004\057\u0122\001\001\000" +
    "\004\057\u011c\001\001\000\002\001\001\000\032\007\102" +
    "\014\067\020\066\027\071\030\076\031\065\036\063\042" +
    "\101\044\u011e\046\075\051\103\052\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\102\014\067\020\066" +
    "\027\071\030\076\031\065\036\063\042\101\044\u0128\046" +
    "\075\051\103\052\064\001\001\000\032\007\102\014\067" +
    "\020\066\027\071\030\076\031\065\036\063\042\101\044" +
    "\u0125\046\075\051\103\052\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\014\067" +
    "\020\066\027\071\030\076\031\065\036\063\042\101\044" +
    "\u012c\046\075\051\103\052\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\047\013\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u0139\001\001\000\002\001\001\000\032\007\102\014" +
    "\067\020\066\027\071\030\076\031\065\036\063\042\101" +
    "\044\u013b\046\075\051\103\052\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\047" +
    "\013\045\032\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u0142\001\001\000\002\001\001\000\032" +
    "\007\102\014\067\020\066\027\071\030\076\031\065\036" +
    "\063\042\101\044\u0144\046\075\051\103\052\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\047\013\045" +
    "\032\u01d6\001\001\000\010\012\047\013\045\032\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031" +
    "\065\041\u015c\043\u0159\046\075\047\u0152\050\u0157\001\001" +
    "\000\002\001\001\000\030\007\u0158\014\u0151\020\u0150\027" +
    "\u0153\030\076\031\065\041\u015c\043\u01cb\046\075\047\u0152" +
    "\050\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027" +
    "\u0153\030\076\031\065\041\u015c\043\u01ca\046\075\047\u0152" +
    "\050\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027" +
    "\u0153\030\076\031\065\041\u015c\043\u01c9\046\075\047\u0152" +
    "\050\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027" +
    "\u0153\030\076\031\065\041\u015c\043\u01c8\046\075\047\u0152" +
    "\050\u0157\001\001\000\030\011\140\016\124\017\123\020" +
    "\122\024\252\025\255\033\253\034\u0198\035\250\055\131" +
    "\056\136\001\001\000\002\001\001\000\030\007\u0158\014" +
    "\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u0185" +
    "\046\075\047\u0152\050\u0157\001\001\000\030\007\u0158\014" +
    "\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u0184" +
    "\046\075\047\u0152\050\u0157\001\001\000\030\007\u0158\014" +
    "\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u0183" +
    "\046\075\047\u0152\050\u0157\001\001\000\002\001\001\000" +
    "\034\007\u0158\014\u0151\020\u0150\026\225\027\u0153\030\243" +
    "\031\065\041\u015c\043\u0175\046\075\047\u0152\050\u0157\053" +
    "\u0172\001\001\000\006\030\177\053\u015f\001\001\000\030" +
    "\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031\065\041" +
    "\u015c\043\u015d\046\075\047\u0152\050\u0157\001\001\000\002" +
    "\001\001\000\004\026\225\001\001\000\002\001\001\000" +
    "\012\011\u0166\016\124\017\123\020\122\001\001\000\012" +
    "\011\u0162\016\124\017\123\020\122\001\001\000\002\001" +
    "\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076" +
    "\031\065\041\u015c\043\u0164\046\075\047\u0152\050\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031" +
    "\065\041\u015c\043\u016b\046\075\047\u0152\050\u0157\001\001" +
    "\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031" +
    "\065\041\u015c\043\u0169\046\075\047\u0152\050\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\u016e\016\124\017\123\020\122" +
    "\001\001\000\002\001\001\000\030\007\u0158\014\u0151\020" +
    "\u0150\027\u0153\030\076\031\065\041\u015c\043\u0170\046\075" +
    "\047\u0152\050\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\140\016\124\017\123" +
    "\020\122\024\252\025\255\033\253\034\u0178\035\250\055" +
    "\131\056\136\001\001\000\030\007\u0158\014\u0151\020\u0150" +
    "\027\u0153\030\076\031\065\041\u015c\043\u0177\046\075\047" +
    "\u0152\050\u0157\001\001\000\002\001\001\000\034\007\u0158" +
    "\014\u0151\020\u0150\026\225\027\u0153\030\243\031\065\041" +
    "\u015c\043\u0175\046\075\047\u0152\050\u0157\053\u0172\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\u0158\014" +
    "\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u017a" +
    "\046\075\047\u0152\050\u0157\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\u017d\016\124\017\123\020\122" +
    "\001\001\000\002\001\001\000\030\007\u0158\014\u0151\020" +
    "\u0150\027\u0153\030\076\031\065\041\u015c\043\u017f\046\075" +
    "\047\u0152\050\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\140\016" +
    "\124\017\123\020\122\024\252\025\255\033\253\034\u0193" +
    "\035\250\055\131\056\136\001\001\000\030\011\140\016" +
    "\124\017\123\020\122\024\252\025\255\033\253\034\u0189" +
    "\035\250\055\131\056\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u018e\046\075\047\u0152\050" +
    "\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u018c\046\075\047\u0152\050" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\u0158\014\u0151\020" +
    "\u0150\027\u0153\030\076\031\065\041\u015c\043\u0191\046\075" +
    "\047\u0152\050\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\u0158\014\u0151\020\u0150" +
    "\027\u0153\030\076\031\065\041\u015c\043\u0195\046\075\047" +
    "\u0152\050\u0157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u01b9\046\075\047\u0152\050" +
    "\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u019d\046\075\047\u0152\050" +
    "\u0157\001\001\000\004\040\u01a0\001\001\000\030\011\140" +
    "\016\124\017\123\020\122\024\252\025\255\033\253\034" +
    "\u01a9\035\250\055\131\056\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u01a7\046\075\047\u0152\050" +
    "\u0157\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u01a6\046\075\047\u0152\050" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076" +
    "\031\065\041\u015c\043\u01b0\046\075\047\u0152\050\u0157\001" +
    "\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076" +
    "\031\065\041\u015c\043\u01ae\046\075\047\u0152\050\u0157\001" +
    "\001\000\004\040\u01af\001\001\000\002\001\001\000\004" +
    "\040\u01b1\001\001\000\002\001\001\000\030\007\u0158\014" +
    "\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u01b3" +
    "\046\075\047\u0152\050\u0157\001\001\000\004\040\u01b4\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\u0158" +
    "\014\u0151\020\u0150\027\u0153\030\076\031\065\041\u015c\043" +
    "\u01b7\046\075\047\u0152\050\u0157\001\001\000\004\040\u01b8" +
    "\001\001\000\002\001\001\000\004\040\u01ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031\065\041" +
    "\u015c\043\u01be\046\075\047\u0152\050\u0157\001\001\000\004" +
    "\040\u01bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\u0158\014\u0151" +
    "\020\u0150\027\u0153\030\076\031\065\041\u015c\043\u01c4\046" +
    "\075\047\u0152\050\u0157\001\001\000\004\040\u01c5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153\030" +
    "\076\031\065\041\u015c\043\u01cd\046\075\047\u0152\050\u0157" +
    "\001\001\000\002\001\001\000\030\007\u0158\014\u0151\020" +
    "\u0150\027\u0153\030\076\031\065\041\u015c\043\u01d3\046\075" +
    "\047\u0152\050\u0157\001\001\000\030\007\u0158\014\u0151\020" +
    "\u0150\027\u0153\030\076\031\065\041\u015c\043\u01d0\046\075" +
    "\047\u0152\050\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\u0158\014\u0151\020\u0150\027\u0153\030\076\031\065" +
    "\041\u015c\043\u01d9\046\075\047\u0152\050\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\047\013\045\032\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\014\u0151\020\u0150\027\u0153" +
    "\030\076\031\065\041\u015c\043\u01e0\046\075\047\u0152\050" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u01ee\001\001\000\004\014\u01e7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u01f2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0217\001\001" +
    "\000\006\010\u0203\057\u0207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\047\013\u0209\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\u020f\056\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\u0216\016\124\017\123\020\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u0219\001\001\000\002\001\001\000\006\012\047\013\u021b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0220\005\024\006\015" +
    "\014\016\045\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0225" +
    "\005\024\006\015\014\016\045\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Nodo RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = md;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= DECLARACION MDLINP 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= saltoLinea MDLINP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (m != null){
                        RESULT=m;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= FUNC MDLINP 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END STRUCTURE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            Nodo node = new Nodo("STRUCTURE",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            if (d != null){
                                node.addHijo(d);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTUREDECLA ::= STRUCTURE error saltoLinea DECLARACION END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCTUREDECLA ::= STRUCTURE identificador error DECLARACION END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea error END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("error en la declaracion del structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }
                        if (s != null){
                            node.addHijo(s);
                        }                          
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (s != null){
                        RESULT = s;   
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUBINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIFSUB ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DOWHILESUB ::= error WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DOWHILESUB ::= DO error CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOWHILESUB ::= DO WHILE error saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOWHILESUB ::= DO WHILE CONDICION error SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(o);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FORSUB ::= error COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FORSUB ::= FOR error TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FORSUB ::= FOR COUNTER error OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FORSUB ::= FOR COUNTER TO OPARIT error SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (f != null){
                            node.addHijo(f);
                        }                        
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (f != null){
                        node.addHijo(f);
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ff = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(ff);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SIFFUNC ::= ELSE saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }
                    if (f != null){
                        node.addHijo(f);
                    }
                    node.addHijo(s);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIFFUNC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (f != null){
                                node.addHijo(f);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DOWHILEFUNC ::= error WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DOWHILEFUNC ::= DO error CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DOWHILEFUNC ::= DO WHILE error saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DOWHILEFUNC ::= DO WHILE CONDICION error FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(o);
                            if (f != null){
                                node.addHijo(f);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FORFUNC ::= error COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FORFUNC ::= FOR error TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FORFUNC ::= FOR COUNTER error OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FORFUNC ::= FOR COUNTER TO OPARIT error FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETVAL ::= RETURN VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VAL ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VAL ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COUNTER ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ai = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=ai;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo node = new Nodo("=",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            node.addHijo(new Nodo("INTEGER",parser.cont));
                            parser.cont++;
                            node.addHijo(op);
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COUNTER ::= error AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(i,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMCALL ::= VARCALL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMCALL ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARCALL ::= VARCALL COMA VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(val);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARCALL ::= VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARCALL ::= VARCALL error 
            {
              Nodo RESULT =null;
		 errores.add("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= NOT CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(v2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 
                    RESULT="=";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALCOND ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALCOND ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMS ::= VARS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGN ::= ASIGNOTRO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGN ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGN ::= ASIGNSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(l,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(l,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALASIGN ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALASIGN ::= TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALASIGN ::= FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("FALSE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALASIGN ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(ustr,parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALASIGN ::= READ 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("read console",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v+ustr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT= v+v2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALUNIRSTR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALUNIRSTR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALUNIRSTR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ASIGNINT ::= identificador error VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ASIGNINT ::= error OPASING VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPASING ::= IGUAL 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPASING ::= OPMULTI IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPASING ::= OPADICION IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VALINT ::= OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPARIT ::= OPARIT OPADICION OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPARIT ::= OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP ::= OP OPMULTI OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP ::= OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPP ::= INTEGER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(i,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPP ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPP ::= CALL 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = c;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPP ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= DIM T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= DIM error 
            {
              Nodo RESULT =null;
		 errores.add("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // T ::= identificador AS TIPOIGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(t);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // T ::= identificador AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // T ::= identificador AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VARS ::= CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VARS ::= CANTVARS error 
            {
              Nodo RESULT =null;
		 errores.add("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CANTVARS ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("INTEGER",parser.cont));
                    parser.cont++;
                    node.addHijo(o);
                    RESULT=node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(str.substring(1,str.length()-1),parser.cont));
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("TRUE",parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("FALSE",parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(ustr,parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPOIGUAL ::= identificador IGUAL NEW CALL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VALWR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VALWR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VALWR ::= UNIRSTRNG 
            {
              String RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ustr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VALWR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
