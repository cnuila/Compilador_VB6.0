
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\060\010\000\002\060" +
    "\010\000\002\060\010\000\002\060\010\000\002\060\010" +
    "\000\002\060\010\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\005\010" +
    "\000\002\004\013\000\002\004\013\000\002\004\013\000" +
    "\002\004\013\000\002\004\013\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\005\000" +
    "\002\007\002\000\002\056\012\000\002\056\012\000\002" +
    "\056\012\000\002\056\012\000\002\056\012\000\002\010" +
    "\010\000\002\010\005\000\002\010\002\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\005\000" +
    "\002\033\010\000\002\033\010\000\002\032\011\000\002" +
    "\012\015\000\002\012\015\000\002\012\015\000\002\012" +
    "\015\000\002\012\015\000\002\012\015\000\002\012\015" +
    "\000\002\013\004\000\002\013\004\000\002\013\005\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\002\000\002\013\005\000\002\013\004" +
    "\000\002\057\012\000\002\057\012\000\002\057\012\000" +
    "\002\057\012\000\002\057\012\000\002\014\010\000\002" +
    "\014\005\000\002\014\002\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\005\000\002\034\011" +
    "\000\002\035\010\000\002\035\010\000\002\015\004\000" +
    "\002\016\003\000\002\016\003\000\002\040\003\000\002" +
    "\040\007\000\002\017\006\000\002\017\006\000\002\021" +
    "\003\000\002\021\002\000\002\020\005\000\002\020\003" +
    "\000\002\020\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\022\003\000\002\023\005\000\002" +
    "\025\003\000\002\025\003\000\002\024\003\000\002\024" +
    "\003\000\002\011\003\000\002\011\002\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\053\005\000" +
    "\002\006\005\000\002\006\005\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\050\005\000\002\050\005\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\052\003\000\002" +
    "\052\004\000\002\052\004\000\002\045\003\000\002\041" +
    "\005\000\002\041\003\000\002\042\005\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\005\000\002\043\003\000\002\037\004\000\002" +
    "\037\004\000\002\036\005\000\002\036\007\000\002\036" +
    "\011\000\002\036\007\000\002\036\005\000\002\036\010" +
    "\000\002\031\007\000\002\031\005\000\002\031\004\000" +
    "\002\030\005\000\002\030\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\054\006\000\002\054\006\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\007\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01da\000\006\003\004\036\005\001\002\000\004\014" +
    "\u01d8\001\002\000\006\003\010\014\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\015" +
    "\u01d4\001\002\000\006\003\012\015\013\001\002\000\014" +
    "\012\021\015\020\016\014\037\022\057\023\001\002\000" +
    "\014\012\021\015\020\016\014\037\022\057\023\001\002" +
    "\000\006\003\u01b3\014\u01b4\001\002\000\006\003\u01ad\006" +
    "\u01ae\001\002\000\014\012\021\015\020\016\014\037\022" +
    "\057\023\001\002\000\014\012\021\015\020\016\014\037" +
    "\022\057\023\001\002\000\014\012\021\015\020\016\014" +
    "\037\022\057\023\001\002\000\004\014\u01a5\001\002\000" +
    "\006\003\u0120\014\u0121\001\002\000\006\003\042\014\043" +
    "\001\002\000\014\012\021\015\020\016\014\037\022\057" +
    "\023\001\002\000\014\012\021\015\031\016\014\037\022" +
    "\057\023\001\002\000\014\012\021\015\031\016\014\037" +
    "\022\057\023\001\002\000\006\003\ufff7\006\ufff7\001\002" +
    "\000\014\012\021\015\031\016\014\037\022\057\023\001" +
    "\002\000\020\003\ufff0\006\ufff0\012\021\015\031\016\014" +
    "\037\022\057\023\001\002\000\014\012\021\015\031\016" +
    "\014\037\022\057\023\001\002\000\014\012\021\015\031" +
    "\016\014\037\022\057\023\001\002\000\006\003\ufff3\006" +
    "\ufff3\001\002\000\006\003\ufff1\006\ufff1\001\002\000\006" +
    "\003\ufff4\006\ufff4\001\002\000\006\003\ufff5\006\ufff5\001" +
    "\002\000\006\003\ufff2\006\ufff2\001\002\000\006\003\ufff6" +
    "\006\ufff6\001\002\000\004\040\u0117\001\002\000\006\003" +
    "\044\040\045\001\002\000\006\014\047\041\uff95\001\002" +
    "\000\010\003\uff95\014\047\041\uff95\001\002\000\006\003" +
    "\uff96\041\uff96\001\002\000\010\003\uff68\017\uff68\020\uff68" +
    "\001\002\000\010\003\u010a\017\u0108\020\u0109\001\002\000" +
    "\006\003\053\041\052\001\002\000\006\003\364\020\363" +
    "\001\002\000\004\020\054\001\002\000\010\021\057\024" +
    "\055\026\056\001\002\000\056\003\uff61\004\uff61\005\uff61" +
    "\006\uff61\010\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016" +
    "\uff61\017\uff61\037\uff61\041\uff61\042\uff61\043\uff61\044\uff61" +
    "\046\uff61\051\uff61\053\uff61\054\uff61\057\uff61\061\uff61\001" +
    "\002\000\056\003\uff60\004\uff60\005\uff60\006\uff60\010\uff60" +
    "\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\037" +
    "\uff60\041\uff60\042\uff60\043\uff60\044\uff60\046\uff60\051\uff60" +
    "\053\uff60\054\uff60\057\uff60\061\uff60\001\002\000\056\003" +
    "\uff5f\004\uff5f\005\uff5f\006\uff5f\010\uff5f\012\uff5f\013\uff5f" +
    "\014\uff5f\015\uff5f\016\uff5f\017\uff5f\037\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\044\uff5f\046\uff5f\051\uff5f\053\uff5f\054\uff5f" +
    "\057\uff5f\061\uff5f\001\002\000\004\015\061\001\002\000" +
    "\032\003\104\004\072\006\uffbd\013\106\014\107\015\100" +
    "\016\014\043\062\044\105\051\077\054\070\061\074\001" +
    "\002\000\004\057\361\001\002\000\042\003\104\004\072" +
    "\005\uffbd\006\uffbd\010\uffbd\013\106\014\107\015\100\016" +
    "\014\043\062\044\105\046\uffbd\051\077\053\uffbd\054\070" +
    "\061\074\001\002\000\042\003\104\004\072\005\uffbd\006" +
    "\uffbd\010\uffbd\013\106\014\107\015\100\016\014\043\062" +
    "\044\105\046\uffbd\051\077\053\uffbd\054\070\061\074\001" +
    "\002\000\044\003\uff94\004\uff94\005\uff94\006\uff94\010\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\042\uff94\043\uff94\044" +
    "\uff94\046\uff94\051\uff94\053\uff94\054\uff94\061\uff94\001\002" +
    "\000\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013" +
    "\106\014\107\015\100\016\014\043\062\044\105\046\uffbd" +
    "\051\077\053\uffbd\054\070\061\074\001\002\000\042\003" +
    "\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\107" +
    "\015\100\016\014\043\062\044\105\046\uffbd\051\077\053" +
    "\uffbd\054\070\061\074\001\002\000\022\003\134\014\137" +
    "\022\126\023\132\025\135\040\133\056\127\060\117\001" +
    "\002\000\004\006\352\001\002\000\024\003\271\014\137" +
    "\022\126\023\132\025\135\034\234\040\133\056\127\060" +
    "\117\001\002\000\042\003\104\004\072\005\uffbd\006\uffbd" +
    "\010\uffbd\013\106\014\107\015\100\016\014\043\062\044" +
    "\105\046\uffbd\051\077\053\uffbd\054\070\061\074\001\002" +
    "\000\006\003\256\040\257\001\002\000\044\003\uff92\004" +
    "\uff92\005\uff92\006\uff92\010\uff92\013\uff92\014\uff92\015\uff92" +
    "\016\uff92\042\uff92\043\uff92\044\uff92\046\uff92\051\uff92\053" +
    "\uff92\054\uff92\061\uff92\001\002\000\044\003\uff93\004\uff93" +
    "\005\uff93\006\uff93\010\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\042\uff93\043\uff93\044\uff93\046\uff93\051\uff93\053\uff93" +
    "\054\uff93\061\uff93\001\002\000\006\015\227\050\226\001" +
    "\002\000\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd" +
    "\013\106\014\107\015\100\016\014\043\062\044\105\046" +
    "\uffbd\051\077\053\uffbd\054\070\061\074\001\002\000\042" +
    "\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014" +
    "\107\015\100\016\014\043\062\044\105\046\uffbd\051\077" +
    "\053\uffbd\054\070\061\074\001\002\000\042\003\104\004" +
    "\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\107\015\100" +
    "\016\014\043\062\044\105\046\uffbd\051\077\053\uffbd\054" +
    "\070\061\074\001\002\000\042\003\104\004\072\005\uffbd" +
    "\006\uffbd\010\uffbd\013\106\014\107\015\100\016\014\043" +
    "\062\044\105\046\uffbd\051\077\053\uffbd\054\070\061\074" +
    "\001\002\000\054\003\104\004\072\005\uffbd\006\uffbd\010" +
    "\uffbd\011\211\013\106\014\107\015\100\016\014\030\111" +
    "\031\115\040\146\043\062\044\105\046\uffbd\051\077\053" +
    "\uffbd\054\070\057\023\061\074\001\002\000\006\003\200" +
    "\014\201\001\002\000\010\011\174\030\111\031\115\001" +
    "\002\000\014\003\112\011\113\030\111\031\115\040\114" +
    "\001\002\000\012\003\144\014\145\025\135\040\133\001" +
    "\002\000\004\011\171\001\002\000\012\003\144\014\145" +
    "\025\135\040\133\001\002\000\022\003\uff81\014\uff81\022" +
    "\126\023\132\025\uff81\040\uff81\056\127\060\117\001\002" +
    "\000\024\003\134\014\137\022\126\023\132\025\135\040" +
    "\133\041\uffa3\056\127\060\117\001\002\000\004\011\116" +
    "\001\002\000\012\003\uff80\014\uff80\025\uff80\040\uff80\001" +
    "\002\000\062\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\027\uff8a\032\uff8a\033\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\046\uff8a\051\uff8a\053\uff8a\054\uff8a\061\uff8a\001" +
    "\002\000\010\003\uffa1\017\uffa1\041\uffa1\001\002\000\004" +
    "\041\166\001\002\000\076\003\uff77\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\015\uff77\016\uff77\017\uff77\027\uff77\030\uff77\031\uff77\032" +
    "\uff77\033\uff77\037\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\051\uff77\053\uff77\054\uff77\057\uff77\061" +
    "\uff77\001\002\000\076\003\uff7c\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\016\uff7c\017\uff7c\027\uff7c\030\uff7c\031\151\032\uff7c" +
    "\033\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\051\uff7c\053\uff7c\054\uff7c\057\uff7c\061\uff7c" +
    "\001\002\000\076\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033" +
    "\uff7a\037\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\051\uff7a\053\uff7a\054\uff7a\057\uff7a\061\uff7a\001" +
    "\002\000\046\003\uffaa\004\uffaa\005\uffaa\006\uffaa\010\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\041\uffaa\043" +
    "\uffaa\044\uffaa\046\uffaa\051\uffaa\053\uffaa\054\uffaa\061\uffaa" +
    "\001\002\000\062\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\027\uff8d\032\uff8d\033\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\046\uff8d\051\uff8d\053\uff8d\054\uff8d\061\uff8d" +
    "\001\002\000\064\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\027\uff8e\032\uff8e\033\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\046\uff8e\051\uff8e\053\uff8e\054\uff8e\055\uff87" +
    "\061\uff8e\001\002\000\010\003\164\017\163\041\uffa4\001" +
    "\002\000\062\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\027\uff8b\032\uff8b\033\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\046\uff8b\051\uff8b\053\uff8b\054\uff8b\061\uff8b\001" +
    "\002\000\062\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\027\uff8c\032\uff8c\033\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\046\uff8c\051\uff8c\053\uff8c\054\uff8c\061\uff8c\001" +
    "\002\000\012\003\144\014\145\025\135\040\133\001\002" +
    "\000\072\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010" +
    "\uff75\011\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\040\146\041" +
    "\uff75\042\uff75\043\uff75\044\uff75\046\uff75\051\uff75\053\uff75" +
    "\054\uff75\055\uff85\061\uff75\001\002\000\076\003\uff79\004" +
    "\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79" +
    "\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\027\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\037\uff79\041\uff79\042\uff79" +
    "\043\uff79\044\uff79\045\uff79\046\uff79\051\uff79\053\uff79\054" +
    "\uff79\057\uff79\061\uff79\001\002\000\004\055\153\001\002" +
    "\000\072\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\040\114\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\046\uff78\051\uff78\053\uff78" +
    "\054\uff78\055\uff86\061\uff78\001\002\000\066\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\027\uff7e\030\142\032" +
    "\uff7e\033\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\051\uff7e\053\uff7e\054\uff7e\061\uff7e\001\002\000" +
    "\046\003\uffa9\004\uffa9\005\uffa9\006\uffa9\010\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\041\uffa9\043\uffa9\044" +
    "\uffa9\046\uffa9\051\uffa9\053\uffa9\054\uffa9\061\uffa9\001\002" +
    "\000\012\003\144\014\145\025\135\040\133\001\002\000" +
    "\076\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\027\uff7d\030\uff7d\031\151\032\uff7d\033\uff7d\037\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\051" +
    "\uff7d\053\uff7d\054\uff7d\057\uff7d\061\uff7d\001\002\000\100" +
    "\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\037\uff75\040" +
    "\146\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\051\uff75\053\uff75\054\uff75\057\uff75\061\uff75\001\002\000" +
    "\100\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\037\uff78" +
    "\040\114\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\051\uff78\053\uff78\054\uff78\057\uff78\061\uff78\001\002" +
    "\000\024\003\134\014\137\022\126\023\132\025\135\040" +
    "\133\041\uffa3\056\127\060\117\001\002\000\004\041\150" +
    "\001\002\000\076\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\051\uffa5\053\uffa5\054\uffa5\057\uffa5\061\uffa5\001" +
    "\002\000\012\003\144\014\145\025\135\040\133\001\002" +
    "\000\076\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\037" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\051\uff7b\053\uff7b\054\uff7b\057\uff7b\061\uff7b\001\002\000" +
    "\010\003\155\014\156\056\154\001\002\000\072\003\uff87" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\027\uff87" +
    "\032\uff87\033\uff87\037\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\046\uff87\051\uff87\053\uff87\054\uff87\055\uff87\057\uff87" +
    "\061\uff87\001\002\000\072\003\uff85\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\027\uff85\032\uff85\033\uff85\037" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\046\uff85\051\uff85" +
    "\053\uff85\054\uff85\055\uff85\057\uff85\061\uff85\001\002\000" +
    "\072\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\027\uff86\032\uff86\033\uff86\037\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\046\uff86\051\uff86\053\uff86\054\uff86\055" +
    "\uff86\057\uff86\061\uff86\001\002\000\072\003\uff88\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\027\uff88\032\uff88" +
    "\033\uff88\037\uff88\041\uff88\042\uff88\043\uff88\044\uff88\046" +
    "\uff88\051\uff88\053\uff88\054\uff88\055\153\057\uff88\061\uff88" +
    "\001\002\000\070\003\uff89\004\uff89\005\uff89\006\uff89\007" +
    "\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\016\uff89\017\uff89\027\uff89\032\uff89\033\uff89\037\uff89\041" +
    "\uff89\042\uff89\043\uff89\044\uff89\046\uff89\051\uff89\053\uff89" +
    "\054\uff89\057\uff89\061\uff89\001\002\000\006\030\142\041" +
    "\162\001\002\000\076\003\uff76\004\uff76\005\uff76\006\uff76" +
    "\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\037\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\uff76\051\uff76\053\uff76\054\uff76\057\uff76\061\uff76" +
    "\001\002\000\022\003\134\014\137\022\126\023\132\025" +
    "\135\040\133\056\127\060\117\001\002\000\010\003\uffa0" +
    "\017\uffa0\041\uffa0\001\002\000\010\003\uffa2\017\uffa2\041" +
    "\uffa2\001\002\000\076\003\uffa6\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\051\uffa6\053\uffa6\054\uffa6\057\uffa6\061\uffa6" +
    "\001\002\000\044\003\uff91\004\uff91\005\uff91\006\uff91\010" +
    "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\042\uff91\043\uff91" +
    "\044\uff91\046\uff91\051\uff91\053\uff91\054\uff91\061\uff91\001" +
    "\002\000\046\003\uff83\004\uff83\005\uff83\006\uff83\010\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\051\uff83\053\uff83\054\uff83\061\uff83" +
    "\001\002\000\012\003\uff7f\014\uff7f\025\uff7f\040\uff7f\001" +
    "\002\000\046\003\uff84\004\uff84\005\uff84\006\uff84\010\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\042\uff84\043\uff84\044" +
    "\uff84\045\uff84\046\uff84\051\uff84\053\uff84\054\uff84\061\uff84" +
    "\001\002\000\012\003\144\014\145\025\135\040\133\001" +
    "\002\000\022\003\uff81\014\uff81\022\126\023\132\025\uff81" +
    "\040\uff81\056\127\060\117\001\002\000\044\003\uff90\004" +
    "\uff90\005\uff90\006\uff90\010\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\042\uff90\043\uff90\044\uff90\046\uff90\051\uff90\053" +
    "\uff90\054\uff90\061\uff90\001\002\000\044\003\uff8f\004\uff8f" +
    "\005\uff8f\006\uff8f\010\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\046\uff8f\051\uff8f\053\uff8f" +
    "\054\uff8f\061\uff8f\001\002\000\004\045\uffa8\001\002\000" +
    "\010\011\211\030\111\031\115\001\002\000\014\003\112" +
    "\011\211\020\210\030\111\031\115\001\002\000\004\045" +
    "\203\001\002\000\012\003\144\014\145\025\135\040\133" +
    "\001\002\000\006\015\205\030\142\001\002\000\032\003" +
    "\104\004\072\013\106\014\107\015\100\016\014\043\062" +
    "\044\105\046\uffbd\051\077\054\070\061\074\001\002\000" +
    "\004\046\207\001\002\000\042\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\010\uffae\013\uffae\014\uffae\015\uffae\016\uffae\043" +
    "\uffae\044\uffae\046\uffae\051\uffae\053\uffae\054\uffae\061\uffae" +
    "\001\002\000\004\024\212\001\002\000\012\003\uff81\014" +
    "\uff81\025\uff81\040\uff81\001\002\000\004\011\213\001\002" +
    "\000\012\003\144\014\145\025\135\040\133\001\002\000" +
    "\006\030\142\045\uffa7\001\002\000\012\003\144\014\145" +
    "\025\135\040\133\001\002\000\046\003\uff82\004\uff82\005" +
    "\uff82\006\uff82\010\uff82\013\uff82\014\uff82\015\uff82\016\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\051\uff82\053" +
    "\uff82\054\uff82\061\uff82\001\002\000\014\005\uffbb\006\uffbb" +
    "\010\uffbb\046\uffbb\053\uffbb\001\002\000\042\003\104\004" +
    "\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\107\015\100" +
    "\016\014\043\062\044\105\046\uffbd\051\077\053\uffbd\054" +
    "\070\061\074\001\002\000\014\005\uffbc\006\uffbc\010\uffbc" +
    "\046\uffbc\053\uffbc\001\002\000\014\005\uffbf\006\uffbf\010" +
    "\uffbf\046\uffbf\053\uffbf\001\002\000\014\005\uffc1\006\uffc1" +
    "\010\uffc1\046\uffc1\053\uffc1\001\002\000\014\005\uffc0\006" +
    "\uffc0\010\uffc0\046\uffc0\053\uffc0\001\002\000\014\005\uffc6" +
    "\006\uffc6\010\uffc6\046\uffc6\053\uffc6\001\002\000\024\003" +
    "\134\014\137\022\126\023\132\025\135\034\234\040\133" +
    "\056\127\060\117\001\002\000\032\003\104\004\072\013" +
    "\106\014\107\015\100\016\014\043\062\044\105\051\077" +
    "\053\uffbd\054\070\061\074\001\002\000\004\053\231\001" +
    "\002\000\004\050\232\001\002\000\024\003\134\014\137" +
    "\022\126\023\132\025\135\034\234\040\133\056\127\060" +
    "\117\001\002\000\052\003\uff9c\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\032" +
    "\uff9c\033\uff9c\042\uff9c\043\uff9c\044\uff9c\046\uff9c\051\uff9c" +
    "\053\uff9c\054\uff9c\061\uff9c\001\002\000\022\003\134\014" +
    "\137\022\126\023\132\025\135\040\133\056\127\060\117" +
    "\001\002\000\056\003\uff98\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\027\uff98\032\uff98\033\uff98\042\uff98\043\uff98\044\uff98\046" +
    "\uff98\051\uff98\053\uff98\054\uff98\061\uff98\001\002\000\006" +
    "\011\247\027\245\001\002\000\046\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\010\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\032\241\033\242\043\uffac\044\uffac\046\uffac\051\uffac\053" +
    "\uffac\054\uffac\061\uffac\001\002\000\056\003\uff97\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013\uff97\014" +
    "\uff97\015\uff97\016\uff97\027\uff97\032\uff97\033\uff97\042\uff97" +
    "\043\uff97\044\uff97\046\uff97\051\uff97\053\uff97\054\uff97\061" +
    "\uff97\001\002\000\022\003\134\014\137\022\126\023\132" +
    "\025\135\040\133\056\127\060\117\001\002\000\022\003" +
    "\134\014\137\022\126\023\132\025\135\040\133\056\127" +
    "\060\117\001\002\000\052\003\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\032\uff9e\033\uff9e\042\uff9e\043\uff9e\044\uff9e\046\uff9e\051" +
    "\uff9e\053\uff9e\054\uff9e\061\uff9e\001\002\000\052\003\uff9f" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\032\uff9f\033\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\046\uff9f\051\uff9f\053\uff9f\054\uff9f\061\uff9f\001" +
    "\002\000\022\003\uff9a\014\uff9a\022\uff9a\023\uff9a\025\uff9a" +
    "\040\uff9a\056\uff9a\060\uff9a\001\002\000\022\003\134\014" +
    "\137\022\126\023\132\025\135\040\133\056\127\060\117" +
    "\001\002\000\022\003\uff99\014\uff99\022\uff99\023\uff99\025" +
    "\uff99\040\uff99\056\uff99\060\uff99\001\002\000\052\003\uff9b" +
    "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\032\uff9b\033\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\046\uff9b\051\uff9b\053\uff9b\054\uff9b\061\uff9b\001" +
    "\002\000\052\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\032\uff9d\033" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\046\uff9d\051\uff9d\053\uff9d" +
    "\054\uff9d\061\uff9d\001\002\000\010\015\253\032\241\033" +
    "\242\001\002\000\032\003\104\004\072\013\106\014\107" +
    "\015\100\016\014\043\062\044\105\051\077\053\uffbd\054" +
    "\070\061\074\001\002\000\004\053\255\001\002\000\042" +
    "\003\uffad\004\uffad\005\uffad\006\uffad\010\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\043\uffad\044\uffad\046\uffad\051\uffad" +
    "\053\uffad\054\uffad\061\uffad\001\002\000\010\003\261\014" +
    "\262\056\260\001\002\000\010\003\261\014\262\056\260" +
    "\001\002\000\006\041\uff5b\055\uff87\001\002\000\006\041" +
    "\uff59\055\uff85\001\002\000\006\041\uff5c\055\uff86\001\002" +
    "\000\004\041\uff5a\001\002\000\004\041\265\001\002\000" +
    "\044\003\uff5e\004\uff5e\005\uff5e\006\uff5e\010\uff5e\013\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\042\uff5e\043\uff5e\044\uff5e\046" +
    "\uff5e\051\uff5e\053\uff5e\054\uff5e\061\uff5e\001\002\000\004" +
    "\041\267\001\002\000\044\003\uff5d\004\uff5d\005\uff5d\006" +
    "\uff5d\010\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\046\uff5d\051\uff5d\053\uff5d\054\uff5d\061" +
    "\uff5d\001\002\000\014\005\uffc4\006\uffc4\010\uffc4\046\uffc4" +
    "\053\uffc4\001\002\000\020\007\344\011\uff75\027\uff75\030" +
    "\uff75\031\uff75\040\146\055\uff85\001\002\000\012\003\274" +
    "\007\273\032\241\033\242\001\002\000\006\003\331\015" +
    "\332\001\002\000\004\015\275\001\002\000\036\003\104" +
    "\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\107\015" +
    "\100\016\014\043\062\044\105\051\077\054\070\061\074" +
    "\001\002\000\010\005\301\006\uffb3\010\300\001\002\000" +
    "\004\006\327\001\002\000\024\003\306\014\137\022\126" +
    "\023\132\025\135\034\234\040\133\056\127\060\117\001" +
    "\002\000\006\003\302\015\303\001\002\000\010\005\301" +
    "\006\uffb3\010\300\001\002\000\010\005\301\006\uffb3\010" +
    "\300\001\002\000\004\006\uffb4\001\002\000\004\006\uffaf" +
    "\001\002\000\020\007\323\011\uff75\027\uff75\030\uff75\031" +
    "\uff75\040\146\055\uff85\001\002\000\012\003\310\007\311" +
    "\032\241\033\242\001\002\000\004\015\320\001\002\000" +
    "\006\003\312\015\313\001\002\000\036\003\104\004\072" +
    "\005\uffbd\006\uffbd\010\uffbd\013\106\014\107\015\100\016" +
    "\014\043\062\044\105\051\077\054\070\061\074\001\002" +
    "\000\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013" +
    "\106\014\107\015\100\016\014\043\062\044\105\051\077" +
    "\054\070\061\074\001\002\000\010\005\301\006\uffb3\010" +
    "\300\001\002\000\004\006\uffb5\001\002\000\010\005\301" +
    "\006\uffb3\010\300\001\002\000\004\006\uffb0\001\002\000" +
    "\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106" +
    "\014\107\015\100\016\014\043\062\044\105\051\077\054" +
    "\070\061\074\001\002\000\010\005\301\006\uffb3\010\300" +
    "\001\002\000\004\006\uffb1\001\002\000\004\015\324\001" +
    "\002\000\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd" +
    "\013\106\014\107\015\100\016\014\043\062\044\105\051" +
    "\077\054\070\061\074\001\002\000\010\005\301\006\uffb3" +
    "\010\300\001\002\000\004\006\uffb2\001\002\000\004\004" +
    "\330\001\002\000\042\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\043\uffb8\044" +
    "\uffb8\046\uffb8\051\uffb8\053\uffb8\054\uffb8\061\uffb8\001\002" +
    "\000\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013" +
    "\106\014\107\015\100\016\014\043\062\044\105\051\077" +
    "\054\070\061\074\001\002\000\036\003\104\004\072\005" +
    "\uffbd\006\uffbd\010\uffbd\013\106\014\107\015\100\016\014" +
    "\043\062\044\105\051\077\054\070\061\074\001\002\000" +
    "\010\005\301\006\uffb3\010\300\001\002\000\004\006\335" +
    "\001\002\000\006\003\336\004\337\001\002\000\042\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\010\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\043\uffb6\044\uffb6\046\uffb6\051\uffb6\053" +
    "\uffb6\054\uffb6\061\uffb6\001\002\000\042\003\uffba\004\uffba" +
    "\005\uffba\006\uffba\010\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\043\uffba\044\uffba\046\uffba\051\uffba\053\uffba\054\uffba" +
    "\061\uffba\001\002\000\010\005\301\006\uffb3\010\300\001" +
    "\002\000\004\006\342\001\002\000\004\004\343\001\002" +
    "\000\042\003\uffb7\004\uffb7\005\uffb7\006\uffb7\010\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\043\uffb7\044\uffb7\046\uffb7" +
    "\051\uffb7\053\uffb7\054\uffb7\061\uffb7\001\002\000\004\015" +
    "\345\001\002\000\036\003\104\004\072\005\uffbd\006\uffbd" +
    "\010\uffbd\013\106\014\107\015\100\016\014\043\062\044" +
    "\105\051\077\054\070\061\074\001\002\000\010\005\301" +
    "\006\uffb3\010\300\001\002\000\004\006\350\001\002\000" +
    "\004\004\351\001\002\000\042\003\uffb9\004\uffb9\005\uffb9" +
    "\006\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\043" +
    "\uffb9\044\uffb9\046\uffb9\051\uffb9\053\uffb9\054\uffb9\061\uffb9" +
    "\001\002\000\004\057\353\001\002\000\050\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\037\uffcb\043\uffcb\044\uffcb\046\uffcb\051" +
    "\uffcb\053\uffcb\054\uffcb\057\uffcb\061\uffcb\001\002\000\042" +
    "\003\uffab\004\uffab\005\uffab\006\uffab\010\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\043\uffab\044\uffab\046\uffab\051\uffab" +
    "\053\uffab\054\uffab\061\uffab\001\002\000\014\005\uffc7\006" +
    "\uffc7\010\uffc7\046\uffc7\053\uffc7\001\002\000\014\005\uffc2" +
    "\006\uffc2\010\uffc2\046\uffc2\053\uffc2\001\002\000\014\005" +
    "\uffbe\006\uffbe\010\uffbe\046\uffbe\053\uffbe\001\002\000\014" +
    "\005\uffc3\006\uffc3\010\uffc3\046\uffc3\053\uffc3\001\002\000" +
    "\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106" +
    "\014\107\015\100\016\014\043\062\044\105\046\uffbd\051" +
    "\077\053\uffbd\054\070\061\074\001\002\000\014\005\uffc5" +
    "\006\uffc5\010\uffc5\046\uffc5\053\uffc5\001\002\000\012\003" +
    "\372\021\057\024\055\026\056\001\002\000\010\021\057" +
    "\024\055\026\056\001\002\000\004\015\366\001\002\000" +
    "\032\003\104\004\072\006\uffbd\013\106\014\107\015\100" +
    "\016\014\043\062\044\105\051\077\054\070\061\074\001" +
    "\002\000\004\006\370\001\002\000\004\057\371\001\002" +
    "\000\050\003\uffca\004\uffca\005\uffca\006\uffca\010\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\037\uffca\043\uffca" +
    "\044\uffca\046\uffca\051\uffca\053\uffca\054\uffca\057\uffca\061" +
    "\uffca\001\002\000\004\015\u0104\001\002\000\006\003\374" +
    "\015\375\001\002\000\032\003\104\004\072\006\uffbd\013" +
    "\106\014\107\015\100\016\014\043\062\044\105\051\077" +
    "\054\070\061\074\001\002\000\032\003\104\004\072\006" +
    "\uffbd\013\106\014\107\015\100\016\014\043\062\044\105" +
    "\051\077\054\070\061\074\001\002\000\004\006\377\001" +
    "\002\000\004\057\u0100\001\002\000\050\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\037\uffce\043\uffce\044\uffce\046\uffce\051\uffce" +
    "\053\uffce\054\uffce\057\uffce\061\uffce\001\002\000\004\006" +
    "\u0102\001\002\000\004\057\u0103\001\002\000\050\003\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\037\uffc8\043\uffc8\044\uffc8\046\uffc8" +
    "\051\uffc8\053\uffc8\054\uffc8\057\uffc8\061\uffc8\001\002\000" +
    "\032\003\104\004\072\006\uffbd\013\106\014\107\015\100" +
    "\016\014\043\062\044\105\051\077\054\070\061\074\001" +
    "\002\000\004\006\u0106\001\002\000\004\057\u0107\001\002" +
    "\000\050\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\037\uffc9\043\uffc9" +
    "\044\uffc9\046\uffc9\051\uffc9\053\uffc9\054\uffc9\057\uffc9\061" +
    "\uffc9\001\002\000\004\014\u010e\001\002\000\010\021\057" +
    "\024\055\026\056\001\002\000\054\003\uff6a\004\uff6a\005" +
    "\uff6a\006\uff6a\010\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\037\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\046" +
    "\uff6a\051\uff6a\053\uff6a\054\uff6a\057\uff6a\061\uff6a\001\002" +
    "\000\056\003\uff6b\004\uff6b\005\uff6b\006\uff6b\010\uff6b\012" +
    "\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017\u010c\037\uff6b" +
    "\041\uff6b\042\uff6b\043\uff6b\044\uff6b\046\uff6b\051\uff6b\053" +
    "\uff6b\054\uff6b\057\uff6b\061\uff6b\001\002\000\004\014\047" +
    "\001\002\000\054\003\uff6c\004\uff6c\005\uff6c\006\uff6c\010" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\037\uff6c" +
    "\041\uff6c\042\uff6c\043\uff6c\044\uff6c\046\uff6c\051\uff6c\053" +
    "\uff6c\054\uff6c\057\uff6c\061\uff6c\001\002\000\010\003\uff69" +
    "\017\uff69\020\uff69\001\002\000\004\041\u0110\001\002\000" +
    "\004\020\u0111\001\002\000\010\021\057\024\055\026\056" +
    "\001\002\000\004\015\u0113\001\002\000\032\003\104\004" +
    "\072\006\uffbd\013\106\014\107\015\100\016\014\043\062" +
    "\044\105\051\077\054\070\061\074\001\002\000\004\006" +
    "\u0115\001\002\000\004\057\u0116\001\002\000\050\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\010\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\037\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\051\uffcc\053\uffcc\054\uffcc\057\uffcc\061\uffcc\001\002\000" +
    "\006\014\047\041\uff95\001\002\000\004\041\u0119\001\002" +
    "\000\004\020\u011a\001\002\000\010\021\057\024\055\026" +
    "\056\001\002\000\004\015\u011c\001\002\000\032\003\104" +
    "\004\072\006\uffbd\013\106\014\107\015\100\016\014\043" +
    "\062\044\105\051\077\054\070\061\074\001\002\000\004" +
    "\006\u011e\001\002\000\004\057\u011f\001\002\000\050\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\037\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\057\uffcd\061\uffcd\001\002" +
    "\000\004\040\u019e\001\002\000\006\003\u0122\040\u0123\001" +
    "\002\000\006\014\047\041\uff95\001\002\000\010\003\uff95" +
    "\014\047\041\uff95\001\002\000\006\003\u0126\041\u0125\001" +
    "\002\000\006\003\u0190\015\u0191\001\002\000\004\015\u0127" +
    "\001\002\000\032\003\u0134\004\u012e\006\uffde\013\106\014" +
    "\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135\051\u012f" +
    "\061\074\001\002\000\004\037\u018e\001\002\000\004\044" +
    "\u0185\001\002\000\042\003\u0134\004\u012e\005\uffde\006\uffde" +
    "\010\uffde\013\106\014\107\015\u0130\016\014\042\u0129\043" +
    "\u0128\044\u0135\046\uffde\051\u012f\053\uffde\061\074\001\002" +
    "\000\042\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013" +
    "\106\014\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135" +
    "\046\uffde\051\u012f\053\uffde\061\074\001\002\000\042\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\107" +
    "\015\u0130\016\014\042\u0129\043\u0128\044\u0135\046\uffde\051" +
    "\u012f\053\uffde\061\074\001\002\000\042\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130\016" +
    "\014\042\u0129\043\u0128\044\u0135\046\uffde\051\u012f\053\uffde" +
    "\061\074\001\002\000\024\003\u0150\014\137\022\126\023" +
    "\132\025\135\034\234\040\133\056\127\060\117\001\002" +
    "\000\006\015\u0147\050\u0146\001\002\000\042\003\u0134\004" +
    "\u012e\005\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130" +
    "\016\014\042\u0129\043\u0128\044\u0135\046\uffde\051\u012f\053" +
    "\uffde\061\074\001\002\000\042\003\u0134\004\u012e\005\uffde" +
    "\006\uffde\010\uffde\013\106\014\107\015\u0130\016\014\042" +
    "\u0129\043\u0128\044\u0135\046\uffde\051\u012f\053\uffde\061\074" +
    "\001\002\000\042\003\u0134\004\u012e\005\uffde\006\uffde\010" +
    "\uffde\013\106\014\107\015\u0130\016\014\042\u0129\043\u0128" +
    "\044\u0135\046\uffde\051\u012f\053\uffde\061\074\001\002\000" +
    "\004\006\u0141\001\002\000\054\003\u0134\004\u012e\005\uffde" +
    "\006\uffde\010\uffde\011\211\013\106\014\107\015\u0130\016" +
    "\014\030\111\031\115\037\u013e\040\146\042\u0129\043\u0128" +
    "\044\u0135\046\uffde\051\u012f\053\uffde\061\074\001\002\000" +
    "\006\003\200\014\201\001\002\000\042\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130\016" +
    "\014\042\u0129\043\u0128\044\u0135\046\uffde\051\u012f\053\uffde" +
    "\061\074\001\002\000\014\005\uffe3\006\uffe3\010\uffe3\046" +
    "\uffe3\053\uffe3\001\002\000\004\045\u0139\001\002\000\012" +
    "\003\144\014\145\025\135\040\133\001\002\000\006\015" +
    "\u013b\030\142\001\002\000\032\003\u0134\004\u012e\013\106" +
    "\014\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135\046" +
    "\uffde\051\u012f\061\074\001\002\000\004\046\u013d\001\002" +
    "\000\042\003\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\051\uffcf\053\uffcf\061\uffcf\001\002\000\042\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\107" +
    "\015\u0130\016\014\042\u0129\043\u0128\044\u0135\046\uffde\051" +
    "\u012f\053\uffde\061\074\001\002\000\014\005\uffe0\006\uffe0" +
    "\010\uffe0\046\uffe0\053\uffe0\001\002\000\014\005\uffdf\006" +
    "\uffdf\010\uffdf\046\uffdf\053\uffdf\001\002\000\004\037\u0142" +
    "\001\002\000\014\012\uffeb\015\uffeb\016\uffeb\037\uffeb\057" +
    "\uffeb\001\002\000\014\005\uffe4\006\uffe4\010\uffe4\046\uffe4" +
    "\053\uffe4\001\002\000\014\005\uffe1\006\uffe1\010\uffe1\046" +
    "\uffe1\053\uffe1\001\002\000\014\005\uffe8\006\uffe8\010\uffe8" +
    "\046\uffe8\053\uffe8\001\002\000\024\003\134\014\137\022" +
    "\126\023\132\025\135\034\234\040\133\056\127\060\117" +
    "\001\002\000\032\003\u0134\004\u012e\013\106\014\107\015" +
    "\u0130\016\014\042\u0129\043\u0128\044\u0135\051\u012f\053\uffde" +
    "\061\074\001\002\000\004\053\u0149\001\002\000\004\050" +
    "\u014a\001\002\000\024\003\134\014\137\022\126\023\132" +
    "\025\135\034\234\040\133\056\127\060\117\001\002\000" +
    "\046\003\uffd0\004\uffd0\005\uffd0\006\uffd0\010\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\032\241\033\242\042\uffd0\043" +
    "\uffd0\044\uffd0\046\uffd0\051\uffd0\053\uffd0\061\uffd0\001\002" +
    "\000\010\015\u014d\032\241\033\242\001\002\000\032\003" +
    "\u0134\004\u012e\013\106\014\107\015\u0130\016\014\042\u0129" +
    "\043\u0128\044\u0135\051\u012f\053\uffde\061\074\001\002\000" +
    "\004\053\u014f\001\002\000\042\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\046\uffd1\051\uffd1\053\uffd1\061\uffd1" +
    "\001\002\000\020\007\u017b\011\uff75\027\uff75\030\uff75\031" +
    "\uff75\040\146\055\uff85\001\002\000\012\003\u0152\007\u0153" +
    "\032\241\033\242\001\002\000\004\015\u0176\001\002\000" +
    "\006\003\u0154\015\u0155\001\002\000\036\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130\016" +
    "\014\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002" +
    "\000\036\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013" +
    "\106\014\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135" +
    "\051\u012f\061\074\001\002\000\010\005\u0157\006\uffd6\010" +
    "\u0158\001\002\000\006\003\u016e\015\u016f\001\002\000\024" +
    "\003\u015d\014\137\022\126\023\132\025\135\034\234\040" +
    "\133\056\127\060\117\001\002\000\004\006\u015a\001\002" +
    "\000\006\003\u015b\004\u015c\001\002\000\042\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\051\uffd9\053" +
    "\uffd9\061\uffd9\001\002\000\042\003\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\046\uffdd\051\uffdd\053\uffdd\061\uffdd" +
    "\001\002\000\020\007\u016a\011\uff75\027\uff75\030\uff75\031" +
    "\uff75\040\146\055\uff85\001\002\000\012\003\u015f\007\u0160" +
    "\032\241\033\242\001\002\000\004\015\u0167\001\002\000" +
    "\006\003\u0161\015\u0162\001\002\000\036\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130\016" +
    "\014\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002" +
    "\000\036\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013" +
    "\106\014\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135" +
    "\051\u012f\061\074\001\002\000\010\005\u0157\006\uffd6\010" +
    "\u0158\001\002\000\004\006\uffd8\001\002\000\010\005\u0157" +
    "\006\uffd6\010\u0158\001\002\000\004\006\uffd3\001\002\000" +
    "\036\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106" +
    "\014\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135\051" +
    "\u012f\061\074\001\002\000\010\005\u0157\006\uffd6\010\u0158" +
    "\001\002\000\004\006\uffd4\001\002\000\004\015\u016b\001" +
    "\002\000\036\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde" +
    "\013\106\014\107\015\u0130\016\014\042\u0129\043\u0128\044" +
    "\u0135\051\u012f\061\074\001\002\000\010\005\u0157\006\uffd6" +
    "\010\u0158\001\002\000\004\006\uffd5\001\002\000\032\003" +
    "\u0134\004\u012e\006\uffde\013\106\014\107\015\u0130\016\014" +
    "\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002\000" +
    "\032\003\u0134\004\u012e\006\uffde\013\106\014\107\015\u0130" +
    "\016\014\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001" +
    "\002\000\004\006\uffd7\001\002\000\004\006\uffd2\001\002" +
    "\000\010\005\u0157\006\uffd6\010\u0158\001\002\000\004\006" +
    "\u0174\001\002\000\004\004\u0175\001\002\000\042\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\010\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\042\uffda\043\uffda\044\uffda\046\uffda\051\uffda" +
    "\053\uffda\061\uffda\001\002\000\036\003\u0134\004\u012e\005" +
    "\uffde\006\uffde\010\uffde\013\106\014\107\015\u0130\016\014" +
    "\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002\000" +
    "\010\005\u0157\006\uffd6\010\u0158\001\002\000\004\006\u0179" +
    "\001\002\000\004\004\u017a\001\002\000\042\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\051\uffdb\053" +
    "\uffdb\061\uffdb\001\002\000\004\015\u017c\001\002\000\036" +
    "\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014" +
    "\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135\051\u012f" +
    "\061\074\001\002\000\010\005\u0157\006\uffd6\010\u0158\001" +
    "\002\000\004\006\u017f\001\002\000\004\004\u0180\001\002" +
    "\000\042\003\uffdc\004\uffdc\005\uffdc\006\uffdc\010\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\046\uffdc\051\uffdc\053\uffdc\061\uffdc\001\002\000\014\005" +
    "\uffe6\006\uffe6\010\uffe6\046\uffe6\053\uffe6\001\002\000\014" +
    "\005\uffe2\006\uffe2\010\uffe2\046\uffe2\053\uffe2\001\002\000" +
    "\014\005\uffe9\006\uffe9\010\uffe9\046\uffe9\053\uffe9\001\002" +
    "\000\014\005\uffe5\006\uffe5\010\uffe5\046\uffe5\053\uffe5\001" +
    "\002\000\004\045\u0186\001\002\000\004\046\u0187\001\002" +
    "\000\004\047\u0188\001\002\000\004\012\u0189\001\002\000" +
    "\004\050\u018a\001\002\000\004\051\u018b\001\002\000\004" +
    "\052\u018c\001\002\000\004\053\u018d\001\002\000\014\005" +
    "\uff58\006\uff58\010\uff58\046\uff58\053\uff58\001\002\000\042" +
    "\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014" +
    "\107\015\u0130\016\014\042\u0129\043\u0128\044\u0135\046\uffde" +
    "\051\u012f\053\uffde\061\074\001\002\000\014\005\uffe7\006" +
    "\uffe7\010\uffe7\046\uffe7\053\uffe7\001\002\000\032\003\u0134" +
    "\004\u012e\006\uffde\013\106\014\107\015\u0130\016\014\042" +
    "\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002\000\032" +
    "\003\u0134\004\u012e\006\uffde\013\106\014\107\015\u0130\016" +
    "\014\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001\002" +
    "\000\004\006\u0193\001\002\000\004\037\u0194\001\002\000" +
    "\014\012\uffee\015\uffee\016\uffee\037\uffee\057\uffee\001\002" +
    "\000\004\006\u0196\001\002\000\004\037\u0197\001\002\000" +
    "\014\012\uffea\015\uffea\016\uffea\037\uffea\057\uffea\001\002" +
    "\000\004\041\u0199\001\002\000\004\015\u019a\001\002\000" +
    "\032\003\u0134\004\u012e\006\uffde\013\106\014\107\015\u0130" +
    "\016\014\042\u0129\043\u0128\044\u0135\051\u012f\061\074\001" +
    "\002\000\004\006\u019c\001\002\000\004\037\u019d\001\002" +
    "\000\014\012\uffec\015\uffec\016\uffec\037\uffec\057\uffec\001" +
    "\002\000\006\014\047\041\uff95\001\002\000\004\041\u01a0" +
    "\001\002\000\004\015\u01a1\001\002\000\032\003\u0134\004" +
    "\u012e\006\uffde\013\106\014\107\015\u0130\016\014\042\u0129" +
    "\043\u0128\044\u0135\051\u012f\061\074\001\002\000\004\006" +
    "\u01a3\001\002\000\004\037\u01a4\001\002\000\014\012\uffed" +
    "\015\uffed\016\uffed\037\uffed\057\uffed\001\002\000\004\015" +
    "\u01a6\001\002\000\004\016\014\001\002\000\004\006\u01a8" +
    "\001\002\000\004\012\u01a9\001\002\000\014\012\uffef\015" +
    "\uffef\016\uffef\037\uffef\057\uffef\001\002\000\006\003\ufff9" +
    "\006\ufff9\001\002\000\006\003\ufffa\006\ufffa\001\002\000" +
    "\006\003\ufff8\006\ufff8\001\002\000\004\036\u01b1\001\002" +
    "\000\006\003\u01af\036\u01b0\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffc\001\002" +
    "\000\052\003\uff74\004\uff74\005\uff74\006\uff74\010\uff74\012" +
    "\uff74\013\uff74\014\uff74\015\uff74\016\uff74\037\uff74\042\uff74" +
    "\043\uff74\044\uff74\046\uff74\051\uff74\053\uff74\054\uff74\057" +
    "\uff74\061\uff74\001\002\000\052\003\uff73\004\uff73\005\uff73" +
    "\006\uff73\010\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\037\uff73\042\uff73\043\uff73\044\uff73\046\uff73\051\uff73" +
    "\053\uff73\054\uff73\057\uff73\061\uff73\001\002\000\006\017" +
    "\u01b5\020\u01b6\001\002\000\004\014\047\001\002\000\012" +
    "\014\u01b9\021\u01bb\024\u01b7\026\u01ba\001\002\000\056\003" +
    "\uff61\004\uff61\005\uff61\006\uff61\010\uff61\011\u01ca\012\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\037\uff61\042" +
    "\uff61\043\uff61\044\uff61\046\uff61\051\uff61\053\uff61\054\uff61" +
    "\057\uff61\061\uff61\001\002\000\052\003\uff72\004\uff72\005" +
    "\uff72\006\uff72\010\uff72\012\uff72\013\uff72\014\uff72\015\uff72" +
    "\016\uff72\037\uff72\042\uff72\043\uff72\044\uff72\046\uff72\051" +
    "\uff72\053\uff72\054\uff72\057\uff72\061\uff72\001\002\000\054" +
    "\003\uff62\004\uff62\005\uff62\006\uff62\010\uff62\011\u01c5\012" +
    "\uff62\013\uff62\014\uff62\015\uff62\016\uff62\037\uff62\042\uff62" +
    "\043\uff62\044\uff62\046\uff62\051\uff62\053\uff62\054\uff62\057" +
    "\uff62\061\uff62\001\002\000\056\003\uff60\004\uff60\005\uff60" +
    "\006\uff60\010\uff60\011\u01c2\012\uff60\013\uff60\014\uff60\015" +
    "\uff60\016\uff60\017\uff60\037\uff60\042\uff60\043\uff60\044\uff60" +
    "\046\uff60\051\uff60\053\uff60\054\uff60\057\uff60\061\uff60\001" +
    "\002\000\056\003\uff5f\004\uff5f\005\uff5f\006\uff5f\010\uff5f" +
    "\011\u01bf\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017" +
    "\uff5f\037\uff5f\042\uff5f\043\uff5f\044\uff5f\046\uff5f\051\uff5f" +
    "\053\uff5f\054\uff5f\057\uff5f\061\uff5f\001\002\000\054\003" +
    "\uff6e\004\uff6e\005\uff6e\006\uff6e\010\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\015\uff6e\016\uff6e\017\u01bd\037\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\046\uff6e\051\uff6e\053\uff6e\054\uff6e\057\uff6e" +
    "\061\uff6e\001\002\000\004\014\047\001\002\000\052\003" +
    "\uff71\004\uff71\005\uff71\006\uff71\010\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\uff71\037\uff71\042\uff71\043\uff71\044" +
    "\uff71\046\uff71\051\uff71\053\uff71\054\uff71\057\uff71\061\uff71" +
    "\001\002\000\006\022\u01c0\023\u01c1\001\002\000\052\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\010\uff65\012\uff65\013\uff65" +
    "\014\uff65\015\uff65\016\uff65\037\uff65\042\uff65\043\uff65\044" +
    "\uff65\046\uff65\051\uff65\053\uff65\054\uff65\057\uff65\061\uff65" +
    "\001\002\000\052\003\uff64\004\uff64\005\uff64\006\uff64\010" +
    "\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\037\uff64" +
    "\042\uff64\043\uff64\044\uff64\046\uff64\051\uff64\053\uff64\054" +
    "\uff64\057\uff64\061\uff64\001\002\000\010\003\155\014\156" +
    "\056\u01c3\001\002\000\054\003\uff66\004\uff66\005\uff66\006" +
    "\uff66\010\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66" +
    "\037\uff66\042\uff66\043\uff66\044\uff66\046\uff66\051\uff66\053" +
    "\uff66\054\uff66\055\uff87\057\uff66\061\uff66\001\002\000\052" +
    "\003\uff63\004\uff63\005\uff63\006\uff63\010\uff63\012\uff63\013" +
    "\uff63\014\uff63\015\uff63\016\uff63\037\uff63\042\uff63\043\uff63" +
    "\044\uff63\046\uff63\051\uff63\053\uff63\054\uff63\057\uff63\061" +
    "\uff63\001\002\000\004\035\u01c6\001\002\000\006\003\u01c7" +
    "\014\u01c8\001\002\000\004\040\146\001\002\000\004\040" +
    "\114\001\002\000\052\003\uff6d\004\uff6d\005\uff6d\006\uff6d" +
    "\010\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\037" +
    "\uff6d\042\uff6d\043\uff6d\044\uff6d\046\uff6d\051\uff6d\053\uff6d" +
    "\054\uff6d\057\uff6d\061\uff6d\001\002\000\012\003\144\014" +
    "\145\025\135\040\133\001\002\000\054\003\uff67\004\uff67" +
    "\005\uff67\006\uff67\010\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\030\142\037\uff67\042\uff67\043\uff67\044\uff67" +
    "\046\uff67\051\uff67\053\uff67\054\uff67\057\uff67\061\uff67\001" +
    "\002\000\006\017\u0108\020\u01cd\001\002\000\010\021\057" +
    "\024\055\026\056\001\002\000\054\003\uff6f\004\uff6f\005" +
    "\uff6f\006\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\017\u01cf\037\uff6f\042\uff6f\043\uff6f\044\uff6f\046" +
    "\uff6f\051\uff6f\053\uff6f\054\uff6f\057\uff6f\061\uff6f\001\002" +
    "\000\004\014\047\001\002\000\052\003\uff70\004\uff70\005" +
    "\uff70\006\uff70\010\uff70\012\uff70\013\uff70\014\uff70\015\uff70" +
    "\016\uff70\037\uff70\042\uff70\043\uff70\044\uff70\046\uff70\051" +
    "\uff70\053\uff70\054\uff70\057\uff70\061\uff70\001\002\000\004" +
    "\006\u01d2\001\002\000\004\036\u01d3\001\002\000\004\002" +
    "\ufffd\001\002\000\014\012\021\015\020\016\014\037\022" +
    "\057\023\001\002\000\004\006\u01d6\001\002\000\004\036" +
    "\u01d7\001\002\000\004\002\ufffe\001\002\000\004\015\u01d9" +
    "\001\002\000\014\012\021\015\020\016\014\037\022\057" +
    "\023\001\002\000\004\006\u01db\001\002\000\004\036\u01dc" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01da\000\004\060\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\u01d0\004\024\005" +
    "\023\012\015\037\016\001\001\000\014\002\014\004\024" +
    "\005\023\012\015\037\016\001\001\000\004\036\u01b1\001" +
    "\001\000\002\001\001\000\014\002\u01ab\004\024\005\023" +
    "\012\015\037\016\001\001\000\014\002\u01aa\004\024\005" +
    "\023\012\015\037\016\001\001\000\014\002\u01a9\004\024" +
    "\005\023\012\015\037\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\040\004\024" +
    "\005\023\012\015\037\016\001\001\000\014\003\026\004" +
    "\032\005\031\012\025\037\027\001\001\000\014\003\037" +
    "\004\032\005\031\012\025\037\027\001\001\000\002\001" +
    "\001\000\014\003\036\004\032\005\031\012\025\037\027" +
    "\001\001\000\014\003\035\004\032\005\031\012\025\037" +
    "\027\001\001\000\014\003\034\004\032\005\031\012\025" +
    "\037\027\001\001\000\014\003\033\004\032\005\031\012" +
    "\025\037\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\u010e\030\047\031\045\001\001\000\010\011\050\030" +
    "\047\031\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\074\013\070\015\062\017\065\034\102\035\063" +
    "\037\066\046\072\047\075\053\064\054\101\057\100\001" +
    "\001\000\002\001\001\000\032\006\074\013\357\015\062" +
    "\017\065\034\102\035\063\037\066\046\072\047\075\053" +
    "\064\054\101\057\100\001\001\000\032\006\074\013\356" +
    "\015\062\017\065\034\102\035\063\037\066\046\072\047" +
    "\075\053\064\054\101\057\100\001\001\000\002\001\001" +
    "\000\032\006\074\013\355\015\062\017\065\034\102\035" +
    "\063\037\066\046\072\047\075\053\064\054\101\057\100" +
    "\001\001\000\032\006\074\013\354\015\062\017\065\034" +
    "\102\035\063\037\066\046\072\047\075\053\064\054\101" +
    "\057\100\001\001\000\024\016\353\017\121\041\137\042" +
    "\122\043\123\044\124\045\140\050\130\051\135\001\001" +
    "\000\002\001\001\000\030\017\121\022\271\023\232\024" +
    "\235\041\137\042\122\043\123\044\234\045\237\050\130" +
    "\051\135\001\001\000\032\006\074\013\267\015\062\017" +
    "\065\034\102\035\063\037\066\046\072\047\075\053\064" +
    "\054\101\057\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\074" +
    "\013\224\015\062\017\065\034\102\035\063\037\066\046" +
    "\072\047\075\053\064\054\101\057\100\001\001\000\032" +
    "\006\074\013\223\015\062\017\065\034\102\035\063\037" +
    "\066\046\072\047\075\053\064\054\101\057\100\001\001" +
    "\000\032\006\074\013\222\015\062\017\065\034\102\035" +
    "\063\037\066\046\072\047\075\053\064\054\101\057\100" +
    "\001\001\000\032\006\074\013\221\015\062\017\065\034" +
    "\102\035\063\037\066\046\072\047\075\053\064\054\101" +
    "\057\100\001\001\000\036\006\074\012\217\013\216\015" +
    "\062\017\065\034\102\035\063\037\066\046\072\047\075" +
    "\052\214\053\064\054\101\057\100\001\001\000\006\040" +
    "\201\047\176\001\001\000\004\052\172\001\001\000\004" +
    "\052\107\001\001\000\014\017\121\041\137\042\122\043" +
    "\123\045\171\001\001\000\002\001\001\000\014\017\121" +
    "\041\137\042\122\043\123\045\167\001\001\000\010\044" +
    "\166\050\130\051\135\001\001\000\030\016\117\017\121" +
    "\020\127\021\120\041\137\042\122\043\123\044\124\045" +
    "\140\050\130\051\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\121\041\160\042\122\043\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\121\042" +
    "\142\043\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\016\117\017\121\020\127\021" +
    "\146\041\137\042\122\043\123\044\124\045\140\050\130" +
    "\051\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\121\043\151\001\001\000\002\001\001\000\006" +
    "\050\157\051\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\164\017" +
    "\121\041\137\042\122\043\123\044\124\045\140\050\130" +
    "\051\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\121\041\137\042" +
    "\122\043\123\045\175\001\001\000\010\044\174\050\130" +
    "\051\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\214\001\001\000\004\052\107" +
    "\001\001\000\002\001\001\000\012\017\121\041\203\042" +
    "\122\043\123\001\001\000\002\001\001\000\032\006\074" +
    "\013\205\015\062\017\065\034\102\035\063\037\066\046" +
    "\072\047\075\053\064\054\101\057\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\121\041\213\042\122" +
    "\043\123\001\001\000\002\001\001\000\014\017\121\041" +
    "\137\042\122\043\123\045\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\074\013\220\015\062\017" +
    "\065\034\102\035\063\037\066\046\072\047\075\053\064" +
    "\054\101\057\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\121\022\251\023\232\024\235\041\137\042" +
    "\122\043\123\044\234\045\237\050\130\051\135\001\001" +
    "\000\032\006\074\013\227\015\062\017\065\034\102\035" +
    "\063\037\066\046\072\047\075\053\064\054\101\057\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\017" +
    "\121\022\236\023\232\024\235\041\137\042\122\043\123" +
    "\044\234\045\237\050\130\051\135\001\001\000\002\001" +
    "\001\000\026\017\121\023\250\024\235\041\137\042\122" +
    "\043\123\044\234\045\237\050\130\051\135\001\001\000" +
    "\002\001\001\000\004\025\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\121\023\243\024\235\041" +
    "\137\042\122\043\123\044\234\045\237\050\130\051\135" +
    "\001\001\000\026\017\121\023\242\024\235\041\137\042" +
    "\122\043\123\044\234\045\237\050\130\051\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\121\024\247\041\137\042\122\043\123\044\234" +
    "\045\237\050\130\051\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\074\013\253\015\062\017\065\034\102\035\063\037" +
    "\066\046\072\047\075\053\064\054\101\057\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\262\051" +
    "\135\055\265\001\001\000\010\050\262\051\135\055\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\074\013\275\015\062\017\065\034" +
    "\102\035\063\037\066\046\072\047\075\053\064\054\101" +
    "\057\100\001\001\000\004\014\276\001\001\000\002\001" +
    "\001\000\030\017\121\022\306\023\232\024\235\041\137" +
    "\042\122\043\123\044\234\045\237\050\130\051\135\001" +
    "\001\000\002\001\001\000\004\014\304\001\001\000\004" +
    "\014\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\074\013\315\015\062\017\065\034" +
    "\102\035\063\037\066\046\072\047\075\053\064\054\101" +
    "\057\100\001\001\000\032\006\074\013\313\015\062\017" +
    "\065\034\102\035\063\037\066\046\072\047\075\053\064" +
    "\054\101\057\100\001\001\000\004\014\314\001\001\000" +
    "\002\001\001\000\004\014\316\001\001\000\002\001\001" +
    "\000\032\006\074\013\320\015\062\017\065\034\102\035" +
    "\063\037\066\046\072\047\075\053\064\054\101\057\100" +
    "\001\001\000\004\014\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\074\013\324\015\062\017\065" +
    "\034\102\035\063\037\066\046\072\047\075\053\064\054" +
    "\101\057\100\001\001\000\004\014\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\074\013\337\015\062\017\065\034\102\035\063\037\066" +
    "\046\072\047\075\053\064\054\101\057\100\001\001\000" +
    "\032\006\074\013\332\015\062\017\065\034\102\035\063" +
    "\037\066\046\072\047\075\053\064\054\101\057\100\001" +
    "\001\000\004\014\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\074\013\345\015" +
    "\062\017\065\034\102\035\063\037\066\046\072\047\075" +
    "\053\064\054\101\057\100\001\001\000\004\014\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\074\013\361\015\062\017\065\034" +
    "\102\035\063\037\066\046\072\047\075\053\064\054\101" +
    "\057\100\001\001\000\002\001\001\000\004\026\372\001" +
    "\001\000\004\026\364\001\001\000\002\001\001\000\032" +
    "\006\074\013\366\015\062\017\065\034\102\035\063\037" +
    "\066\046\072\047\075\053\064\054\101\057\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\074\013\u0100" +
    "\015\062\017\065\034\102\035\063\037\066\046\072\047" +
    "\075\053\064\054\101\057\100\001\001\000\032\006\074" +
    "\013\375\015\062\017\065\034\102\035\063\037\066\046" +
    "\072\047\075\053\064\054\101\057\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\074" +
    "\013\u0104\015\062\017\065\034\102\035\063\037\066\046" +
    "\072\047\075\053\064\054\101\057\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\047\031\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0111\001\001\000\002\001\001\000\032\006" +
    "\074\013\u0113\015\062\017\065\034\102\035\063\037\066" +
    "\046\072\047\075\053\064\054\101\057\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\u0117\030\047\031\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u011a\001\001\000\002\001\001" +
    "\000\032\006\074\013\u011c\015\062\017\065\034\102\035" +
    "\063\037\066\046\072\047\075\053\064\054\101\057\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\u0197" +
    "\030\047\031\045\001\001\000\010\011\u0123\030\047\031" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\074\007\u0132\017\u0129\032\u012b\033" +
    "\u0130\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\074\007\u0183\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c" +
    "\047\075\053\064\054\u0131\056\u0135\001\001\000\030\006" +
    "\074\007\u0182\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c" +
    "\047\075\053\064\054\u0131\056\u0135\001\001\000\030\006" +
    "\074\007\u0181\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c" +
    "\047\075\053\064\054\u0131\056\u0135\001\001\000\030\006" +
    "\074\007\u0180\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c" +
    "\047\075\053\064\054\u0131\056\u0135\001\001\000\030\017" +
    "\121\022\u0150\023\232\024\235\041\137\042\122\043\123" +
    "\044\234\045\237\050\130\051\135\001\001\000\002\001" +
    "\001\000\030\006\074\007\u0144\017\u0129\032\u012b\033\u0130" +
    "\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001" +
    "\001\000\030\006\074\007\u0143\017\u0129\032\u012b\033\u0130" +
    "\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001" +
    "\001\000\030\006\074\007\u0142\017\u0129\032\u012b\033\u0130" +
    "\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001" +
    "\001\000\002\001\001\000\032\006\074\007\u013e\017\u0129" +
    "\032\u012b\033\u0130\037\u012a\046\u012c\047\075\052\214\053" +
    "\064\054\u0131\056\u0135\001\001\000\006\040\u0137\047\176" +
    "\001\001\000\030\006\074\007\u0136\017\u0129\032\u012b\033" +
    "\u0130\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\121\041\u0139\042\122\043\123\001\001\000\002\001\001" +
    "\000\030\006\074\007\u013b\017\u0129\032\u012b\033\u0130\037" +
    "\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\074\007" +
    "\u013f\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075" +
    "\053\064\054\u0131\056\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\017" +
    "\121\022\u014b\023\232\024\235\041\137\042\122\043\123" +
    "\044\234\045\237\050\130\051\135\001\001\000\030\006" +
    "\074\007\u0147\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c" +
    "\047\075\053\064\054\u0131\056\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\017\121\022\u014a\023\232" +
    "\024\235\041\137\042\122\043\123\044\234\045\237\050" +
    "\130\051\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\074\007\u014d\017\u0129\032\u012b\033\u0130\037" +
    "\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\074\007\u0171\017\u0129\032\u012b\033\u0130\037\u012a\046" +
    "\u012c\047\075\053\064\054\u0131\056\u0135\001\001\000\030" +
    "\006\074\007\u0155\017\u0129\032\u012b\033\u0130\037\u012a\046" +
    "\u012c\047\075\053\064\054\u0131\056\u0135\001\001\000\004" +
    "\010\u0158\001\001\000\002\001\001\000\030\017\121\022" +
    "\u015d\023\232\024\235\041\137\042\122\043\123\044\234" +
    "\045\237\050\130\051\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\074\007\u0164\017\u0129\032\u012b\033\u0130" +
    "\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001" +
    "\001\000\030\006\074\007\u0162\017\u0129\032\u012b\033\u0130" +
    "\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135\001" +
    "\001\000\004\010\u0163\001\001\000\002\001\001\000\004" +
    "\010\u0165\001\001\000\002\001\001\000\030\006\074\007" +
    "\u0167\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075" +
    "\053\064\054\u0131\056\u0135\001\001\000\004\010\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\074" +
    "\007\u016b\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047" +
    "\075\053\064\054\u0131\056\u0135\001\001\000\004\010\u016c" +
    "\001\001\000\002\001\001\000\030\006\074\007\u0170\017" +
    "\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075\053\064" +
    "\054\u0131\056\u0135\001\001\000\030\006\074\007\u016f\017" +
    "\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075\053\064" +
    "\054\u0131\056\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\074\007\u0176\017" +
    "\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075\053\064" +
    "\054\u0131\056\u0135\001\001\000\004\010\u0177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\074\007\u017c\017\u0129\032\u012b\033" +
    "\u0130\037\u012a\046\u012c\047\075\053\064\054\u0131\056\u0135" +
    "\001\001\000\004\010\u017d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\074\007\u018e" +
    "\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075\053" +
    "\064\054\u0131\056\u0135\001\001\000\002\001\001\000\030" +
    "\006\074\007\u0194\017\u0129\032\u012b\033\u0130\037\u012a\046" +
    "\u012c\047\075\053\064\054\u0131\056\u0135\001\001\000\030" +
    "\006\074\007\u0191\017\u0129\032\u012b\033\u0130\037\u012a\046" +
    "\u012c\047\075\053\064\054\u0131\056\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\074\007\u019a\017\u0129\032" +
    "\u012b\033\u0130\037\u012a\046\u012c\047\075\053\064\054\u0131" +
    "\056\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\u019e\030\047\031\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\074\007" +
    "\u01a1\017\u0129\032\u012b\033\u0130\037\u012a\046\u012c\047\075" +
    "\053\064\054\u0131\056\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u01a6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u01cb\001" +
    "\001\000\006\026\u01bb\027\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\047\031\u01bd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u01c3\051\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\121\041\u01ca\042\122\043" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u01cd\001\001\000\002\001\001\000\006\030\047\031" +
    "\u01cf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\u01d4\004\024\005" +
    "\023\012\015\037\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\u01d9\004\024\005\023\012\015\037\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo raiz;    
    public int cont = 0;

    public void syntax_error(Symbol s){
        System.out.println("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Nodo RESULT =null;
		System.out.println("Listo Module");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Nodo RESULT =null;
		 System.out.println("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Nodo RESULT =null;
		 System.out.println("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Nodo RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Nodo RESULT =null;
		 System.out.println("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Nodo RESULT =null;
		 System.out.println("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END STRUCTURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DOWHILESUB ::= DO saltoLinea SUBINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DOWHILEFUNC ::= DO saltoLinea FUNCINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAL ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAL ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMCALL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARCALL ::= VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARCALL ::= VARCALL error 
            {
              Object RESULT =null;
		 System.out.println("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIGN ::= ASIGNSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALASIGN ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALUNIRSTR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNINT ::= identificador error VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNINT ::= error OPASING VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPP ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPP ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPP ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= DIM error 
            {
              Object RESULT =null;
		 System.out.println("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // T ::= identificador AS identificador IGUAL NEW CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VARS ::= CANTVARS error 
            {
              Object RESULT =null;
		 System.out.println("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPOIGUAL ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VALWR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALWR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VALWR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SUBINSTRUC ::= CONTINUE FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
