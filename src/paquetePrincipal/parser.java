
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\063\003\000\002\002\004\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\002\010\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\006\011\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\010\004\000\002\005\013\000\002\005\013\000\002\005" +
    "\013\000\002\005\013\000\002\005\013\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\005\000\002\012\002\000\002\061\012\000\002\061\012" +
    "\000\002\061\012\000\002\061\012\000\002\061\012\000" +
    "\002\013\010\000\002\013\005\000\002\013\002\000\002" +
    "\013\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\005\000\002\036\010\000\002\036\010\000\002\035\011" +
    "\000\002\015\015\000\002\015\015\000\002\015\015\000" +
    "\002\015\015\000\002\015\015\000\002\015\015\000\002" +
    "\015\015\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\002\000\002\016\005\000\002" +
    "\016\004\000\002\062\012\000\002\062\012\000\002\062" +
    "\012\000\002\062\012\000\002\062\012\000\002\017\010" +
    "\000\002\017\005\000\002\017\002\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\005\000\002" +
    "\037\011\000\002\040\010\000\002\040\010\000\002\020" +
    "\004\000\002\021\003\000\002\021\003\000\002\043\003" +
    "\000\002\043\007\000\002\022\006\000\002\022\006\000" +
    "\002\024\003\000\002\024\002\000\002\023\005\000\002" +
    "\023\003\000\002\023\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\004\000\002\025\003\000\002\026\005" +
    "\000\002\030\003\000\002\030\003\000\002\027\003\000" +
    "\002\027\003\000\002\014\003\000\002\014\002\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\056" +
    "\005\000\002\011\005\000\002\011\005\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\053\005\000\002\053\005\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\055\003" +
    "\000\002\055\004\000\002\055\004\000\002\050\003\000" +
    "\002\044\005\000\002\044\003\000\002\045\005\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\005\000\002\046\003\000\002\042\004" +
    "\000\002\042\004\000\002\041\005\000\002\041\007\000" +
    "\002\041\011\000\002\041\007\000\002\041\005\000\002" +
    "\041\010\000\002\034\007\000\002\034\005\000\002\034" +
    "\004\000\002\033\005\000\002\033\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\057\006\000\002\057" +
    "\006\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\012\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e6\000\006\003\004\036\005\001\002\000\004\014" +
    "\u01e4\001\002\000\006\003\011\014\012\001\002\000\004" +
    "\002\010\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002\000\004\015\u01e0\001\002\000\006\003\013" +
    "\015\014\001\002\000\022\015\021\016\015\037\025\057" +
    "\030\062\020\063\026\064\023\065\024\001\002\000\022" +
    "\015\021\016\015\037\025\057\030\062\020\063\026\064" +
    "\023\065\024\001\002\000\006\003\u01db\014\u012c\001\002" +
    "\000\006\003\u01d6\006\u01d7\001\002\000\022\015\021\016" +
    "\015\037\025\057\030\062\020\063\026\064\023\065\024" +
    "\001\002\000\006\012\uffed\014\uffed\001\002\000\022\015" +
    "\021\016\015\037\025\057\030\062\020\063\026\064\023" +
    "\065\024\001\002\000\022\015\021\016\015\037\025\057" +
    "\030\062\020\063\026\064\023\065\024\001\002\000\006" +
    "\012\uffeb\014\uffeb\001\002\000\006\012\uffea\014\uffea\001" +
    "\002\000\006\003\u014e\014\u014f\001\002\000\006\012\uffec" +
    "\014\uffec\001\002\000\004\012\u0125\001\002\000\006\003" +
    "\047\014\050\001\002\000\022\015\021\016\015\037\025" +
    "\057\030\062\020\063\026\064\023\065\024\001\002\000" +
    "\022\015\035\016\015\037\025\057\030\062\020\063\026" +
    "\064\023\065\024\001\002\000\022\015\035\016\015\037" +
    "\025\057\030\062\020\063\026\064\023\065\024\001\002" +
    "\000\006\003\ufff6\006\ufff6\001\002\000\026\003\uffef\006" +
    "\uffef\015\035\016\015\037\025\057\030\062\020\063\026" +
    "\064\023\065\024\001\002\000\022\015\035\016\015\037" +
    "\025\057\030\062\020\063\026\064\023\065\024\001\002" +
    "\000\022\015\035\016\015\037\025\057\030\062\020\063" +
    "\026\064\023\065\024\001\002\000\022\015\035\016\015" +
    "\037\025\057\030\062\020\063\026\064\023\065\024\001" +
    "\002\000\006\003\ufff2\006\ufff2\001\002\000\006\003\ufff0" +
    "\006\ufff0\001\002\000\006\003\ufff4\006\ufff4\001\002\000" +
    "\006\003\ufff3\006\ufff3\001\002\000\006\003\ufff1\006\ufff1" +
    "\001\002\000\006\003\ufff5\006\ufff5\001\002\000\004\040" +
    "\u011c\001\002\000\006\003\051\040\052\001\002\000\006" +
    "\014\054\041\uff8e\001\002\000\010\003\uff8e\014\054\041" +
    "\uff8e\001\002\000\006\003\uff8f\041\uff8f\001\002\000\010" +
    "\003\uff61\017\uff61\020\uff61\001\002\000\010\003\u010f\017" +
    "\u010d\020\u010e\001\002\000\006\003\060\041\057\001\002" +
    "\000\006\003\371\020\370\001\002\000\004\020\061\001" +
    "\002\000\010\021\064\024\062\026\063\001\002\000\064" +
    "\003\uff5a\004\uff5a\005\uff5a\006\uff5a\010\uff5a\013\uff5a\014" +
    "\uff5a\015\uff5a\016\uff5a\017\uff5a\037\uff5a\041\uff5a\042\uff5a" +
    "\043\uff5a\044\uff5a\046\uff5a\051\uff5a\053\uff5a\054\uff5a\057" +
    "\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\001\002" +
    "\000\064\003\uff59\004\uff59\005\uff59\006\uff59\010\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\uff59\017\uff59\037\uff59\041\uff59" +
    "\042\uff59\043\uff59\044\uff59\046\uff59\051\uff59\053\uff59\054" +
    "\uff59\057\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59" +
    "\001\002\000\064\003\uff58\004\uff58\005\uff58\006\uff58\010" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58\037\uff58" +
    "\041\uff58\042\uff58\043\uff58\044\uff58\046\uff58\051\uff58\053" +
    "\uff58\054\uff58\057\uff58\061\uff58\062\uff58\063\uff58\064\uff58" +
    "\065\uff58\001\002\000\004\015\066\001\002\000\032\003" +
    "\111\004\077\006\uffb6\013\113\014\114\015\105\016\015" +
    "\043\067\044\112\051\104\054\075\061\101\001\002\000" +
    "\004\057\366\001\002\000\042\003\111\004\077\005\uffb6" +
    "\006\uffb6\010\uffb6\013\113\014\114\015\105\016\015\043" +
    "\067\044\112\046\uffb6\051\104\053\uffb6\054\075\061\101" +
    "\001\002\000\042\003\111\004\077\005\uffb6\006\uffb6\010" +
    "\uffb6\013\113\014\114\015\105\016\015\043\067\044\112" +
    "\046\uffb6\051\104\053\uffb6\054\075\061\101\001\002\000" +
    "\044\003\uff8d\004\uff8d\005\uff8d\006\uff8d\010\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\042\uff8d\043\uff8d\044\uff8d\046" +
    "\uff8d\051\uff8d\053\uff8d\054\uff8d\061\uff8d\001\002\000\042" +
    "\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113\014" +
    "\114\015\105\016\015\043\067\044\112\046\uffb6\051\104" +
    "\053\uffb6\054\075\061\101\001\002\000\042\003\111\004" +
    "\077\005\uffb6\006\uffb6\010\uffb6\013\113\014\114\015\105" +
    "\016\015\043\067\044\112\046\uffb6\051\104\053\uffb6\054" +
    "\075\061\101\001\002\000\022\003\141\014\144\022\133" +
    "\023\137\025\142\040\140\056\134\060\124\001\002\000" +
    "\004\006\357\001\002\000\024\003\276\014\144\022\133" +
    "\023\137\025\142\034\241\040\140\056\134\060\124\001" +
    "\002\000\042\003\111\004\077\005\uffb6\006\uffb6\010\uffb6" +
    "\013\113\014\114\015\105\016\015\043\067\044\112\046" +
    "\uffb6\051\104\053\uffb6\054\075\061\101\001\002\000\006" +
    "\003\263\040\264\001\002\000\044\003\uff8b\004\uff8b\005" +
    "\uff8b\006\uff8b\010\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\046\uff8b\051\uff8b\053\uff8b\054" +
    "\uff8b\061\uff8b\001\002\000\044\003\uff8c\004\uff8c\005\uff8c" +
    "\006\uff8c\010\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\046\uff8c\051\uff8c\053\uff8c\054\uff8c" +
    "\061\uff8c\001\002\000\006\015\234\050\233\001\002\000" +
    "\042\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113" +
    "\014\114\015\105\016\015\043\067\044\112\046\uffb6\051" +
    "\104\053\uffb6\054\075\061\101\001\002\000\042\003\111" +
    "\004\077\005\uffb6\006\uffb6\010\uffb6\013\113\014\114\015" +
    "\105\016\015\043\067\044\112\046\uffb6\051\104\053\uffb6" +
    "\054\075\061\101\001\002\000\042\003\111\004\077\005" +
    "\uffb6\006\uffb6\010\uffb6\013\113\014\114\015\105\016\015" +
    "\043\067\044\112\046\uffb6\051\104\053\uffb6\054\075\061" +
    "\101\001\002\000\042\003\111\004\077\005\uffb6\006\uffb6" +
    "\010\uffb6\013\113\014\114\015\105\016\015\043\067\044" +
    "\112\046\uffb6\051\104\053\uffb6\054\075\061\101\001\002" +
    "\000\054\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\011" +
    "\216\013\113\014\114\015\105\016\015\030\116\031\122" +
    "\040\153\043\067\044\112\046\uffb6\051\104\053\uffb6\054" +
    "\075\057\030\061\101\001\002\000\006\003\205\014\206" +
    "\001\002\000\010\011\201\030\116\031\122\001\002\000" +
    "\014\003\117\011\120\030\116\031\122\040\121\001\002" +
    "\000\012\003\151\014\152\025\142\040\140\001\002\000" +
    "\004\011\176\001\002\000\012\003\151\014\152\025\142" +
    "\040\140\001\002\000\022\003\uff7a\014\uff7a\022\133\023" +
    "\137\025\uff7a\040\uff7a\056\134\060\124\001\002\000\024" +
    "\003\141\014\144\022\133\023\137\025\142\040\140\041" +
    "\uff9c\056\134\060\124\001\002\000\004\011\123\001\002" +
    "\000\012\003\uff79\014\uff79\025\uff79\040\uff79\001\002\000" +
    "\062\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\027" +
    "\uff83\032\uff83\033\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\046\uff83\051\uff83\053\uff83\054\uff83\061\uff83\001\002\000" +
    "\010\003\uff9a\017\uff9a\041\uff9a\001\002\000\004\041\173" +
    "\001\002\000\104\003\uff70\004\uff70\005\uff70\006\uff70\007" +
    "\uff70\010\uff70\011\uff70\013\uff70\014\uff70\015\uff70\016\uff70" +
    "\017\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\037" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\051\uff70\053\uff70\054\uff70\057\uff70\061\uff70\062\uff70\063" +
    "\uff70\064\uff70\065\uff70\001\002\000\104\003\uff75\004\uff75" +
    "\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\013\uff75\014" +
    "\uff75\015\uff75\016\uff75\017\uff75\027\uff75\030\uff75\031\156" +
    "\032\uff75\033\uff75\037\uff75\041\uff75\042\uff75\043\uff75\044" +
    "\uff75\045\uff75\046\uff75\051\uff75\053\uff75\054\uff75\057\uff75" +
    "\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\001\002\000" +
    "\104\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73" +
    "\011\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\027" +
    "\uff73\030\uff73\031\uff73\032\uff73\033\uff73\037\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\051\uff73\053" +
    "\uff73\054\uff73\057\uff73\061\uff73\062\uff73\063\uff73\064\uff73" +
    "\065\uff73\001\002\000\046\003\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\010\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\041\uffa3\043\uffa3\044\uffa3\046\uffa3\051\uffa3\053\uffa3\054" +
    "\uffa3\061\uffa3\001\002\000\062\003\uff86\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\027\uff86\032\uff86\033\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\046\uff86\051\uff86\053\uff86\054" +
    "\uff86\061\uff86\001\002\000\064\003\uff87\004\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\011\uff87\013\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\027\uff87\032\uff87\033\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\046\uff87\051\uff87\053\uff87\054" +
    "\uff87\055\uff80\061\uff87\001\002\000\010\003\171\017\170" +
    "\041\uff9d\001\002\000\062\003\uff84\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\013\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\027\uff84\032\uff84\033\uff84\041\uff84\042" +
    "\uff84\043\uff84\044\uff84\046\uff84\051\uff84\053\uff84\054\uff84" +
    "\061\uff84\001\002\000\062\003\uff85\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\027\uff85\032\uff85\033\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\046\uff85\051\uff85\053\uff85\054\uff85" +
    "\061\uff85\001\002\000\012\003\151\014\152\025\142\040" +
    "\140\001\002\000\072\003\uff6e\004\uff6e\005\uff6e\006\uff6e" +
    "\007\uff6e\010\uff6e\011\uff6e\013\uff6e\014\uff6e\015\uff6e\016" +
    "\uff6e\017\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
    "\040\153\041\uff6e\042\uff6e\043\uff6e\044\uff6e\046\uff6e\051" +
    "\uff6e\053\uff6e\054\uff6e\055\uff7e\061\uff6e\001\002\000\104" +
    "\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011" +
    "\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\027\uff72" +
    "\030\uff72\031\uff72\032\uff72\033\uff72\037\uff72\041\uff72\042" +
    "\uff72\043\uff72\044\uff72\045\uff72\046\uff72\051\uff72\053\uff72" +
    "\054\uff72\057\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065" +
    "\uff72\001\002\000\004\055\160\001\002\000\072\003\uff71" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\013" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\027\uff71\030\uff71" +
    "\031\uff71\032\uff71\033\uff71\040\121\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\046\uff71\051\uff71\053\uff71\054\uff71\055\uff7f" +
    "\061\uff71\001\002\000\066\003\uff77\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\013\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\027\uff77\030\147\032\uff77\033\uff77\041" +
    "\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\051\uff77" +
    "\053\uff77\054\uff77\061\uff77\001\002\000\046\003\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\010\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\041\uffa2\043\uffa2\044\uffa2\046\uffa2\051" +
    "\uffa2\053\uffa2\054\uffa2\061\uffa2\001\002\000\012\003\151" +
    "\014\152\025\142\040\140\001\002\000\104\003\uff76\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\017\uff76\027\uff76\030\uff76\031" +
    "\156\032\uff76\033\uff76\037\uff76\041\uff76\042\uff76\043\uff76" +
    "\044\uff76\045\uff76\046\uff76\051\uff76\053\uff76\054\uff76\057" +
    "\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\001\002" +
    "\000\106\003\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010" +
    "\uff6e\011\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\040" +
    "\153\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e" +
    "\051\uff6e\053\uff6e\054\uff6e\057\uff6e\061\uff6e\062\uff6e\063" +
    "\uff6e\064\uff6e\065\uff6e\001\002\000\106\003\uff71\004\uff71" +
    "\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\013\uff71\014" +
    "\uff71\015\uff71\016\uff71\017\uff71\027\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\037\uff71\040\121\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\045\uff71\046\uff71\051\uff71\053\uff71\054\uff71" +
    "\057\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065\uff71\001" +
    "\002\000\024\003\141\014\144\022\133\023\137\025\142" +
    "\040\140\041\uff9c\056\134\060\124\001\002\000\004\041" +
    "\155\001\002\000\104\003\uff9e\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\051\uff9e\053\uff9e\054\uff9e\057\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\001\002\000\012\003\151\014" +
    "\152\025\142\040\140\001\002\000\104\003\uff74\004\uff74" +
    "\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\013\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\037\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\051\uff74\053\uff74\054\uff74\057\uff74" +
    "\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74\001\002\000" +
    "\010\003\162\014\163\056\161\001\002\000\100\003\uff80" +
    "\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\017\uff80\027\uff80\032\uff80" +
    "\033\uff80\037\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046" +
    "\uff80\051\uff80\053\uff80\054\uff80\055\uff80\057\uff80\061\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\001\002\000\100\003" +
    "\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\027\uff7e\032" +
    "\uff7e\033\uff7e\037\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\046\uff7e\051\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e\061" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\001\002\000\100" +
    "\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011" +
    "\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\027\uff7f" +
    "\032\uff7f\033\uff7f\037\uff7f\041\uff7f\042\uff7f\043\uff7f\044" +
    "\uff7f\046\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f\057\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\001\002\000" +
    "\100\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\011\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\027" +
    "\uff81\032\uff81\033\uff81\037\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\046\uff81\051\uff81\053\uff81\054\uff81\055\160\057" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\001\002" +
    "\000\076\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\027\uff82\032\uff82\033\uff82\037\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\046\uff82\051\uff82\053\uff82\054\uff82\057\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\001\002\000" +
    "\006\030\147\041\167\001\002\000\104\003\uff6f\004\uff6f" +
    "\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\013\uff6f\014" +
    "\uff6f\015\uff6f\016\uff6f\017\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\037\uff6f\041\uff6f\042\uff6f\043\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\051\uff6f\053\uff6f\054\uff6f\057\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\001\002\000" +
    "\022\003\141\014\144\022\133\023\137\025\142\040\140" +
    "\056\134\060\124\001\002\000\010\003\uff99\017\uff99\041" +
    "\uff99\001\002\000\010\003\uff9b\017\uff9b\041\uff9b\001\002" +
    "\000\104\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\037\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\051\uff9f" +
    "\053\uff9f\054\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\001\002\000\044\003\uff8a\004\uff8a\005\uff8a" +
    "\006\uff8a\010\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\042" +
    "\uff8a\043\uff8a\044\uff8a\046\uff8a\051\uff8a\053\uff8a\054\uff8a" +
    "\061\uff8a\001\002\000\046\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\010\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\042\uff7c" +
    "\043\uff7c\044\uff7c\045\uff7c\046\uff7c\051\uff7c\053\uff7c\054" +
    "\uff7c\061\uff7c\001\002\000\012\003\uff78\014\uff78\025\uff78" +
    "\040\uff78\001\002\000\046\003\uff7d\004\uff7d\005\uff7d\006" +
    "\uff7d\010\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\051\uff7d\053\uff7d\054" +
    "\uff7d\061\uff7d\001\002\000\012\003\151\014\152\025\142" +
    "\040\140\001\002\000\022\003\uff7a\014\uff7a\022\133\023" +
    "\137\025\uff7a\040\uff7a\056\134\060\124\001\002\000\044" +
    "\003\uff89\004\uff89\005\uff89\006\uff89\010\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\042\uff89\043\uff89\044\uff89\046\uff89" +
    "\051\uff89\053\uff89\054\uff89\061\uff89\001\002\000\044\003" +
    "\uff88\004\uff88\005\uff88\006\uff88\010\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\042\uff88\043\uff88\044\uff88\046\uff88\051" +
    "\uff88\053\uff88\054\uff88\061\uff88\001\002\000\004\045\uffa1" +
    "\001\002\000\010\011\216\030\116\031\122\001\002\000" +
    "\014\003\117\011\216\020\215\030\116\031\122\001\002" +
    "\000\004\045\210\001\002\000\012\003\151\014\152\025" +
    "\142\040\140\001\002\000\006\015\212\030\147\001\002" +
    "\000\032\003\111\004\077\013\113\014\114\015\105\016" +
    "\015\043\067\044\112\046\uffb6\051\104\054\075\061\101" +
    "\001\002\000\004\046\214\001\002\000\042\003\uffa7\004" +
    "\uffa7\005\uffa7\006\uffa7\010\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\043\uffa7\044\uffa7\046\uffa7\051\uffa7\053\uffa7\054" +
    "\uffa7\061\uffa7\001\002\000\004\024\217\001\002\000\012" +
    "\003\uff7a\014\uff7a\025\uff7a\040\uff7a\001\002\000\004\011" +
    "\220\001\002\000\012\003\151\014\152\025\142\040\140" +
    "\001\002\000\006\030\147\045\uffa0\001\002\000\012\003" +
    "\151\014\152\025\142\040\140\001\002\000\046\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\010\uff7b\013\uff7b\014\uff7b\015" +
    "\uff7b\016\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\051\uff7b\053\uff7b\054\uff7b\061\uff7b\001\002\000\014\005" +
    "\uffb4\006\uffb4\010\uffb4\046\uffb4\053\uffb4\001\002\000\042" +
    "\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113\014" +
    "\114\015\105\016\015\043\067\044\112\046\uffb6\051\104" +
    "\053\uffb6\054\075\061\101\001\002\000\014\005\uffb5\006" +
    "\uffb5\010\uffb5\046\uffb5\053\uffb5\001\002\000\014\005\uffb8" +
    "\006\uffb8\010\uffb8\046\uffb8\053\uffb8\001\002\000\014\005" +
    "\uffba\006\uffba\010\uffba\046\uffba\053\uffba\001\002\000\014" +
    "\005\uffb9\006\uffb9\010\uffb9\046\uffb9\053\uffb9\001\002\000" +
    "\014\005\uffbf\006\uffbf\010\uffbf\046\uffbf\053\uffbf\001\002" +
    "\000\024\003\141\014\144\022\133\023\137\025\142\034" +
    "\241\040\140\056\134\060\124\001\002\000\032\003\111" +
    "\004\077\013\113\014\114\015\105\016\015\043\067\044" +
    "\112\051\104\053\uffb6\054\075\061\101\001\002\000\004" +
    "\053\236\001\002\000\004\050\237\001\002\000\024\003" +
    "\141\014\144\022\133\023\137\025\142\034\241\040\140" +
    "\056\134\060\124\001\002\000\052\003\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\032\uff95\033\uff95\042\uff95\043\uff95\044\uff95\046" +
    "\uff95\051\uff95\053\uff95\054\uff95\061\uff95\001\002\000\022" +
    "\003\141\014\144\022\133\023\137\025\142\040\140\056" +
    "\134\060\124\001\002\000\056\003\uff91\004\uff91\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\027\uff91\032\uff91\033\uff91\042\uff91\043\uff91" +
    "\044\uff91\046\uff91\051\uff91\053\uff91\054\uff91\061\uff91\001" +
    "\002\000\006\011\254\027\252\001\002\000\046\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\010\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\032\246\033\247\043\uffa5\044\uffa5\046\uffa5" +
    "\051\uffa5\053\uffa5\054\uffa5\061\uffa5\001\002\000\056\003" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\027\uff90\032\uff90\033" +
    "\uff90\042\uff90\043\uff90\044\uff90\046\uff90\051\uff90\053\uff90" +
    "\054\uff90\061\uff90\001\002\000\022\003\141\014\144\022" +
    "\133\023\137\025\142\040\140\056\134\060\124\001\002" +
    "\000\022\003\141\014\144\022\133\023\137\025\142\040" +
    "\140\056\134\060\124\001\002\000\052\003\uff97\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\032\uff97\033\uff97\042\uff97\043\uff97\044\uff97" +
    "\046\uff97\051\uff97\053\uff97\054\uff97\061\uff97\001\002\000" +
    "\052\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\032\uff98\033\uff98\042" +
    "\uff98\043\uff98\044\uff98\046\uff98\051\uff98\053\uff98\054\uff98" +
    "\061\uff98\001\002\000\022\003\uff93\014\uff93\022\uff93\023" +
    "\uff93\025\uff93\040\uff93\056\uff93\060\uff93\001\002\000\022" +
    "\003\141\014\144\022\133\023\137\025\142\040\140\056" +
    "\134\060\124\001\002\000\022\003\uff92\014\uff92\022\uff92" +
    "\023\uff92\025\uff92\040\uff92\056\uff92\060\uff92\001\002\000" +
    "\052\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\032\uff94\033\uff94\042" +
    "\uff94\043\uff94\044\uff94\046\uff94\051\uff94\053\uff94\054\uff94" +
    "\061\uff94\001\002\000\052\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\032\uff96\033\uff96\042\uff96\043\uff96\044\uff96\046\uff96\051" +
    "\uff96\053\uff96\054\uff96\061\uff96\001\002\000\010\015\260" +
    "\032\246\033\247\001\002\000\032\003\111\004\077\013" +
    "\113\014\114\015\105\016\015\043\067\044\112\051\104" +
    "\053\uffb6\054\075\061\101\001\002\000\004\053\262\001" +
    "\002\000\042\003\uffa6\004\uffa6\005\uffa6\006\uffa6\010\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\043\uffa6\044\uffa6\046" +
    "\uffa6\051\uffa6\053\uffa6\054\uffa6\061\uffa6\001\002\000\010" +
    "\003\266\014\267\056\265\001\002\000\010\003\266\014" +
    "\267\056\265\001\002\000\006\041\uff54\055\uff80\001\002" +
    "\000\006\041\uff52\055\uff7e\001\002\000\006\041\uff55\055" +
    "\uff7f\001\002\000\004\041\uff53\001\002\000\004\041\272" +
    "\001\002\000\044\003\uff57\004\uff57\005\uff57\006\uff57\010" +
    "\uff57\013\uff57\014\uff57\015\uff57\016\uff57\042\uff57\043\uff57" +
    "\044\uff57\046\uff57\051\uff57\053\uff57\054\uff57\061\uff57\001" +
    "\002\000\004\041\274\001\002\000\044\003\uff56\004\uff56" +
    "\005\uff56\006\uff56\010\uff56\013\uff56\014\uff56\015\uff56\016" +
    "\uff56\042\uff56\043\uff56\044\uff56\046\uff56\051\uff56\053\uff56" +
    "\054\uff56\061\uff56\001\002\000\014\005\uffbd\006\uffbd\010" +
    "\uffbd\046\uffbd\053\uffbd\001\002\000\020\007\351\011\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\040\153\055\uff7e\001\002\000" +
    "\012\003\300\007\301\032\246\033\247\001\002\000\004" +
    "\015\344\001\002\000\006\003\302\015\303\001\002\000" +
    "\036\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113" +
    "\014\114\015\105\016\015\043\067\044\112\051\104\054" +
    "\075\061\101\001\002\000\036\003\111\004\077\005\uffb6" +
    "\006\uffb6\010\uffb6\013\113\014\114\015\105\016\015\043" +
    "\067\044\112\051\104\054\075\061\101\001\002\000\010" +
    "\005\307\006\uffac\010\306\001\002\000\004\006\335\001" +
    "\002\000\024\003\314\014\144\022\133\023\137\025\142" +
    "\034\241\040\140\056\134\060\124\001\002\000\006\003" +
    "\310\015\311\001\002\000\010\005\307\006\uffac\010\306" +
    "\001\002\000\010\005\307\006\uffac\010\306\001\002\000" +
    "\004\006\uffad\001\002\000\004\006\uffa8\001\002\000\020" +
    "\007\331\011\uff6e\027\uff6e\030\uff6e\031\uff6e\040\153\055" +
    "\uff7e\001\002\000\012\003\317\007\316\032\246\033\247" +
    "\001\002\000\006\003\323\015\324\001\002\000\004\015" +
    "\320\001\002\000\036\003\111\004\077\005\uffb6\006\uffb6" +
    "\010\uffb6\013\113\014\114\015\105\016\015\043\067\044" +
    "\112\051\104\054\075\061\101\001\002\000\010\005\307" +
    "\006\uffac\010\306\001\002\000\004\006\uffaa\001\002\000" +
    "\036\003\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113" +
    "\014\114\015\105\016\015\043\067\044\112\051\104\054" +
    "\075\061\101\001\002\000\036\003\111\004\077\005\uffb6" +
    "\006\uffb6\010\uffb6\013\113\014\114\015\105\016\015\043" +
    "\067\044\112\051\104\054\075\061\101\001\002\000\010" +
    "\005\307\006\uffac\010\306\001\002\000\004\006\uffae\001" +
    "\002\000\010\005\307\006\uffac\010\306\001\002\000\004" +
    "\006\uffa9\001\002\000\004\015\332\001\002\000\036\003" +
    "\111\004\077\005\uffb6\006\uffb6\010\uffb6\013\113\014\114" +
    "\015\105\016\015\043\067\044\112\051\104\054\075\061" +
    "\101\001\002\000\010\005\307\006\uffac\010\306\001\002" +
    "\000\004\006\uffab\001\002\000\006\003\336\004\337\001" +
    "\002\000\042\003\uffaf\004\uffaf\005\uffaf\006\uffaf\010\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\043\uffaf\044\uffaf\046" +
    "\uffaf\051\uffaf\053\uffaf\054\uffaf\061\uffaf\001\002\000\042" +
    "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\010\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\043\uffb3\044\uffb3\046\uffb3\051\uffb3" +
    "\053\uffb3\054\uffb3\061\uffb3\001\002\000\010\005\307\006" +
    "\uffac\010\306\001\002\000\004\006\342\001\002\000\004" +
    "\004\343\001\002\000\042\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\043\uffb0" +
    "\044\uffb0\046\uffb0\051\uffb0\053\uffb0\054\uffb0\061\uffb0\001" +
    "\002\000\036\003\111\004\077\005\uffb6\006\uffb6\010\uffb6" +
    "\013\113\014\114\015\105\016\015\043\067\044\112\051" +
    "\104\054\075\061\101\001\002\000\010\005\307\006\uffac" +
    "\010\306\001\002\000\004\006\347\001\002\000\004\004" +
    "\350\001\002\000\042\003\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\010\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\043\uffb1\044" +
    "\uffb1\046\uffb1\051\uffb1\053\uffb1\054\uffb1\061\uffb1\001\002" +
    "\000\004\015\352\001\002\000\036\003\111\004\077\005" +
    "\uffb6\006\uffb6\010\uffb6\013\113\014\114\015\105\016\015" +
    "\043\067\044\112\051\104\054\075\061\101\001\002\000" +
    "\010\005\307\006\uffac\010\306\001\002\000\004\006\355" +
    "\001\002\000\004\004\356\001\002\000\042\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\010\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\043\uffb2\044\uffb2\046\uffb2\051\uffb2\053\uffb2\054" +
    "\uffb2\061\uffb2\001\002\000\004\057\360\001\002\000\056" +
    "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\037\uffc4\043\uffc4\044\uffc4\046\uffc4" +
    "\051\uffc4\053\uffc4\054\uffc4\057\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\001\002\000\042\003\uffa4\004\uffa4" +
    "\005\uffa4\006\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\043\uffa4\044\uffa4\046\uffa4\051\uffa4\053\uffa4\054\uffa4" +
    "\061\uffa4\001\002\000\014\005\uffc0\006\uffc0\010\uffc0\046" +
    "\uffc0\053\uffc0\001\002\000\014\005\uffbb\006\uffbb\010\uffbb" +
    "\046\uffbb\053\uffbb\001\002\000\014\005\uffb7\006\uffb7\010" +
    "\uffb7\046\uffb7\053\uffb7\001\002\000\014\005\uffbc\006\uffbc" +
    "\010\uffbc\046\uffbc\053\uffbc\001\002\000\042\003\111\004" +
    "\077\005\uffb6\006\uffb6\010\uffb6\013\113\014\114\015\105" +
    "\016\015\043\067\044\112\046\uffb6\051\104\053\uffb6\054" +
    "\075\061\101\001\002\000\014\005\uffbe\006\uffbe\010\uffbe" +
    "\046\uffbe\053\uffbe\001\002\000\012\003\377\021\064\024" +
    "\062\026\063\001\002\000\010\021\064\024\062\026\063" +
    "\001\002\000\004\015\373\001\002\000\032\003\111\004" +
    "\077\006\uffb6\013\113\014\114\015\105\016\015\043\067" +
    "\044\112\051\104\054\075\061\101\001\002\000\004\006" +
    "\375\001\002\000\004\057\376\001\002\000\056\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\010\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\037\uffc3\043\uffc3\044\uffc3\046\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\001\002\000\004\015\u0109\001\002\000\006" +
    "\003\u0101\015\u0102\001\002\000\032\003\111\004\077\006" +
    "\uffb6\013\113\014\114\015\105\016\015\043\067\044\112" +
    "\051\104\054\075\061\101\001\002\000\032\003\111\004" +
    "\077\006\uffb6\013\113\014\114\015\105\016\015\043\067" +
    "\044\112\051\104\054\075\061\101\001\002\000\004\006" +
    "\u0104\001\002\000\004\057\u0105\001\002\000\056\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\010\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\037\uffc7\043\uffc7\044\uffc7\046\uffc7\051\uffc7" +
    "\053\uffc7\054\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\001\002\000\004\006\u0107\001\002\000\004" +
    "\057\u0108\001\002\000\056\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\037\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\051\uffc1\053\uffc1\054\uffc1\057" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002" +
    "\000\032\003\111\004\077\006\uffb6\013\113\014\114\015" +
    "\105\016\015\043\067\044\112\051\104\054\075\061\101" +
    "\001\002\000\004\006\u010b\001\002\000\004\057\u010c\001" +
    "\002\000\056\003\uffc2\004\uffc2\005\uffc2\006\uffc2\010\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\037\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\051\uffc2\053\uffc2\054\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\004\014" +
    "\u0113\001\002\000\010\021\064\024\062\026\063\001\002" +
    "\000\062\003\uff63\004\uff63\005\uff63\006\uff63\010\uff63\013" +
    "\uff63\014\uff63\015\uff63\016\uff63\037\uff63\041\uff63\042\uff63" +
    "\043\uff63\044\uff63\046\uff63\051\uff63\053\uff63\054\uff63\057" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\001\002" +
    "\000\064\003\uff64\004\uff64\005\uff64\006\uff64\010\uff64\013" +
    "\uff64\014\uff64\015\uff64\016\uff64\017\u0111\037\uff64\041\uff64" +
    "\042\uff64\043\uff64\044\uff64\046\uff64\051\uff64\053\uff64\054" +
    "\uff64\057\uff64\061\uff64\062\uff64\063\uff64\064\uff64\065\uff64" +
    "\001\002\000\004\014\054\001\002\000\062\003\uff65\004" +
    "\uff65\005\uff65\006\uff65\010\uff65\013\uff65\014\uff65\015\uff65" +
    "\016\uff65\037\uff65\041\uff65\042\uff65\043\uff65\044\uff65\046" +
    "\uff65\051\uff65\053\uff65\054\uff65\057\uff65\061\uff65\062\uff65" +
    "\063\uff65\064\uff65\065\uff65\001\002\000\010\003\uff62\017" +
    "\uff62\020\uff62\001\002\000\004\041\u0115\001\002\000\004" +
    "\020\u0116\001\002\000\010\021\064\024\062\026\063\001" +
    "\002\000\004\015\u0118\001\002\000\032\003\111\004\077" +
    "\006\uffb6\013\113\014\114\015\105\016\015\043\067\044" +
    "\112\051\104\054\075\061\101\001\002\000\004\006\u011a" +
    "\001\002\000\004\057\u011b\001\002\000\056\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\037\uffc5\043\uffc5\044\uffc5\046\uffc5\051\uffc5\053" +
    "\uffc5\054\uffc5\057\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\001\002\000\006\014\054\041\uff8e\001\002\000" +
    "\004\041\u011e\001\002\000\004\020\u011f\001\002\000\010" +
    "\021\064\024\062\026\063\001\002\000\004\015\u0121\001" +
    "\002\000\032\003\111\004\077\006\uffb6\013\113\014\114" +
    "\015\105\016\015\043\067\044\112\051\104\054\075\061" +
    "\101\001\002\000\004\006\u0123\001\002\000\004\057\u0124" +
    "\001\002\000\056\003\uffc6\004\uffc6\005\uffc6\006\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\037\uffc6\043\uffc6" +
    "\044\uffc6\046\uffc6\051\uffc6\053\uffc6\054\uffc6\057\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\004" +
    "\014\u0126\001\002\000\004\015\u0127\001\002\000\014\016" +
    "\015\062\020\063\026\064\023\065\024\001\002\000\014" +
    "\016\015\062\020\063\026\064\023\065\024\001\002\000" +
    "\004\006\u014b\001\002\000\004\014\u012c\001\002\000\004" +
    "\015\u0149\001\002\000\006\017\u012d\020\u012e\001\002\000" +
    "\004\014\054\001\002\000\012\014\u0131\021\u0133\024\u012f" +
    "\026\u0132\001\002\000\064\003\uff5a\004\uff5a\005\uff5a\006" +
    "\uff5a\010\uff5a\011\u0142\013\uff5a\014\uff5a\015\uff5a\016\uff5a" +
    "\017\uff5a\037\uff5a\042\uff5a\043\uff5a\044\uff5a\046\uff5a\051" +
    "\uff5a\053\uff5a\054\uff5a\057\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\001\002\000\060\003\uff6b\004\uff6b\005" +
    "\uff6b\006\uff6b\010\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b" +
    "\037\uff6b\042\uff6b\043\uff6b\044\uff6b\046\uff6b\051\uff6b\053" +
    "\uff6b\054\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b" +
    "\065\uff6b\001\002\000\062\003\uff5b\004\uff5b\005\uff5b\006" +
    "\uff5b\010\uff5b\011\u013d\013\uff5b\014\uff5b\015\uff5b\016\uff5b" +
    "\037\uff5b\042\uff5b\043\uff5b\044\uff5b\046\uff5b\051\uff5b\053" +
    "\uff5b\054\uff5b\057\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b" +
    "\065\uff5b\001\002\000\064\003\uff59\004\uff59\005\uff59\006" +
    "\uff59\010\uff59\011\u013a\013\uff59\014\uff59\015\uff59\016\uff59" +
    "\017\uff59\037\uff59\042\uff59\043\uff59\044\uff59\046\uff59\051" +
    "\uff59\053\uff59\054\uff59\057\uff59\061\uff59\062\uff59\063\uff59" +
    "\064\uff59\065\uff59\001\002\000\064\003\uff58\004\uff58\005" +
    "\uff58\006\uff58\010\uff58\011\u0137\013\uff58\014\uff58\015\uff58" +
    "\016\uff58\017\uff58\037\uff58\042\uff58\043\uff58\044\uff58\046" +
    "\uff58\051\uff58\053\uff58\054\uff58\057\uff58\061\uff58\062\uff58" +
    "\063\uff58\064\uff58\065\uff58\001\002\000\062\003\uff67\004" +
    "\uff67\005\uff67\006\uff67\010\uff67\013\uff67\014\uff67\015\uff67" +
    "\016\uff67\017\u0135\037\uff67\042\uff67\043\uff67\044\uff67\046" +
    "\uff67\051\uff67\053\uff67\054\uff67\057\uff67\061\uff67\062\uff67" +
    "\063\uff67\064\uff67\065\uff67\001\002\000\004\014\054\001" +
    "\002\000\060\003\uff6a\004\uff6a\005\uff6a\006\uff6a\010\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\016\uff6a\037\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\046\uff6a\051\uff6a\053\uff6a\054\uff6a\057\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\001\002\000" +
    "\006\022\u0138\023\u0139\001\002\000\060\003\uff5e\004\uff5e" +
    "\005\uff5e\006\uff5e\010\uff5e\013\uff5e\014\uff5e\015\uff5e\016" +
    "\uff5e\037\uff5e\042\uff5e\043\uff5e\044\uff5e\046\uff5e\051\uff5e" +
    "\053\uff5e\054\uff5e\057\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\065\uff5e\001\002\000\060\003\uff5d\004\uff5d\005\uff5d" +
    "\006\uff5d\010\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\037" +
    "\uff5d\042\uff5d\043\uff5d\044\uff5d\046\uff5d\051\uff5d\053\uff5d" +
    "\054\uff5d\057\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065" +
    "\uff5d\001\002\000\010\003\162\014\163\056\u013b\001\002" +
    "\000\062\003\uff5f\004\uff5f\005\uff5f\006\uff5f\010\uff5f\013" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\037\uff5f\042\uff5f\043\uff5f" +
    "\044\uff5f\046\uff5f\051\uff5f\053\uff5f\054\uff5f\055\uff80\057" +
    "\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\065\uff5f\001\002" +
    "\000\060\003\uff5c\004\uff5c\005\uff5c\006\uff5c\010\uff5c\013" +
    "\uff5c\014\uff5c\015\uff5c\016\uff5c\037\uff5c\042\uff5c\043\uff5c" +
    "\044\uff5c\046\uff5c\051\uff5c\053\uff5c\054\uff5c\057\uff5c\061" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\001\002\000\004" +
    "\035\u013e\001\002\000\006\003\u013f\014\u0140\001\002\000" +
    "\004\040\153\001\002\000\004\040\121\001\002\000\060" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\010\uff66\013\uff66\014" +
    "\uff66\015\uff66\016\uff66\037\uff66\042\uff66\043\uff66\044\uff66" +
    "\046\uff66\051\uff66\053\uff66\054\uff66\057\uff66\061\uff66\062" +
    "\uff66\063\uff66\064\uff66\065\uff66\001\002\000\012\003\151" +
    "\014\152\025\142\040\140\001\002\000\062\003\uff60\004" +
    "\uff60\005\uff60\006\uff60\010\uff60\013\uff60\014\uff60\015\uff60" +
    "\016\uff60\030\147\037\uff60\042\uff60\043\uff60\044\uff60\046" +
    "\uff60\051\uff60\053\uff60\054\uff60\057\uff60\061\uff60\062\uff60" +
    "\063\uff60\064\uff60\065\uff60\001\002\000\006\017\u010d\020" +
    "\u0145\001\002\000\010\021\064\024\062\026\063\001\002" +
    "\000\062\003\uff68\004\uff68\005\uff68\006\uff68\010\uff68\013" +
    "\uff68\014\uff68\015\uff68\016\uff68\017\u0147\037\uff68\042\uff68" +
    "\043\uff68\044\uff68\046\uff68\051\uff68\053\uff68\054\uff68\057" +
    "\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68\001\002" +
    "\000\004\014\054\001\002\000\060\003\uff69\004\uff69\005" +
    "\uff69\006\uff69\010\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\037\uff69\042\uff69\043\uff69\044\uff69\046\uff69\051\uff69\053" +
    "\uff69\054\uff69\057\uff69\061\uff69\062\uff69\063\uff69\064\uff69" +
    "\065\uff69\001\002\000\014\016\015\062\020\063\026\064" +
    "\023\065\024\001\002\000\004\006\uffe9\001\002\000\004" +
    "\012\u014c\001\002\000\022\015\uffee\016\uffee\037\uffee\057" +
    "\uffee\062\uffee\063\uffee\064\uffee\065\uffee\001\002\000\004" +
    "\006\uffe8\001\002\000\004\040\u01cc\001\002\000\006\003" +
    "\u0150\040\u0151\001\002\000\006\014\054\041\uff8e\001\002" +
    "\000\010\003\uff8e\014\054\041\uff8e\001\002\000\006\003" +
    "\u0154\041\u0153\001\002\000\006\003\u01be\015\u01bf\001\002" +
    "\000\004\015\u0155\001\002\000\032\003\u0162\004\u015b\006" +
    "\uffd7\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156" +
    "\044\u0163\051\u015d\061\101\001\002\000\004\037\u01bc\001" +
    "\002\000\004\044\u01b3\001\002\000\042\003\u0162\004\u015b" +
    "\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015\u015e\016" +
    "\015\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d\053\uffd7" +
    "\061\101\001\002\000\042\003\u0162\004\u015b\005\uffd7\006" +
    "\uffd7\010\uffd7\013\113\014\114\015\u015e\016\015\042\u0157" +
    "\043\u0156\044\u0163\046\uffd7\051\u015d\053\uffd7\061\101\001" +
    "\002\000\042\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7" +
    "\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156\044" +
    "\u0163\046\uffd7\051\u015d\053\uffd7\061\101\001\002\000\024" +
    "\003\u017f\014\144\022\133\023\137\025\142\034\241\040" +
    "\140\056\134\060\124\001\002\000\042\003\u0162\004\u015b" +
    "\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015\u015e\016" +
    "\015\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d\053\uffd7" +
    "\061\101\001\002\000\006\015\u0175\050\u0174\001\002\000" +
    "\042\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7\013\113" +
    "\014\114\015\u015e\016\015\042\u0157\043\u0156\044\u0163\046" +
    "\uffd7\051\u015d\053\uffd7\061\101\001\002\000\042\003\u0162" +
    "\004\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015" +
    "\u015e\016\015\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d" +
    "\053\uffd7\061\101\001\002\000\042\003\u0162\004\u015b\005" +
    "\uffd7\006\uffd7\010\uffd7\013\113\014\114\015\u015e\016\015" +
    "\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d\053\uffd7\061" +
    "\101\001\002\000\004\006\u016f\001\002\000\054\003\u0162" +
    "\004\u015b\005\uffd7\006\uffd7\010\uffd7\011\216\013\113\014" +
    "\114\015\u015e\016\015\030\116\031\122\037\u016c\040\153" +
    "\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d\053\uffd7\061" +
    "\101\001\002\000\006\003\205\014\206\001\002\000\042" +
    "\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014" +
    "\114\015\u015e\016\015\042\u0157\043\u0156\044\u0163\046\uffd7" +
    "\051\u015d\053\uffd7\061\101\001\002\000\014\005\uffdc\006" +
    "\uffdc\010\uffdc\046\uffdc\053\uffdc\001\002\000\004\045\u0167" +
    "\001\002\000\012\003\151\014\152\025\142\040\140\001" +
    "\002\000\006\015\u0169\030\147\001\002\000\032\003\u0162" +
    "\004\u015b\013\113\014\114\015\u015e\016\015\042\u0157\043" +
    "\u0156\044\u0163\046\uffd7\051\u015d\061\101\001\002\000\004" +
    "\046\u016b\001\002\000\042\003\uffc8\004\uffc8\005\uffc8\006" +
    "\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\046\uffc8\051\uffc8\053\uffc8\061\uffc8\001" +
    "\002\000\042\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7" +
    "\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156\044" +
    "\u0163\046\uffd7\051\u015d\053\uffd7\061\101\001\002\000\014" +
    "\005\uffd9\006\uffd9\010\uffd9\046\uffd9\053\uffd9\001\002\000" +
    "\014\005\uffd8\006\uffd8\010\uffd8\046\uffd8\053\uffd8\001\002" +
    "\000\004\037\u0170\001\002\000\022\015\uffe4\016\uffe4\037" +
    "\uffe4\057\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\001\002" +
    "\000\014\005\uffdd\006\uffdd\010\uffdd\046\uffdd\053\uffdd\001" +
    "\002\000\014\005\uffda\006\uffda\010\uffda\046\uffda\053\uffda" +
    "\001\002\000\014\005\uffe1\006\uffe1\010\uffe1\046\uffe1\053" +
    "\uffe1\001\002\000\024\003\141\014\144\022\133\023\137" +
    "\025\142\034\241\040\140\056\134\060\124\001\002\000" +
    "\032\003\u0162\004\u015b\013\113\014\114\015\u015e\016\015" +
    "\042\u0157\043\u0156\044\u0163\051\u015d\053\uffd7\061\101\001" +
    "\002\000\004\053\u0177\001\002\000\004\050\u0178\001\002" +
    "\000\024\003\141\014\144\022\133\023\137\025\142\034" +
    "\241\040\140\056\134\060\124\001\002\000\046\003\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\010\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\032\246\033\247\042\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\051\uffc9\053\uffc9\061\uffc9\001\002\000\010\015" +
    "\u017b\032\246\033\247\001\002\000\032\003\u0162\004\u015b" +
    "\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156\044" +
    "\u0163\051\u015d\053\uffd7\061\101\001\002\000\004\053\u017d" +
    "\001\002\000\042\003\uffca\004\uffca\005\uffca\006\uffca\010" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\051\uffca\053\uffca\061\uffca\001\002\000" +
    "\014\005\uffdf\006\uffdf\010\uffdf\046\uffdf\053\uffdf\001\002" +
    "\000\020\007\u01aa\011\uff6e\027\uff6e\030\uff6e\031\uff6e\040" +
    "\153\055\uff7e\001\002\000\012\003\u0181\007\u0182\032\246" +
    "\033\247\001\002\000\004\015\u01a5\001\002\000\006\003" +
    "\u0183\015\u0184\001\002\000\036\003\u0162\004\u015b\005\uffd7" +
    "\006\uffd7\010\uffd7\013\113\014\114\015\u015e\016\015\042" +
    "\u0157\043\u0156\044\u0163\051\u015d\061\101\001\002\000\036" +
    "\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014" +
    "\114\015\u015e\016\015\042\u0157\043\u0156\044\u0163\051\u015d" +
    "\061\101\001\002\000\010\005\u0187\006\uffcf\010\u0186\001" +
    "\002\000\024\003\u0190\014\144\022\133\023\137\025\142" +
    "\034\241\040\140\056\134\060\124\001\002\000\006\003" +
    "\u018c\015\u018d\001\002\000\004\006\u0189\001\002\000\006" +
    "\003\u018a\004\u018b\001\002\000\042\003\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\010\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\046\uffd2\051\uffd2\053\uffd2\061" +
    "\uffd2\001\002\000\042\003\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\010\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\051\uffd6\053\uffd6\061\uffd6\001\002" +
    "\000\032\003\u0162\004\u015b\006\uffd7\013\113\014\114\015" +
    "\u015e\016\015\042\u0157\043\u0156\044\u0163\051\u015d\061\101" +
    "\001\002\000\032\003\u0162\004\u015b\006\uffd7\013\113\014" +
    "\114\015\u015e\016\015\042\u0157\043\u0156\044\u0163\051\u015d" +
    "\061\101\001\002\000\004\006\uffd0\001\002\000\004\006" +
    "\uffcb\001\002\000\020\007\u019d\011\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\040\153\055\uff7e\001\002\000\012\003\u0192\007" +
    "\u0193\032\246\033\247\001\002\000\004\015\u019a\001\002" +
    "\000\006\003\u0194\015\u0195\001\002\000\036\003\u0162\004" +
    "\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015\u015e" +
    "\016\015\042\u0157\043\u0156\044\u0163\051\u015d\061\101\001" +
    "\002\000\036\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7" +
    "\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156\044" +
    "\u0163\051\u015d\061\101\001\002\000\010\005\u0187\006\uffcf" +
    "\010\u0186\001\002\000\004\006\uffd1\001\002\000\010\005" +
    "\u0187\006\uffcf\010\u0186\001\002\000\004\006\uffcc\001\002" +
    "\000\036\003\u0162\004\u015b\005\uffd7\006\uffd7\010\uffd7\013" +
    "\113\014\114\015\u015e\016\015\042\u0157\043\u0156\044\u0163" +
    "\051\u015d\061\101\001\002\000\010\005\u0187\006\uffcf\010" +
    "\u0186\001\002\000\004\006\uffcd\001\002\000\004\015\u019e" +
    "\001\002\000\036\003\u0162\004\u015b\005\uffd7\006\uffd7\010" +
    "\uffd7\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156" +
    "\044\u0163\051\u015d\061\101\001\002\000\010\005\u0187\006" +
    "\uffcf\010\u0186\001\002\000\004\006\uffce\001\002\000\010" +
    "\005\u0187\006\uffcf\010\u0186\001\002\000\004\006\u01a3\001" +
    "\002\000\004\004\u01a4\001\002\000\042\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\010\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\051\uffd3\053\uffd3" +
    "\061\uffd3\001\002\000\036\003\u0162\004\u015b\005\uffd7\006" +
    "\uffd7\010\uffd7\013\113\014\114\015\u015e\016\015\042\u0157" +
    "\043\u0156\044\u0163\051\u015d\061\101\001\002\000\010\005" +
    "\u0187\006\uffcf\010\u0186\001\002\000\004\006\u01a8\001\002" +
    "\000\004\004\u01a9\001\002\000\042\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\010\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\046\uffd4\051\uffd4\053\uffd4\061" +
    "\uffd4\001\002\000\004\015\u01ab\001\002\000\036\003\u0162" +
    "\004\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015" +
    "\u015e\016\015\042\u0157\043\u0156\044\u0163\051\u015d\061\101" +
    "\001\002\000\010\005\u0187\006\uffcf\010\u0186\001\002\000" +
    "\004\006\u01ae\001\002\000\004\004\u01af\001\002\000\042" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5" +
    "\051\uffd5\053\uffd5\061\uffd5\001\002\000\014\005\uffdb\006" +
    "\uffdb\010\uffdb\046\uffdb\053\uffdb\001\002\000\014\005\uffe2" +
    "\006\uffe2\010\uffe2\046\uffe2\053\uffe2\001\002\000\014\005" +
    "\uffde\006\uffde\010\uffde\046\uffde\053\uffde\001\002\000\004" +
    "\045\u01b4\001\002\000\004\046\u01b5\001\002\000\004\047" +
    "\u01b6\001\002\000\004\012\u01b7\001\002\000\004\050\u01b8" +
    "\001\002\000\004\051\u01b9\001\002\000\004\052\u01ba\001" +
    "\002\000\004\053\u01bb\001\002\000\014\005\uff51\006\uff51" +
    "\010\uff51\046\uff51\053\uff51\001\002\000\042\003\u0162\004" +
    "\u015b\005\uffd7\006\uffd7\010\uffd7\013\113\014\114\015\u015e" +
    "\016\015\042\u0157\043\u0156\044\u0163\046\uffd7\051\u015d\053" +
    "\uffd7\061\101\001\002\000\014\005\uffe0\006\uffe0\010\uffe0" +
    "\046\uffe0\053\uffe0\001\002\000\032\003\u0162\004\u015b\006" +
    "\uffd7\013\113\014\114\015\u015e\016\015\042\u0157\043\u0156" +
    "\044\u0163\051\u015d\061\101\001\002\000\032\003\u0162\004" +
    "\u015b\006\uffd7\013\113\014\114\015\u015e\016\015\042\u0157" +
    "\043\u0156\044\u0163\051\u015d\061\101\001\002\000\004\006" +
    "\u01c1\001\002\000\004\037\u01c2\001\002\000\022\015\uffe7" +
    "\016\uffe7\037\uffe7\057\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\001\002\000\004\006\u01c4\001\002\000\004\037\u01c5" +
    "\001\002\000\022\015\uffe3\016\uffe3\037\uffe3\057\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\001\002\000\004\041\u01c7" +
    "\001\002\000\004\015\u01c8\001\002\000\032\003\u0162\004" +
    "\u015b\006\uffd7\013\113\014\114\015\u015e\016\015\042\u0157" +
    "\043\u0156\044\u0163\051\u015d\061\101\001\002\000\004\006" +
    "\u01ca\001\002\000\004\037\u01cb\001\002\000\022\015\uffe5" +
    "\016\uffe5\037\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\001\002\000\006\014\054\041\uff8e\001\002\000\004" +
    "\041\u01ce\001\002\000\004\015\u01cf\001\002\000\032\003" +
    "\u0162\004\u015b\006\uffd7\013\113\014\114\015\u015e\016\015" +
    "\042\u0157\043\u0156\044\u0163\051\u015d\061\101\001\002\000" +
    "\004\006\u01d1\001\002\000\004\037\u01d2\001\002\000\022" +
    "\015\uffe6\016\uffe6\037\uffe6\057\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\001\002\000\006\003\ufff9\006\ufff9\001\002" +
    "\000\006\003\ufff8\006\ufff8\001\002\000\006\003\ufff7\006" +
    "\ufff7\001\002\000\004\036\u01da\001\002\000\006\003\u01d8" +
    "\036\u01d9\001\002\000\004\002\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffb\001\002\000\060\003\uff6c" +
    "\004\uff6c\005\uff6c\006\uff6c\010\uff6c\013\uff6c\014\uff6c\015" +
    "\uff6c\016\uff6c\037\uff6c\042\uff6c\043\uff6c\044\uff6c\046\uff6c" +
    "\051\uff6c\053\uff6c\054\uff6c\057\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\001\002\000\060\003\uff6d\004\uff6d" +
    "\005\uff6d\006\uff6d\010\uff6d\013\uff6d\014\uff6d\015\uff6d\016" +
    "\uff6d\037\uff6d\042\uff6d\043\uff6d\044\uff6d\046\uff6d\051\uff6d" +
    "\053\uff6d\054\uff6d\057\uff6d\061\uff6d\062\uff6d\063\uff6d\064" +
    "\uff6d\065\uff6d\001\002\000\004\006\u01de\001\002\000\004" +
    "\036\u01df\001\002\000\004\002\ufffc\001\002\000\022\015" +
    "\021\016\015\037\025\057\030\062\020\063\026\064\023" +
    "\065\024\001\002\000\004\006\u01e2\001\002\000\004\036" +
    "\u01e3\001\002\000\004\002\ufffd\001\002\000\004\015\u01e5" +
    "\001\002\000\022\015\021\016\015\037\025\057\030\062" +
    "\020\063\026\064\023\065\024\001\002\000\004\006\u01e7" +
    "\001\002\000\004\036\u01e8\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e6\000\006\002\006\063\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\u01dc\005\031\006\030\007\026\015\016\042\021" +
    "\001\001\000\016\003\015\005\031\006\030\007\026\015" +
    "\016\042\021\001\001\000\004\041\u01db\001\001\000\002" +
    "\001\001\000\016\003\u01d4\005\031\006\030\007\026\015" +
    "\016\042\021\001\001\000\002\001\001\000\016\003\u01d3" +
    "\005\031\006\030\007\026\015\016\042\021\001\001\000" +
    "\016\003\u01d2\005\031\006\030\007\026\015\016\042\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\045\005\031\006\030\007\026\015\016\042" +
    "\021\001\001\000\016\004\033\005\037\006\036\007\026" +
    "\015\032\042\035\001\001\000\016\004\044\005\037\006" +
    "\036\007\026\015\032\042\035\001\001\000\002\001\001" +
    "\000\016\004\043\005\037\006\036\007\026\015\032\042" +
    "\035\001\001\000\016\004\042\005\037\006\036\007\026" +
    "\015\032\042\035\001\001\000\016\004\041\005\037\006" +
    "\036\007\026\015\032\042\035\001\001\000\016\004\040" +
    "\005\037\006\036\007\026\015\032\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u0113\033\054\034\052" +
    "\001\001\000\010\014\055\033\054\034\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\101\016\075\020" +
    "\067\022\072\037\107\040\070\042\073\051\077\052\102" +
    "\056\071\057\106\062\105\001\001\000\002\001\001\000" +
    "\032\011\101\016\364\020\067\022\072\037\107\040\070" +
    "\042\073\051\077\052\102\056\071\057\106\062\105\001" +
    "\001\000\032\011\101\016\363\020\067\022\072\037\107" +
    "\040\070\042\073\051\077\052\102\056\071\057\106\062" +
    "\105\001\001\000\002\001\001\000\032\011\101\016\362" +
    "\020\067\022\072\037\107\040\070\042\073\051\077\052" +
    "\102\056\071\057\106\062\105\001\001\000\032\011\101" +
    "\016\361\020\067\022\072\037\107\040\070\042\073\051" +
    "\077\052\102\056\071\057\106\062\105\001\001\000\024" +
    "\021\360\022\126\044\144\045\127\046\130\047\131\050" +
    "\145\053\135\054\142\001\001\000\002\001\001\000\030" +
    "\022\126\025\276\026\237\027\242\044\144\045\127\046" +
    "\130\047\241\050\244\053\135\054\142\001\001\000\032" +
    "\011\101\016\274\020\067\022\072\037\107\040\070\042" +
    "\073\051\077\052\102\056\071\057\106\062\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\101\016\231\020\067\022\072" +
    "\037\107\040\070\042\073\051\077\052\102\056\071\057" +
    "\106\062\105\001\001\000\032\011\101\016\230\020\067" +
    "\022\072\037\107\040\070\042\073\051\077\052\102\056" +
    "\071\057\106\062\105\001\001\000\032\011\101\016\227" +
    "\020\067\022\072\037\107\040\070\042\073\051\077\052" +
    "\102\056\071\057\106\062\105\001\001\000\032\011\101" +
    "\016\226\020\067\022\072\037\107\040\070\042\073\051" +
    "\077\052\102\056\071\057\106\062\105\001\001\000\036" +
    "\011\101\015\224\016\223\020\067\022\072\037\107\040" +
    "\070\042\073\051\077\052\102\055\221\056\071\057\106" +
    "\062\105\001\001\000\006\043\206\052\203\001\001\000" +
    "\004\055\177\001\001\000\004\055\114\001\001\000\014" +
    "\022\126\044\144\045\127\046\130\050\176\001\001\000" +
    "\002\001\001\000\014\022\126\044\144\045\127\046\130" +
    "\050\174\001\001\000\010\047\173\053\135\054\142\001" +
    "\001\000\030\021\124\022\126\023\134\024\125\044\144" +
    "\045\127\046\130\047\131\050\145\053\135\054\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\126\044\165\045\127" +
    "\046\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\126\045\147\046\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\021\124\022\126\023\134\024\153\044\144\045\127\046" +
    "\130\047\131\050\145\053\135\054\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\126\046\156\001" +
    "\001\000\002\001\001\000\006\053\164\054\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\021\171\022\126\044\144\045\127\046" +
    "\130\047\131\050\145\053\135\054\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\126\044\144\045\127\046\130\050\202\001" +
    "\001\000\010\047\201\053\135\054\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\221\001\001\000\004\055\114\001\001\000\002\001\001" +
    "\000\012\022\126\044\210\045\127\046\130\001\001\000" +
    "\002\001\001\000\032\011\101\016\212\020\067\022\072" +
    "\037\107\040\070\042\073\051\077\052\102\056\071\057" +
    "\106\062\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\126\044\220\045\127\046\130\001\001\000\002" +
    "\001\001\000\014\022\126\044\144\045\127\046\130\050" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\101\016\225\020\067\022\072\037\107\040\070\042" +
    "\073\051\077\052\102\056\071\057\106\062\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\126\025\256" +
    "\026\237\027\242\044\144\045\127\046\130\047\241\050" +
    "\244\053\135\054\142\001\001\000\032\011\101\016\234" +
    "\020\067\022\072\037\107\040\070\042\073\051\077\052" +
    "\102\056\071\057\106\062\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\022\126\025\243\026\237\027" +
    "\242\044\144\045\127\046\130\047\241\050\244\053\135" +
    "\054\142\001\001\000\002\001\001\000\026\022\126\026" +
    "\255\027\242\044\144\045\127\046\130\047\241\050\244" +
    "\053\135\054\142\001\001\000\002\001\001\000\004\030" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\022\126\026\250\027\242\044\144\045\127\046\130\047" +
    "\241\050\244\053\135\054\142\001\001\000\026\022\126" +
    "\026\247\027\242\044\144\045\127\046\130\047\241\050" +
    "\244\053\135\054\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\022\126\027\254\044" +
    "\144\045\127\046\130\047\241\050\244\053\135\054\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\101\016\260\020\067" +
    "\022\072\037\107\040\070\042\073\051\077\052\102\056" +
    "\071\057\106\062\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\267\054\142\060\272\001\001\000" +
    "\010\053\267\054\142\060\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\101" +
    "\016\337\020\067\022\072\037\107\040\070\042\073\051" +
    "\077\052\102\056\071\057\106\062\105\001\001\000\032" +
    "\011\101\016\303\020\067\022\072\037\107\040\070\042" +
    "\073\051\077\052\102\056\071\057\106\062\105\001\001" +
    "\000\004\017\304\001\001\000\002\001\001\000\030\022" +
    "\126\025\314\026\237\027\242\044\144\045\127\046\130" +
    "\047\241\050\244\053\135\054\142\001\001\000\002\001" +
    "\001\000\004\017\312\001\001\000\004\017\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\101\016\320\020\067\022\072\037\107\040\070\042" +
    "\073\051\077\052\102\056\071\057\106\062\105\001\001" +
    "\000\004\017\321\001\001\000\002\001\001\000\032\011" +
    "\101\016\326\020\067\022\072\037\107\040\070\042\073" +
    "\051\077\052\102\056\071\057\106\062\105\001\001\000" +
    "\032\011\101\016\324\020\067\022\072\037\107\040\070" +
    "\042\073\051\077\052\102\056\071\057\106\062\105\001" +
    "\001\000\004\017\325\001\001\000\002\001\001\000\004" +
    "\017\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\101\016\332\020\067\022\072\037\107\040\070" +
    "\042\073\051\077\052\102\056\071\057\106\062\105\001" +
    "\001\000\004\017\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\101\016\344\020\067\022\072\037" +
    "\107\040\070\042\073\051\077\052\102\056\071\057\106" +
    "\062\105\001\001\000\004\017\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\101\016\352\020\067\022\072\037\107\040" +
    "\070\042\073\051\077\052\102\056\071\057\106\062\105" +
    "\001\001\000\004\017\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\101" +
    "\016\366\020\067\022\072\037\107\040\070\042\073\051" +
    "\077\052\102\056\071\057\106\062\105\001\001\000\002" +
    "\001\001\000\004\031\377\001\001\000\004\031\371\001" +
    "\001\000\002\001\001\000\032\011\101\016\373\020\067" +
    "\022\072\037\107\040\070\042\073\051\077\052\102\056" +
    "\071\057\106\062\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\011\101\016\u0105\020\067\022\072\037\107" +
    "\040\070\042\073\051\077\052\102\056\071\057\106\062" +
    "\105\001\001\000\032\011\101\016\u0102\020\067\022\072" +
    "\037\107\040\070\042\073\051\077\052\102\056\071\057" +
    "\106\062\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\101\016\u0109\020\067\022\072" +
    "\037\107\040\070\042\073\051\077\052\102\056\071\057" +
    "\106\062\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\054" +
    "\034\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u0116\001\001" +
    "\000\002\001\001\000\032\011\101\016\u0118\020\067\022" +
    "\072\037\107\040\070\042\073\051\077\052\102\056\071" +
    "\057\106\062\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u011c\033\054\034\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u011f\001\001\000\002\001\001\000\032\011\101\016\u0121" +
    "\020\067\022\072\037\107\040\070\042\073\051\077\052" +
    "\102\056\071\057\106\062\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\u0129\010\u0128\042\u0127\001\001" +
    "\000\010\007\u0129\010\u014c\042\u0127\001\001\000\002\001" +
    "\001\000\004\041\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0143\001\001\000\006\031\u0133\032" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\054\034\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\u013b\054\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\126\044\u0142\045\127\046\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0145\001\001\000\002" +
    "\001\001\000\006\033\054\034\u0147\001\001\000\002\001" +
    "\001\000\010\007\u0129\010\u0149\042\u0127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\u01c5" +
    "\033\054\034\052\001\001\000\010\014\u0151\033\054\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\101\012\u0160\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\101\012\u01b1\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\030\011" +
    "\101\012\u01b0\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\030\011" +
    "\101\012\u01af\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\030\022" +
    "\126\025\u017f\026\237\027\242\044\144\045\127\046\130" +
    "\047\241\050\244\053\135\054\142\001\001\000\030\011" +
    "\101\012\u017d\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\002\001" +
    "\001\000\030\011\101\012\u0172\022\u0157\035\u0159\036\u015e" +
    "\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001" +
    "\001\000\030\011\101\012\u0171\022\u0157\035\u0159\036\u015e" +
    "\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001" +
    "\001\000\030\011\101\012\u0170\022\u0157\035\u0159\036\u015e" +
    "\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001" +
    "\001\000\002\001\001\000\032\011\101\012\u016c\022\u0157" +
    "\035\u0159\036\u015e\042\u0158\051\u015b\052\102\055\221\056" +
    "\071\057\u015f\061\u0163\001\001\000\006\043\u0165\052\203" +
    "\001\001\000\030\011\101\012\u0164\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\126\044\u0167\045\127\046\130\001\001\000\002\001\001" +
    "\000\030\011\101\012\u0169\022\u0157\035\u0159\036\u015e\042" +
    "\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\101\012" +
    "\u016d\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102" +
    "\056\071\057\u015f\061\u0163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\022" +
    "\126\025\u0179\026\237\027\242\044\144\045\127\046\130" +
    "\047\241\050\244\053\135\054\142\001\001\000\030\011" +
    "\101\012\u0175\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\022\126\025\u0178\026\237" +
    "\027\242\044\144\045\127\046\130\047\241\050\244\053" +
    "\135\054\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\101\012\u017b\022\u0157\035\u0159\036\u015e\042" +
    "\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\101\012\u01a0\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\030\011\101\012\u0184\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\004\013\u0187\001\001\000\030\022\126\025" +
    "\u0190\026\237\027\242\044\144\045\127\046\130\047\241" +
    "\050\244\053\135\054\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\101\012\u018e\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\030\011\101\012\u018d\022\u0157\035\u0159\036" +
    "\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\101\012\u0197\022\u0157\035\u0159\036\u015e\042" +
    "\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001\001" +
    "\000\030\011\101\012\u0195\022\u0157\035\u0159\036\u015e\042" +
    "\u0158\051\u015b\052\102\056\071\057\u015f\061\u0163\001\001" +
    "\000\004\013\u0196\001\001\000\002\001\001\000\004\013" +
    "\u0198\001\001\000\002\001\001\000\030\011\101\012\u019a" +
    "\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102\056" +
    "\071\057\u015f\061\u0163\001\001\000\004\013\u019b\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\101\012" +
    "\u019e\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102" +
    "\056\071\057\u015f\061\u0163\001\001\000\004\013\u019f\001" +
    "\001\000\002\001\001\000\004\013\u01a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\101\012\u01a5\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b" +
    "\052\102\056\071\057\u015f\061\u0163\001\001\000\004\013" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\011\101\012\u01ab\022" +
    "\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102\056\071" +
    "\057\u015f\061\u0163\001\001\000\004\013\u01ac\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\101\012\u01bc" +
    "\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102\056" +
    "\071\057\u015f\061\u0163\001\001\000\002\001\001\000\030" +
    "\011\101\012\u01c2\022\u0157\035\u0159\036\u015e\042\u0158\051" +
    "\u015b\052\102\056\071\057\u015f\061\u0163\001\001\000\030" +
    "\011\101\012\u01bf\022\u0157\035\u0159\036\u015e\042\u0158\051" +
    "\u015b\052\102\056\071\057\u015f\061\u0163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\101\012\u01c8\022\u0157\035" +
    "\u0159\036\u015e\042\u0158\051\u015b\052\102\056\071\057\u015f" +
    "\061\u0163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\u01cc\033\054\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\101\012" +
    "\u01cf\022\u0157\035\u0159\036\u015e\042\u0158\051\u015b\052\102" +
    "\056\071\057\u015f\061\u0163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\u01e0\005\031" +
    "\006\030\007\026\015\016\042\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\u01e5\005\031\006\030\007\026\015\016\042" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public static int cont = 1;

    public void syntax_error(Symbol s){
        System.out.println("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INICIO 
            {
              Nodo RESULT =null;
		
                            Nodo node = new Nodo("Inicio",parser.cont);                            
                            parser.cont++;
                            parser.padre = node;
                            RESULT = node;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		System.out.println("Listo Module");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTUREDECLA ::= NIVELACCESO STRUCTURE identificador saltoLinea STRUCINS END STRUCTURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NIVELACCESO ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIVELACCESO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NIVELACCESO ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIVELACCESO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NIVELACCESO ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIVELACCESO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NIVELACCESO ::= FRIENDS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIVELACCESO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRUCINS ::= NIVELACCESO T saltoLinea STRUCINS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCINS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRUCINS ::= DECLARACION STRUCINS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCINS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOWHILESUB ::= DO saltoLinea SUBINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DOWHILEFUNC ::= DO saltoLinea FUNCINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VAL ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VAL ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMCALL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARCALL ::= VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARCALL ::= VARCALL error 
            {
              Object RESULT =null;
		 System.out.println("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGN ::= ASIGNSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALASIGN ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALUNIRSTR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNINT ::= identificador error VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNINT ::= error OPASING VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPP ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPP ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPP ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= DIM error 
            {
              Object RESULT =null;
		 System.out.println("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // T ::= identificador AS identificador IGUAL NEW CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VARS ::= CANTVARS error 
            {
              Object RESULT =null;
		 System.out.println("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPOIGUAL ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VALWR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VALWR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VALWR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SUBINSTRUC ::= CONTINUE FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
