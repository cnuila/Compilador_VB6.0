
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\006\010\000\002\005\013\000\002\005" +
    "\013\000\002\005\013\000\002\005\013\000\002\005\013" +
    "\000\002\010\004\000\002\010\004\000\002\010\005\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\005\000\002\010\002\000\002\057\012" +
    "\000\002\057\012\000\002\057\012\000\002\057\012\000" +
    "\002\057\012\000\002\011\010\000\002\011\005\000\002" +
    "\011\002\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\005\000\002\034\010\000\002\034\010" +
    "\000\002\033\011\000\002\013\015\000\002\013\015\000" +
    "\002\013\015\000\002\013\015\000\002\013\015\000\002" +
    "\013\015\000\002\013\015\000\002\014\004\000\002\014" +
    "\004\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\002\000\002" +
    "\014\005\000\002\014\004\000\002\060\012\000\002\060" +
    "\012\000\002\060\012\000\002\060\012\000\002\060\012" +
    "\000\002\015\010\000\002\015\005\000\002\015\002\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\005\000\002\035\011\000\002\036\010\000\002\036" +
    "\010\000\002\016\004\000\002\017\003\000\002\017\003" +
    "\000\002\041\003\000\002\041\007\000\002\020\006\000" +
    "\002\020\006\000\002\022\003\000\002\022\002\000\002" +
    "\021\005\000\002\021\003\000\002\021\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\023\003" +
    "\000\002\024\005\000\002\026\003\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\012\003\000\002" +
    "\012\002\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\054\005\000\002\007\005\000\002\007\005" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\051\005\000\002" +
    "\051\005\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\053\003\000\002\053\004\000\002\053\004\000" +
    "\002\046\003\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\005\000\002\044\003" +
    "\000\002\040\004\000\002\040\004\000\002\037\005\000" +
    "\002\037\007\000\002\037\011\000\002\037\007\000\002" +
    "\037\005\000\002\037\010\000\002\032\007\000\002\032" +
    "\005\000\002\032\004\000\002\031\005\000\002\031\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\055" +
    "\006\000\002\055\006\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\010\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\004\036\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\014\013\016\015\015\016" +
    "\011\037\017\057\020\001\002\000\006\003\u01ad\007\u01ae" +
    "\001\002\000\004\006\u01aa\001\002\000\014\013\016\015" +
    "\015\016\011\037\017\057\020\001\002\000\014\013\016" +
    "\015\015\016\011\037\017\057\020\001\002\000\014\013" +
    "\016\015\015\016\011\037\017\057\020\001\002\000\004" +
    "\007\u01a2\001\002\000\006\003\u011d\007\u011e\001\002\000" +
    "\006\003\037\007\040\001\002\000\014\013\016\015\015" +
    "\016\011\037\017\057\020\001\002\000\014\013\016\015" +
    "\026\016\011\037\017\057\020\001\002\000\014\013\016" +
    "\015\026\016\011\037\017\057\020\001\002\000\004\006" +
    "\ufffc\001\002\000\014\013\016\015\026\016\011\037\017" +
    "\057\020\001\002\000\016\006\ufff5\013\016\015\026\016" +
    "\011\037\017\057\020\001\002\000\014\013\016\015\026" +
    "\016\011\037\017\057\020\001\002\000\014\013\016\015" +
    "\026\016\011\037\017\057\020\001\002\000\004\006\ufff8" +
    "\001\002\000\004\006\ufff6\001\002\000\004\006\ufff9\001" +
    "\002\000\004\006\ufffa\001\002\000\004\006\ufff7\001\002" +
    "\000\004\006\ufffb\001\002\000\004\040\u0114\001\002\000" +
    "\006\003\041\040\042\001\002\000\006\007\044\041\uff9a" +
    "\001\002\000\010\003\uff9a\007\044\041\uff9a\001\002\000" +
    "\006\003\uff9b\041\uff9b\001\002\000\010\003\uff6d\017\uff6d" +
    "\020\uff6d\001\002\000\010\003\u0107\017\u0105\020\u0106\001" +
    "\002\000\006\003\050\041\047\001\002\000\006\003\361" +
    "\020\360\001\002\000\004\020\051\001\002\000\010\021" +
    "\054\024\052\026\053\001\002\000\056\003\uff66\004\uff66" +
    "\005\uff66\006\uff66\007\uff66\011\uff66\013\uff66\014\uff66\015" +
    "\uff66\016\uff66\017\uff66\037\uff66\041\uff66\042\uff66\043\uff66" +
    "\044\uff66\046\uff66\051\uff66\053\uff66\054\uff66\057\uff66\061" +
    "\uff66\001\002\000\056\003\uff65\004\uff65\005\uff65\006\uff65" +
    "\007\uff65\011\uff65\013\uff65\014\uff65\015\uff65\016\uff65\017" +
    "\uff65\037\uff65\041\uff65\042\uff65\043\uff65\044\uff65\046\uff65" +
    "\051\uff65\053\uff65\054\uff65\057\uff65\061\uff65\001\002\000" +
    "\056\003\uff64\004\uff64\005\uff64\006\uff64\007\uff64\011\uff64" +
    "\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64\037\uff64\041" +
    "\uff64\042\uff64\043\uff64\044\uff64\046\uff64\051\uff64\053\uff64" +
    "\054\uff64\057\uff64\061\uff64\001\002\000\004\015\056\001" +
    "\002\000\032\003\101\004\067\006\uffc2\007\104\014\103" +
    "\015\075\016\011\043\057\044\102\051\074\054\065\061" +
    "\071\001\002\000\004\057\356\001\002\000\042\003\101" +
    "\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103\015" +
    "\075\016\011\043\057\044\102\046\uffc2\051\074\053\uffc2" +
    "\054\065\061\071\001\002\000\044\003\uff99\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\011\uff99\014\uff99\015\uff99\016\uff99" +
    "\042\uff99\043\uff99\044\uff99\046\uff99\051\uff99\053\uff99\054" +
    "\uff99\061\uff99\001\002\000\042\003\101\004\067\005\uffc2" +
    "\006\uffc2\007\104\011\uffc2\014\103\015\075\016\011\043" +
    "\057\044\102\046\uffc2\051\074\053\uffc2\054\065\061\071" +
    "\001\002\000\042\003\101\004\067\005\uffc2\006\uffc2\007" +
    "\104\011\uffc2\014\103\015\075\016\011\043\057\044\102" +
    "\046\uffc2\051\074\053\uffc2\054\065\061\071\001\002\000" +
    "\042\003\101\004\067\005\uffc2\006\uffc2\007\104\011\uffc2" +
    "\014\103\015\075\016\011\043\057\044\102\046\uffc2\051" +
    "\074\053\uffc2\054\065\061\071\001\002\000\022\003\131" +
    "\007\134\022\123\023\127\025\132\040\130\056\124\060" +
    "\114\001\002\000\004\006\347\001\002\000\024\003\266" +
    "\007\134\022\123\023\127\025\132\034\231\040\130\056" +
    "\124\060\114\001\002\000\042\003\101\004\067\005\uffc2" +
    "\006\uffc2\007\104\011\uffc2\014\103\015\075\016\011\043" +
    "\057\044\102\046\uffc2\051\074\053\uffc2\054\065\061\071" +
    "\001\002\000\006\003\253\040\254\001\002\000\044\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\011\uff97\014\uff97" +
    "\015\uff97\016\uff97\042\uff97\043\uff97\044\uff97\046\uff97\051" +
    "\uff97\053\uff97\054\uff97\061\uff97\001\002\000\044\003\uff98" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\014\uff98\015" +
    "\uff98\016\uff98\042\uff98\043\uff98\044\uff98\046\uff98\051\uff98" +
    "\053\uff98\054\uff98\061\uff98\001\002\000\006\015\224\050" +
    "\223\001\002\000\042\003\101\004\067\005\uffc2\006\uffc2" +
    "\007\104\011\uffc2\014\103\015\075\016\011\043\057\044" +
    "\102\046\uffc2\051\074\053\uffc2\054\065\061\071\001\002" +
    "\000\042\003\101\004\067\005\uffc2\006\uffc2\007\104\011" +
    "\uffc2\014\103\015\075\016\011\043\057\044\102\046\uffc2" +
    "\051\074\053\uffc2\054\065\061\071\001\002\000\042\003" +
    "\101\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103" +
    "\015\075\016\011\043\057\044\102\046\uffc2\051\074\053" +
    "\uffc2\054\065\061\071\001\002\000\042\003\101\004\067" +
    "\005\uffc2\006\uffc2\007\104\011\uffc2\014\103\015\075\016" +
    "\011\043\057\044\102\046\uffc2\051\074\053\uffc2\054\065" +
    "\061\071\001\002\000\054\003\101\004\067\005\uffc2\006" +
    "\uffc2\007\104\011\uffc2\012\206\014\103\015\075\016\011" +
    "\030\106\031\112\040\143\043\057\044\102\046\uffc2\051" +
    "\074\053\uffc2\054\065\057\020\061\071\001\002\000\006" +
    "\003\175\007\176\001\002\000\010\012\171\030\106\031" +
    "\112\001\002\000\014\003\107\012\110\030\106\031\112" +
    "\040\111\001\002\000\012\003\141\007\142\025\132\040" +
    "\130\001\002\000\004\012\166\001\002\000\012\003\141" +
    "\007\142\025\132\040\130\001\002\000\022\003\uff86\007" +
    "\uff86\022\123\023\127\025\uff86\040\uff86\056\124\060\114" +
    "\001\002\000\024\003\131\007\134\022\123\023\127\025" +
    "\132\040\130\041\uffa8\056\124\060\114\001\002\000\004" +
    "\012\113\001\002\000\012\003\uff85\007\uff85\025\uff85\040" +
    "\uff85\001\002\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\027\uff8f\032\uff8f\033\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\046\uff8f\051\uff8f\053\uff8f\054\uff8f\061" +
    "\uff8f\001\002\000\010\003\uffa6\017\uffa6\041\uffa6\001\002" +
    "\000\004\041\163\001\002\000\076\003\uff7c\004\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\051\uff7c\053\uff7c\054\uff7c\057" +
    "\uff7c\061\uff7c\001\002\000\076\003\uff81\004\uff81\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\027\uff81\030\uff81\031\146" +
    "\032\uff81\033\uff81\037\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\051\uff81\053\uff81\054\uff81\057\uff81" +
    "\061\uff81\001\002\000\076\003\uff7f\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\037\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\046\uff7f\051\uff7f\053\uff7f\054\uff7f\057\uff7f\061" +
    "\uff7f\001\002\000\046\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\041" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\051\uffaf\053\uffaf\054\uffaf" +
    "\061\uffaf\001\002\000\062\003\uff92\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014\uff92\015\uff92" +
    "\016\uff92\017\uff92\027\uff92\032\uff92\033\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\046\uff92\051\uff92\053\uff92\054\uff92" +
    "\061\uff92\001\002\000\064\003\uff93\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\014\uff93\015\uff93" +
    "\016\uff93\017\uff93\027\uff93\032\uff93\033\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\046\uff93\051\uff93\053\uff93\054\uff93" +
    "\055\uff8c\061\uff93\001\002\000\010\003\161\017\160\041" +
    "\uffa9\001\002\000\062\003\uff90\004\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\011\uff90\012\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\027\uff90\032\uff90\033\uff90\041\uff90\042\uff90" +
    "\043\uff90\044\uff90\046\uff90\051\uff90\053\uff90\054\uff90\061" +
    "\uff90\001\002\000\062\003\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\027\uff91\032\uff91\033\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\046\uff91\051\uff91\053\uff91\054\uff91\061" +
    "\uff91\001\002\000\012\003\141\007\142\025\132\040\130" +
    "\001\002\000\072\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\040" +
    "\143\041\uff7a\042\uff7a\043\uff7a\044\uff7a\046\uff7a\051\uff7a" +
    "\053\uff7a\054\uff7a\055\uff8a\061\uff7a\001\002\000\076\003" +
    "\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\027" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\037\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\051\uff7e\053" +
    "\uff7e\054\uff7e\057\uff7e\061\uff7e\001\002\000\004\055\150" +
    "\001\002\000\072\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\014\uff7d\015\uff7d\016\uff7d" +
    "\017\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\040" +
    "\111\041\uff7d\042\uff7d\043\uff7d\044\uff7d\046\uff7d\051\uff7d" +
    "\053\uff7d\054\uff7d\055\uff8b\061\uff7d\001\002\000\066\003" +
    "\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\014\uff83\015\uff83\016\uff83\017\uff83\027\uff83\030" +
    "\137\032\uff83\033\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\051\uff83\053\uff83\054\uff83\061\uff83\001" +
    "\002\000\046\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\011\uffae\014\uffae\015\uffae\016\uffae\017\uffae\041\uffae\043" +
    "\uffae\044\uffae\046\uffae\051\uffae\053\uffae\054\uffae\061\uffae" +
    "\001\002\000\012\003\141\007\142\025\132\040\130\001" +
    "\002\000\076\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\027\uff82\030\uff82\031\146\032\uff82\033\uff82" +
    "\037\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\051\uff82\053\uff82\054\uff82\057\uff82\061\uff82\001\002" +
    "\000\100\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\037" +
    "\uff7a\040\143\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\051\uff7a\053\uff7a\054\uff7a\057\uff7a\061\uff7a\001" +
    "\002\000\100\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\037\uff7d\040\111\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\051\uff7d\053\uff7d\054\uff7d\057\uff7d\061\uff7d" +
    "\001\002\000\024\003\131\007\134\022\123\023\127\025" +
    "\132\040\130\041\uffa8\056\124\060\114\001\002\000\004" +
    "\041\145\001\002\000\076\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\037\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\051\uffaa\053\uffaa\054\uffaa\057\uffaa\061" +
    "\uffaa\001\002\000\012\003\141\007\142\025\132\040\130" +
    "\001\002\000\076\003\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80" +
    "\016\uff80\017\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\037\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\051\uff80\053\uff80\054\uff80\057\uff80\061\uff80\001" +
    "\002\000\010\003\152\007\153\056\151\001\002\000\072" +
    "\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\027\uff8c\032\uff8c\033\uff8c\037\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\046\uff8c\051\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\057\uff8c\061\uff8c\001\002\000\072\003\uff8a\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\017\uff8a\027\uff8a\032\uff8a\033" +
    "\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\046\uff8a" +
    "\051\uff8a\053\uff8a\054\uff8a\055\uff8a\057\uff8a\061\uff8a\001" +
    "\002\000\072\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\027\uff8b\032\uff8b\033\uff8b\037\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\046\uff8b\051\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\057\uff8b\061\uff8b\001\002\000\072\003\uff8d" +
    "\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\027\uff8d" +
    "\032\uff8d\033\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\046\uff8d\051\uff8d\053\uff8d\054\uff8d\055\150\057\uff8d" +
    "\061\uff8d\001\002\000\070\003\uff8e\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\027\uff8e\032\uff8e\033\uff8e\037" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\046\uff8e\051\uff8e" +
    "\053\uff8e\054\uff8e\057\uff8e\061\uff8e\001\002\000\006\030" +
    "\137\041\157\001\002\000\076\003\uff7b\004\uff7b\005\uff7b" +
    "\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\017\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\037\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\051\uff7b\053\uff7b\054\uff7b\057\uff7b" +
    "\061\uff7b\001\002\000\022\003\131\007\134\022\123\023" +
    "\127\025\132\040\130\056\124\060\114\001\002\000\010" +
    "\003\uffa5\017\uffa5\041\uffa5\001\002\000\010\003\uffa7\017" +
    "\uffa7\041\uffa7\001\002\000\076\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\037\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\051\uffab\053\uffab\054\uffab\057\uffab" +
    "\061\uffab\001\002\000\044\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\011\uff96\014\uff96\015\uff96\016\uff96\042\uff96" +
    "\043\uff96\044\uff96\046\uff96\051\uff96\053\uff96\054\uff96\061" +
    "\uff96\001\002\000\046\003\uff88\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\011\uff88\014\uff88\015\uff88\016\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\051\uff88\053\uff88\054\uff88" +
    "\061\uff88\001\002\000\012\003\uff84\007\uff84\025\uff84\040" +
    "\uff84\001\002\000\046\003\uff89\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\011\uff89\014\uff89\015\uff89\016\uff89\042\uff89\043" +
    "\uff89\044\uff89\045\uff89\046\uff89\051\uff89\053\uff89\054\uff89" +
    "\061\uff89\001\002\000\012\003\141\007\142\025\132\040" +
    "\130\001\002\000\022\003\uff86\007\uff86\022\123\023\127" +
    "\025\uff86\040\uff86\056\124\060\114\001\002\000\044\003" +
    "\uff95\004\uff95\005\uff95\006\uff95\007\uff95\011\uff95\014\uff95" +
    "\015\uff95\016\uff95\042\uff95\043\uff95\044\uff95\046\uff95\051" +
    "\uff95\053\uff95\054\uff95\061\uff95\001\002\000\044\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\011\uff94\014\uff94\015" +
    "\uff94\016\uff94\042\uff94\043\uff94\044\uff94\046\uff94\051\uff94" +
    "\053\uff94\054\uff94\061\uff94\001\002\000\004\045\uffad\001" +
    "\002\000\010\012\206\030\106\031\112\001\002\000\014" +
    "\003\107\012\206\020\205\030\106\031\112\001\002\000" +
    "\004\045\200\001\002\000\012\003\141\007\142\025\132" +
    "\040\130\001\002\000\006\015\202\030\137\001\002\000" +
    "\032\003\101\004\067\007\104\014\103\015\075\016\011" +
    "\043\057\044\102\046\uffc2\051\074\054\065\061\071\001" +
    "\002\000\004\046\204\001\002\000\042\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\011\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\043\uffb3\044\uffb3\046\uffb3\051\uffb3\053\uffb3\054\uffb3" +
    "\061\uffb3\001\002\000\004\024\207\001\002\000\012\003" +
    "\uff86\007\uff86\025\uff86\040\uff86\001\002\000\004\012\210" +
    "\001\002\000\012\003\141\007\142\025\132\040\130\001" +
    "\002\000\006\030\137\045\uffac\001\002\000\012\003\141" +
    "\007\142\025\132\040\130\001\002\000\046\003\uff87\004" +
    "\uff87\005\uff87\006\uff87\007\uff87\011\uff87\014\uff87\015\uff87" +
    "\016\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\051" +
    "\uff87\053\uff87\054\uff87\061\uff87\001\002\000\014\005\uffc0" +
    "\006\uffc0\011\uffc0\046\uffc0\053\uffc0\001\002\000\042\003" +
    "\101\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103" +
    "\015\075\016\011\043\057\044\102\046\uffc2\051\074\053" +
    "\uffc2\054\065\061\071\001\002\000\014\005\uffc1\006\uffc1" +
    "\011\uffc1\046\uffc1\053\uffc1\001\002\000\014\005\uffc4\006" +
    "\uffc4\011\uffc4\046\uffc4\053\uffc4\001\002\000\014\005\uffc6" +
    "\006\uffc6\011\uffc6\046\uffc6\053\uffc6\001\002\000\014\005" +
    "\uffc5\006\uffc5\011\uffc5\046\uffc5\053\uffc5\001\002\000\014" +
    "\005\uffcb\006\uffcb\011\uffcb\046\uffcb\053\uffcb\001\002\000" +
    "\024\003\131\007\134\022\123\023\127\025\132\034\231" +
    "\040\130\056\124\060\114\001\002\000\032\003\101\004" +
    "\067\007\104\014\103\015\075\016\011\043\057\044\102" +
    "\051\074\053\uffc2\054\065\061\071\001\002\000\004\053" +
    "\226\001\002\000\004\050\227\001\002\000\024\003\131" +
    "\007\134\022\123\023\127\025\132\034\231\040\130\056" +
    "\124\060\114\001\002\000\052\003\uffa1\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\032\uffa1\033\uffa1\042\uffa1\043\uffa1\044\uffa1\046\uffa1" +
    "\051\uffa1\053\uffa1\054\uffa1\061\uffa1\001\002\000\022\003" +
    "\131\007\134\022\123\023\127\025\132\040\130\056\124" +
    "\060\114\001\002\000\056\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\027\uff9d\032\uff9d\033\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\046\uff9d\051\uff9d\053\uff9d\054\uff9d\061\uff9d\001\002" +
    "\000\006\012\244\027\242\001\002\000\046\003\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\032\236\033\237\043\uffb1\044\uffb1\046\uffb1\051" +
    "\uffb1\053\uffb1\054\uffb1\061\uffb1\001\002\000\056\003\uff9c" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\027\uff9c\032\uff9c\033\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\046\uff9c\051\uff9c\053\uff9c\054" +
    "\uff9c\061\uff9c\001\002\000\022\003\131\007\134\022\123" +
    "\023\127\025\132\040\130\056\124\060\114\001\002\000" +
    "\022\003\131\007\134\022\123\023\127\025\132\040\130" +
    "\056\124\060\114\001\002\000\052\003\uffa3\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\032\uffa3\033\uffa3\042\uffa3\043\uffa3\044\uffa3\046" +
    "\uffa3\051\uffa3\053\uffa3\054\uffa3\061\uffa3\001\002\000\052" +
    "\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\032\uffa4\033\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\046\uffa4\051\uffa4\053\uffa4\054\uffa4\061" +
    "\uffa4\001\002\000\022\003\uff9f\007\uff9f\022\uff9f\023\uff9f" +
    "\025\uff9f\040\uff9f\056\uff9f\060\uff9f\001\002\000\022\003" +
    "\131\007\134\022\123\023\127\025\132\040\130\056\124" +
    "\060\114\001\002\000\022\003\uff9e\007\uff9e\022\uff9e\023" +
    "\uff9e\025\uff9e\040\uff9e\056\uff9e\060\uff9e\001\002\000\052" +
    "\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\032\uffa0\033\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\046\uffa0\051\uffa0\053\uffa0\054\uffa0\061" +
    "\uffa0\001\002\000\052\003\uffa2\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\014\uffa2\015\uffa2\016\uffa2\032" +
    "\uffa2\033\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2\051\uffa2" +
    "\053\uffa2\054\uffa2\061\uffa2\001\002\000\010\015\250\032" +
    "\236\033\237\001\002\000\032\003\101\004\067\007\104" +
    "\014\103\015\075\016\011\043\057\044\102\051\074\053" +
    "\uffc2\054\065\061\071\001\002\000\004\053\252\001\002" +
    "\000\042\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\043\uffb2\044\uffb2\046\uffb2" +
    "\051\uffb2\053\uffb2\054\uffb2\061\uffb2\001\002\000\010\003" +
    "\256\007\257\056\255\001\002\000\010\003\256\007\257" +
    "\056\255\001\002\000\006\041\uff60\055\uff8c\001\002\000" +
    "\006\041\uff5e\055\uff8a\001\002\000\006\041\uff61\055\uff8b" +
    "\001\002\000\004\041\uff5f\001\002\000\004\041\262\001" +
    "\002\000\044\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63" +
    "\011\uff63\014\uff63\015\uff63\016\uff63\042\uff63\043\uff63\044" +
    "\uff63\046\uff63\051\uff63\053\uff63\054\uff63\061\uff63\001\002" +
    "\000\004\041\264\001\002\000\044\003\uff62\004\uff62\005" +
    "\uff62\006\uff62\007\uff62\011\uff62\014\uff62\015\uff62\016\uff62" +
    "\042\uff62\043\uff62\044\uff62\046\uff62\051\uff62\053\uff62\054" +
    "\uff62\061\uff62\001\002\000\014\005\uffc9\006\uffc9\011\uffc9" +
    "\046\uffc9\053\uffc9\001\002\000\020\010\341\012\uff7a\027" +
    "\uff7a\030\uff7a\031\uff7a\040\143\055\uff8a\001\002\000\012" +
    "\003\271\010\270\032\236\033\237\001\002\000\006\003" +
    "\326\015\327\001\002\000\004\015\272\001\002\000\036" +
    "\003\101\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014" +
    "\103\015\075\016\011\043\057\044\102\051\074\054\065" +
    "\061\071\001\002\000\010\005\275\006\uffb8\011\276\001" +
    "\002\000\004\006\324\001\002\000\006\003\320\015\321" +
    "\001\002\000\024\003\277\007\134\022\123\023\127\025" +
    "\132\034\231\040\130\056\124\060\114\001\002\000\020" +
    "\010\314\012\uff7a\027\uff7a\030\uff7a\031\uff7a\040\143\055" +
    "\uff8a\001\002\000\012\003\301\010\302\032\236\033\237" +
    "\001\002\000\004\015\311\001\002\000\006\003\303\015" +
    "\304\001\002\000\036\003\101\004\067\005\uffc2\006\uffc2" +
    "\007\104\011\uffc2\014\103\015\075\016\011\043\057\044" +
    "\102\051\074\054\065\061\071\001\002\000\036\003\101" +
    "\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103\015" +
    "\075\016\011\043\057\044\102\051\074\054\065\061\071" +
    "\001\002\000\010\005\275\006\uffb8\011\276\001\002\000" +
    "\004\006\uffba\001\002\000\010\005\275\006\uffb8\011\276" +
    "\001\002\000\004\006\uffb5\001\002\000\036\003\101\004" +
    "\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103\015\075" +
    "\016\011\043\057\044\102\051\074\054\065\061\071\001" +
    "\002\000\010\005\275\006\uffb8\011\276\001\002\000\004" +
    "\006\uffb6\001\002\000\004\015\315\001\002\000\036\003" +
    "\101\004\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103" +
    "\015\075\016\011\043\057\044\102\051\074\054\065\061" +
    "\071\001\002\000\010\005\275\006\uffb8\011\276\001\002" +
    "\000\004\006\uffb7\001\002\000\010\005\275\006\uffb8\011" +
    "\276\001\002\000\010\005\275\006\uffb8\011\276\001\002" +
    "\000\004\006\uffb9\001\002\000\004\006\uffb4\001\002\000" +
    "\004\004\325\001\002\000\042\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\043" +
    "\uffbd\044\uffbd\046\uffbd\051\uffbd\053\uffbd\054\uffbd\061\uffbd" +
    "\001\002\000\036\003\101\004\067\005\uffc2\006\uffc2\007" +
    "\104\011\uffc2\014\103\015\075\016\011\043\057\044\102" +
    "\051\074\054\065\061\071\001\002\000\036\003\101\004" +
    "\067\005\uffc2\006\uffc2\007\104\011\uffc2\014\103\015\075" +
    "\016\011\043\057\044\102\051\074\054\065\061\071\001" +
    "\002\000\010\005\275\006\uffb8\011\276\001\002\000\004" +
    "\006\332\001\002\000\006\003\333\004\334\001\002\000" +
    "\042\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\043\uffbb\044\uffbb\046\uffbb\051" +
    "\uffbb\053\uffbb\054\uffbb\061\uffbb\001\002\000\042\003\uffbf" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\043\uffbf\044\uffbf\046\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\061\uffbf\001\002\000\010\005\275\006\uffb8\011" +
    "\276\001\002\000\004\006\337\001\002\000\004\004\340" +
    "\001\002\000\042\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\043\uffbc\044\uffbc" +
    "\046\uffbc\051\uffbc\053\uffbc\054\uffbc\061\uffbc\001\002\000" +
    "\004\015\342\001\002\000\036\003\101\004\067\005\uffc2" +
    "\006\uffc2\007\104\011\uffc2\014\103\015\075\016\011\043" +
    "\057\044\102\051\074\054\065\061\071\001\002\000\010" +
    "\005\275\006\uffb8\011\276\001\002\000\004\006\345\001" +
    "\002\000\004\004\346\001\002\000\042\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\011\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\043\uffbe\044\uffbe\046\uffbe\051\uffbe\053\uffbe\054\uffbe" +
    "\061\uffbe\001\002\000\004\057\350\001\002\000\050\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\037\uffd0\043\uffd0\044\uffd0\046" +
    "\uffd0\051\uffd0\053\uffd0\054\uffd0\057\uffd0\061\uffd0\001\002" +
    "\000\042\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\051\uffb0\053\uffb0\054\uffb0\061\uffb0\001\002\000\014\005" +
    "\uffcc\006\uffcc\011\uffcc\046\uffcc\053\uffcc\001\002\000\014" +
    "\005\uffc7\006\uffc7\011\uffc7\046\uffc7\053\uffc7\001\002\000" +
    "\014\005\uffc3\006\uffc3\011\uffc3\046\uffc3\053\uffc3\001\002" +
    "\000\014\005\uffc8\006\uffc8\011\uffc8\046\uffc8\053\uffc8\001" +
    "\002\000\042\003\101\004\067\005\uffc2\006\uffc2\007\104" +
    "\011\uffc2\014\103\015\075\016\011\043\057\044\102\046" +
    "\uffc2\051\074\053\uffc2\054\065\061\071\001\002\000\014" +
    "\005\uffca\006\uffca\011\uffca\046\uffca\053\uffca\001\002\000" +
    "\012\003\367\021\054\024\052\026\053\001\002\000\010" +
    "\021\054\024\052\026\053\001\002\000\004\015\363\001" +
    "\002\000\032\003\101\004\067\006\uffc2\007\104\014\103" +
    "\015\075\016\011\043\057\044\102\051\074\054\065\061" +
    "\071\001\002\000\004\006\365\001\002\000\004\057\366" +
    "\001\002\000\050\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\037\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\051\uffcf\053\uffcf\054\uffcf\057" +
    "\uffcf\061\uffcf\001\002\000\004\015\u0101\001\002\000\006" +
    "\003\371\015\372\001\002\000\032\003\101\004\067\006" +
    "\uffc2\007\104\014\103\015\075\016\011\043\057\044\102" +
    "\051\074\054\065\061\071\001\002\000\032\003\101\004" +
    "\067\006\uffc2\007\104\014\103\015\075\016\011\043\057" +
    "\044\102\051\074\054\065\061\071\001\002\000\004\006" +
    "\374\001\002\000\004\057\375\001\002\000\050\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\037\uffd3\043\uffd3\044\uffd3\046\uffd3" +
    "\051\uffd3\053\uffd3\054\uffd3\057\uffd3\061\uffd3\001\002\000" +
    "\004\006\377\001\002\000\004\057\u0100\001\002\000\050" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\037\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\051\uffcd\053\uffcd\054\uffcd\057\uffcd\061\uffcd\001" +
    "\002\000\032\003\101\004\067\006\uffc2\007\104\014\103" +
    "\015\075\016\011\043\057\044\102\051\074\054\065\061" +
    "\071\001\002\000\004\006\u0103\001\002\000\004\057\u0104" +
    "\001\002\000\050\003\uffce\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce\037\uffce" +
    "\043\uffce\044\uffce\046\uffce\051\uffce\053\uffce\054\uffce\057" +
    "\uffce\061\uffce\001\002\000\004\007\u010b\001\002\000\010" +
    "\021\054\024\052\026\053\001\002\000\054\003\uff6f\004" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\011\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\037\uff6f\041\uff6f\042\uff6f\043\uff6f\044" +
    "\uff6f\046\uff6f\051\uff6f\053\uff6f\054\uff6f\057\uff6f\061\uff6f" +
    "\001\002\000\056\003\uff70\004\uff70\005\uff70\006\uff70\007" +
    "\uff70\011\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\u0109" +
    "\037\uff70\041\uff70\042\uff70\043\uff70\044\uff70\046\uff70\051" +
    "\uff70\053\uff70\054\uff70\057\uff70\061\uff70\001\002\000\004" +
    "\007\044\001\002\000\054\003\uff71\004\uff71\005\uff71\006" +
    "\uff71\007\uff71\011\uff71\013\uff71\014\uff71\015\uff71\016\uff71" +
    "\037\uff71\041\uff71\042\uff71\043\uff71\044\uff71\046\uff71\051" +
    "\uff71\053\uff71\054\uff71\057\uff71\061\uff71\001\002\000\010" +
    "\003\uff6e\017\uff6e\020\uff6e\001\002\000\004\041\u010d\001" +
    "\002\000\004\020\u010e\001\002\000\010\021\054\024\052" +
    "\026\053\001\002\000\004\015\u0110\001\002\000\032\003" +
    "\101\004\067\006\uffc2\007\104\014\103\015\075\016\011" +
    "\043\057\044\102\051\074\054\065\061\071\001\002\000" +
    "\004\006\u0112\001\002\000\004\057\u0113\001\002\000\050" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\037\uffd1\043\uffd1\044\uffd1" +
    "\046\uffd1\051\uffd1\053\uffd1\054\uffd1\057\uffd1\061\uffd1\001" +
    "\002\000\006\007\044\041\uff9a\001\002\000\004\041\u0116" +
    "\001\002\000\004\020\u0117\001\002\000\010\021\054\024" +
    "\052\026\053\001\002\000\004\015\u0119\001\002\000\032" +
    "\003\101\004\067\006\uffc2\007\104\014\103\015\075\016" +
    "\011\043\057\044\102\051\074\054\065\061\071\001\002" +
    "\000\004\006\u011b\001\002\000\004\057\u011c\001\002\000" +
    "\050\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\037\uffd2\043\uffd2\044" +
    "\uffd2\046\uffd2\051\uffd2\053\uffd2\054\uffd2\057\uffd2\061\uffd2" +
    "\001\002\000\004\040\u019b\001\002\000\006\003\u011f\040" +
    "\u0120\001\002\000\006\007\044\041\uff9a\001\002\000\010" +
    "\003\uff9a\007\044\041\uff9a\001\002\000\006\003\u0123\041" +
    "\u0122\001\002\000\006\003\u018d\015\u018e\001\002\000\004" +
    "\015\u0124\001\002\000\032\003\u0131\004\u012b\006\uffe3\007" +
    "\104\014\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132" +
    "\051\u012c\061\071\001\002\000\004\037\u018b\001\002\000" +
    "\004\044\u0182\001\002\000\042\003\u0131\004\u012b\005\uffe3" +
    "\006\uffe3\007\104\011\uffe3\014\103\015\u012d\016\011\042" +
    "\u0126\043\u0125\044\u0132\046\uffe3\051\u012c\053\uffe3\061\071" +
    "\001\002\000\042\003\u0131\004\u012b\005\uffe3\006\uffe3\007" +
    "\104\011\uffe3\014\103\015\u012d\016\011\042\u0126\043\u0125" +
    "\044\u0132\046\uffe3\051\u012c\053\uffe3\061\071\001\002\000" +
    "\042\003\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3" +
    "\014\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132\046" +
    "\uffe3\051\u012c\053\uffe3\061\071\001\002\000\042\003\u0131" +
    "\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015" +
    "\u012d\016\011\042\u0126\043\u0125\044\u0132\046\uffe3\051\u012c" +
    "\053\uffe3\061\071\001\002\000\024\003\u014d\007\134\022" +
    "\123\023\127\025\132\034\231\040\130\056\124\060\114" +
    "\001\002\000\006\015\u0144\050\u0143\001\002\000\042\003" +
    "\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103" +
    "\015\u012d\016\011\042\u0126\043\u0125\044\u0132\046\uffe3\051" +
    "\u012c\053\uffe3\061\071\001\002\000\042\003\u0131\004\u012b" +
    "\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015\u012d\016" +
    "\011\042\u0126\043\u0125\044\u0132\046\uffe3\051\u012c\053\uffe3" +
    "\061\071\001\002\000\042\003\u0131\004\u012b\005\uffe3\006" +
    "\uffe3\007\104\011\uffe3\014\103\015\u012d\016\011\042\u0126" +
    "\043\u0125\044\u0132\046\uffe3\051\u012c\053\uffe3\061\071\001" +
    "\002\000\004\006\u013e\001\002\000\054\003\u0131\004\u012b" +
    "\005\uffe3\006\uffe3\007\104\011\uffe3\012\206\014\103\015" +
    "\u012d\016\011\030\106\031\112\037\u013b\040\143\042\u0126" +
    "\043\u0125\044\u0132\046\uffe3\051\u012c\053\uffe3\061\071\001" +
    "\002\000\006\003\175\007\176\001\002\000\042\003\u0131" +
    "\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015" +
    "\u012d\016\011\042\u0126\043\u0125\044\u0132\046\uffe3\051\u012c" +
    "\053\uffe3\061\071\001\002\000\014\005\uffe8\006\uffe8\011" +
    "\uffe8\046\uffe8\053\uffe8\001\002\000\004\045\u0136\001\002" +
    "\000\012\003\141\007\142\025\132\040\130\001\002\000" +
    "\006\015\u0138\030\137\001\002\000\032\003\u0131\004\u012b" +
    "\007\104\014\103\015\u012d\016\011\042\u0126\043\u0125\044" +
    "\u0132\046\uffe3\051\u012c\061\071\001\002\000\004\046\u013a" +
    "\001\002\000\042\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\014\uffd4\015\uffd4\016\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\046\uffd4\051\uffd4\053\uffd4\061\uffd4\001\002\000" +
    "\042\003\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3" +
    "\014\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132\046" +
    "\uffe3\051\u012c\053\uffe3\061\071\001\002\000\014\005\uffe5" +
    "\006\uffe5\011\uffe5\046\uffe5\053\uffe5\001\002\000\014\005" +
    "\uffe4\006\uffe4\011\uffe4\046\uffe4\053\uffe4\001\002\000\004" +
    "\037\u013f\001\002\000\014\013\ufff0\015\ufff0\016\ufff0\037" +
    "\ufff0\057\ufff0\001\002\000\014\005\uffe9\006\uffe9\011\uffe9" +
    "\046\uffe9\053\uffe9\001\002\000\014\005\uffe6\006\uffe6\011" +
    "\uffe6\046\uffe6\053\uffe6\001\002\000\014\005\uffed\006\uffed" +
    "\011\uffed\046\uffed\053\uffed\001\002\000\024\003\131\007" +
    "\134\022\123\023\127\025\132\034\231\040\130\056\124" +
    "\060\114\001\002\000\032\003\u0131\004\u012b\007\104\014" +
    "\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c" +
    "\053\uffe3\061\071\001\002\000\004\053\u0146\001\002\000" +
    "\004\050\u0147\001\002\000\024\003\131\007\134\022\123" +
    "\023\127\025\132\034\231\040\130\056\124\060\114\001" +
    "\002\000\046\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\016\uffd5\032\236\033\237\042" +
    "\uffd5\043\uffd5\044\uffd5\046\uffd5\051\uffd5\053\uffd5\061\uffd5" +
    "\001\002\000\010\015\u014a\032\236\033\237\001\002\000" +
    "\032\003\u0131\004\u012b\007\104\014\103\015\u012d\016\011" +
    "\042\u0126\043\u0125\044\u0132\051\u012c\053\uffe3\061\071\001" +
    "\002\000\004\053\u014c\001\002\000\042\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6\051\uffd6\053\uffd6" +
    "\061\uffd6\001\002\000\020\010\u0178\012\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\040\143\055\uff8a\001\002\000\012\003\u014f" +
    "\010\u0150\032\236\033\237\001\002\000\004\015\u0173\001" +
    "\002\000\006\003\u0151\015\u0152\001\002\000\036\003\u0131" +
    "\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015" +
    "\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071" +
    "\001\002\000\036\003\u0131\004\u012b\005\uffe3\006\uffe3\007" +
    "\104\011\uffe3\014\103\015\u012d\016\011\042\u0126\043\u0125" +
    "\044\u0132\051\u012c\061\071\001\002\000\010\005\u0154\006" +
    "\uffdb\011\u0155\001\002\000\006\003\u016b\015\u016c\001\002" +
    "\000\024\003\u015a\007\134\022\123\023\127\025\132\034" +
    "\231\040\130\056\124\060\114\001\002\000\004\006\u0157" +
    "\001\002\000\006\003\u0158\004\u0159\001\002\000\042\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\014\uffde" +
    "\015\uffde\016\uffde\042\uffde\043\uffde\044\uffde\046\uffde\051" +
    "\uffde\053\uffde\061\uffde\001\002\000\042\003\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\011\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\051\uffe2\053\uffe2" +
    "\061\uffe2\001\002\000\020\010\u0167\012\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\040\143\055\uff8a\001\002\000\012\003\u015d" +
    "\010\u015c\032\236\033\237\001\002\000\006\003\u0161\015" +
    "\u0162\001\002\000\004\015\u015e\001\002\000\036\003\u0131" +
    "\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015" +
    "\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071" +
    "\001\002\000\010\005\u0154\006\uffdb\011\u0155\001\002\000" +
    "\004\006\uffd9\001\002\000\036\003\u0131\004\u012b\005\uffe3" +
    "\006\uffe3\007\104\011\uffe3\014\103\015\u012d\016\011\042" +
    "\u0126\043\u0125\044\u0132\051\u012c\061\071\001\002\000\036" +
    "\003\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014" +
    "\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c" +
    "\061\071\001\002\000\010\005\u0154\006\uffdb\011\u0155\001" +
    "\002\000\004\006\uffdd\001\002\000\010\005\u0154\006\uffdb" +
    "\011\u0155\001\002\000\004\006\uffd8\001\002\000\004\015" +
    "\u0168\001\002\000\036\003\u0131\004\u012b\005\uffe3\006\uffe3" +
    "\007\104\011\uffe3\014\103\015\u012d\016\011\042\u0126\043" +
    "\u0125\044\u0132\051\u012c\061\071\001\002\000\010\005\u0154" +
    "\006\uffdb\011\u0155\001\002\000\004\006\uffda\001\002\000" +
    "\032\003\u0131\004\u012b\006\uffe3\007\104\014\103\015\u012d" +
    "\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071\001" +
    "\002\000\032\003\u0131\004\u012b\006\uffe3\007\104\014\103" +
    "\015\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061" +
    "\071\001\002\000\004\006\uffdc\001\002\000\004\006\uffd7" +
    "\001\002\000\010\005\u0154\006\uffdb\011\u0155\001\002\000" +
    "\004\006\u0171\001\002\000\004\004\u0172\001\002\000\042" +
    "\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf" +
    "\051\uffdf\053\uffdf\061\uffdf\001\002\000\036\003\u0131\004" +
    "\u012b\005\uffe3\006\uffe3\007\104\011\uffe3\014\103\015\u012d" +
    "\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071\001" +
    "\002\000\010\005\u0154\006\uffdb\011\u0155\001\002\000\004" +
    "\006\u0176\001\002\000\004\004\u0177\001\002\000\042\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\051" +
    "\uffe0\053\uffe0\061\uffe0\001\002\000\004\015\u0179\001\002" +
    "\000\036\003\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011" +
    "\uffe3\014\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132" +
    "\051\u012c\061\071\001\002\000\010\005\u0154\006\uffdb\011" +
    "\u0155\001\002\000\004\006\u017c\001\002\000\004\004\u017d" +
    "\001\002\000\042\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\046\uffe1\051\uffe1\053\uffe1\061\uffe1\001\002\000" +
    "\014\005\uffeb\006\uffeb\011\uffeb\046\uffeb\053\uffeb\001\002" +
    "\000\014\005\uffe7\006\uffe7\011\uffe7\046\uffe7\053\uffe7\001" +
    "\002\000\014\005\uffee\006\uffee\011\uffee\046\uffee\053\uffee" +
    "\001\002\000\014\005\uffea\006\uffea\011\uffea\046\uffea\053" +
    "\uffea\001\002\000\004\045\u0183\001\002\000\004\046\u0184" +
    "\001\002\000\004\047\u0185\001\002\000\004\013\u0186\001" +
    "\002\000\004\050\u0187\001\002\000\004\051\u0188\001\002" +
    "\000\004\052\u0189\001\002\000\004\053\u018a\001\002\000" +
    "\014\005\uff5d\006\uff5d\011\uff5d\046\uff5d\053\uff5d\001\002" +
    "\000\042\003\u0131\004\u012b\005\uffe3\006\uffe3\007\104\011" +
    "\uffe3\014\103\015\u012d\016\011\042\u0126\043\u0125\044\u0132" +
    "\046\uffe3\051\u012c\053\uffe3\061\071\001\002\000\014\005" +
    "\uffec\006\uffec\011\uffec\046\uffec\053\uffec\001\002\000\032" +
    "\003\u0131\004\u012b\006\uffe3\007\104\014\103\015\u012d\016" +
    "\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071\001\002" +
    "\000\032\003\u0131\004\u012b\006\uffe3\007\104\014\103\015" +
    "\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061\071" +
    "\001\002\000\004\006\u0190\001\002\000\004\037\u0191\001" +
    "\002\000\014\013\ufff3\015\ufff3\016\ufff3\037\ufff3\057\ufff3" +
    "\001\002\000\004\006\u0193\001\002\000\004\037\u0194\001" +
    "\002\000\014\013\uffef\015\uffef\016\uffef\037\uffef\057\uffef" +
    "\001\002\000\004\041\u0196\001\002\000\004\015\u0197\001" +
    "\002\000\032\003\u0131\004\u012b\006\uffe3\007\104\014\103" +
    "\015\u012d\016\011\042\u0126\043\u0125\044\u0132\051\u012c\061" +
    "\071\001\002\000\004\006\u0199\001\002\000\004\037\u019a" +
    "\001\002\000\014\013\ufff1\015\ufff1\016\ufff1\037\ufff1\057" +
    "\ufff1\001\002\000\006\007\044\041\uff9a\001\002\000\004" +
    "\041\u019d\001\002\000\004\015\u019e\001\002\000\032\003" +
    "\u0131\004\u012b\006\uffe3\007\104\014\103\015\u012d\016\011" +
    "\042\u0126\043\u0125\044\u0132\051\u012c\061\071\001\002\000" +
    "\004\006\u01a0\001\002\000\004\037\u01a1\001\002\000\014" +
    "\013\ufff2\015\ufff2\016\ufff2\037\ufff2\057\ufff2\001\002\000" +
    "\004\015\u01a3\001\002\000\004\016\011\001\002\000\004" +
    "\006\u01a5\001\002\000\004\013\u01a6\001\002\000\014\013" +
    "\ufff4\015\ufff4\016\ufff4\037\ufff4\057\ufff4\001\002\000\004" +
    "\006\ufffe\001\002\000\004\006\uffff\001\002\000\004\006" +
    "\ufffd\001\002\000\004\036\u01ab\001\002\000\004\002\000" +
    "\001\002\000\052\003\uff79\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\011\uff79\013\uff79\014\uff79\015\uff79\016\uff79\037\uff79" +
    "\042\uff79\043\uff79\044\uff79\046\uff79\051\uff79\053\uff79\054" +
    "\uff79\057\uff79\061\uff79\001\002\000\052\003\uff78\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\011\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\037\uff78\042\uff78\043\uff78\044\uff78\046\uff78" +
    "\051\uff78\053\uff78\054\uff78\057\uff78\061\uff78\001\002\000" +
    "\006\017\u01af\020\u01b0\001\002\000\004\007\044\001\002" +
    "\000\012\007\u01b3\021\u01b5\024\u01b1\026\u01b4\001\002\000" +
    "\056\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\011\uff66" +
    "\012\u01c4\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\037" +
    "\uff66\042\uff66\043\uff66\044\uff66\046\uff66\051\uff66\053\uff66" +
    "\054\uff66\057\uff66\061\uff66\001\002\000\052\003\uff77\004" +
    "\uff77\005\uff77\006\uff77\007\uff77\011\uff77\013\uff77\014\uff77" +
    "\015\uff77\016\uff77\037\uff77\042\uff77\043\uff77\044\uff77\046" +
    "\uff77\051\uff77\053\uff77\054\uff77\057\uff77\061\uff77\001\002" +
    "\000\054\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\011" +
    "\uff67\012\u01bf\013\uff67\014\uff67\015\uff67\016\uff67\037\uff67" +
    "\042\uff67\043\uff67\044\uff67\046\uff67\051\uff67\053\uff67\054" +
    "\uff67\057\uff67\061\uff67\001\002\000\056\003\uff65\004\uff65" +
    "\005\uff65\006\uff65\007\uff65\011\uff65\012\u01bc\013\uff65\014" +
    "\uff65\015\uff65\016\uff65\017\uff65\037\uff65\042\uff65\043\uff65" +
    "\044\uff65\046\uff65\051\uff65\053\uff65\054\uff65\057\uff65\061" +
    "\uff65\001\002\000\056\003\uff64\004\uff64\005\uff64\006\uff64" +
    "\007\uff64\011\uff64\012\u01b9\013\uff64\014\uff64\015\uff64\016" +
    "\uff64\017\uff64\037\uff64\042\uff64\043\uff64\044\uff64\046\uff64" +
    "\051\uff64\053\uff64\054\uff64\057\uff64\061\uff64\001\002\000" +
    "\054\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73\011\uff73" +
    "\013\uff73\014\uff73\015\uff73\016\uff73\017\u01b7\037\uff73\042" +
    "\uff73\043\uff73\044\uff73\046\uff73\051\uff73\053\uff73\054\uff73" +
    "\057\uff73\061\uff73\001\002\000\004\007\044\001\002\000" +
    "\052\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\011\uff76" +
    "\013\uff76\014\uff76\015\uff76\016\uff76\037\uff76\042\uff76\043" +
    "\uff76\044\uff76\046\uff76\051\uff76\053\uff76\054\uff76\057\uff76" +
    "\061\uff76\001\002\000\006\022\u01ba\023\u01bb\001\002\000" +
    "\052\003\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\011\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\016\uff6a\037\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\046\uff6a\051\uff6a\053\uff6a\054\uff6a\057\uff6a" +
    "\061\uff6a\001\002\000\052\003\uff69\004\uff69\005\uff69\006" +
    "\uff69\007\uff69\011\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\037\uff69\042\uff69\043\uff69\044\uff69\046\uff69\051\uff69\053" +
    "\uff69\054\uff69\057\uff69\061\uff69\001\002\000\010\003\152" +
    "\007\153\056\u01bd\001\002\000\054\003\uff6b\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\011\uff6b\013\uff6b\014\uff6b\015\uff6b" +
    "\016\uff6b\037\uff6b\042\uff6b\043\uff6b\044\uff6b\046\uff6b\051" +
    "\uff6b\053\uff6b\054\uff6b\055\uff8c\057\uff6b\061\uff6b\001\002" +
    "\000\052\003\uff68\004\uff68\005\uff68\006\uff68\007\uff68\011" +
    "\uff68\013\uff68\014\uff68\015\uff68\016\uff68\037\uff68\042\uff68" +
    "\043\uff68\044\uff68\046\uff68\051\uff68\053\uff68\054\uff68\057" +
    "\uff68\061\uff68\001\002\000\004\035\u01c0\001\002\000\006" +
    "\003\u01c1\007\u01c2\001\002\000\004\040\143\001\002\000" +
    "\004\040\111\001\002\000\052\003\uff72\004\uff72\005\uff72" +
    "\006\uff72\007\uff72\011\uff72\013\uff72\014\uff72\015\uff72\016" +
    "\uff72\037\uff72\042\uff72\043\uff72\044\uff72\046\uff72\051\uff72" +
    "\053\uff72\054\uff72\057\uff72\061\uff72\001\002\000\012\003" +
    "\141\007\142\025\132\040\130\001\002\000\054\003\uff6c" +
    "\004\uff6c\005\uff6c\006\uff6c\007\uff6c\011\uff6c\013\uff6c\014" +
    "\uff6c\015\uff6c\016\uff6c\030\137\037\uff6c\042\uff6c\043\uff6c" +
    "\044\uff6c\046\uff6c\051\uff6c\053\uff6c\054\uff6c\057\uff6c\061" +
    "\uff6c\001\002\000\006\017\u0105\020\u01c7\001\002\000\010" +
    "\021\054\024\052\026\053\001\002\000\054\003\uff74\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\011\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\u01c9\037\uff74\042\uff74\043\uff74\044" +
    "\uff74\046\uff74\051\uff74\053\uff74\054\uff74\057\uff74\061\uff74" +
    "\001\002\000\004\007\044\001\002\000\052\003\uff75\004" +
    "\uff75\005\uff75\006\uff75\007\uff75\011\uff75\013\uff75\014\uff75" +
    "\015\uff75\016\uff75\037\uff75\042\uff75\043\uff75\044\uff75\046" +
    "\uff75\051\uff75\053\uff75\054\uff75\057\uff75\061\uff75\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\005\021\006\020\013\012\040\013\001\001\000" +
    "\004\037\u01ab\001\001\000\002\001\001\000\014\003\u01a8" +
    "\005\021\006\020\013\012\040\013\001\001\000\014\003" +
    "\u01a7\005\021\006\020\013\012\040\013\001\001\000\014" +
    "\003\u01a6\005\021\006\020\013\012\040\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\035\005\021\006\020\013\012\040\013\001\001\000" +
    "\014\004\023\005\027\006\026\013\022\040\024\001\001" +
    "\000\014\004\034\005\027\006\026\013\022\040\024\001" +
    "\001\000\002\001\001\000\014\004\033\005\027\006\026" +
    "\013\022\040\024\001\001\000\014\004\032\005\027\006" +
    "\026\013\022\040\024\001\001\000\014\004\031\005\027" +
    "\006\026\013\022\040\024\001\001\000\014\004\030\005" +
    "\027\006\026\013\022\040\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u010b\031\044\032\042\001\001\000" +
    "\010\012\045\031\044\032\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\071\014\065\016\057\020\062" +
    "\035\077\036\061\040\063\047\067\050\072\054\060\055" +
    "\076\060\075\001\001\000\002\001\001\000\032\007\071" +
    "\014\354\016\057\020\062\035\077\036\061\040\063\047" +
    "\067\050\072\054\060\055\076\060\075\001\001\000\002" +
    "\001\001\000\032\007\071\014\353\016\057\020\062\035" +
    "\077\036\061\040\063\047\067\050\072\054\060\055\076" +
    "\060\075\001\001\000\032\007\071\014\352\016\057\020" +
    "\062\035\077\036\061\040\063\047\067\050\072\054\060" +
    "\055\076\060\075\001\001\000\032\007\071\014\351\016" +
    "\057\020\062\035\077\036\061\040\063\047\067\050\072" +
    "\054\060\055\076\060\075\001\001\000\024\017\350\020" +
    "\116\042\134\043\117\044\120\045\121\046\135\051\125" +
    "\052\132\001\001\000\002\001\001\000\030\020\116\023" +
    "\266\024\227\025\232\042\134\043\117\044\120\045\231" +
    "\046\234\051\125\052\132\001\001\000\032\007\071\014" +
    "\264\016\057\020\062\035\077\036\061\040\063\047\067" +
    "\050\072\054\060\055\076\060\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\071\014\221\016\057\020\062\035\077\036" +
    "\061\040\063\047\067\050\072\054\060\055\076\060\075" +
    "\001\001\000\032\007\071\014\220\016\057\020\062\035" +
    "\077\036\061\040\063\047\067\050\072\054\060\055\076" +
    "\060\075\001\001\000\032\007\071\014\217\016\057\020" +
    "\062\035\077\036\061\040\063\047\067\050\072\054\060" +
    "\055\076\060\075\001\001\000\032\007\071\014\216\016" +
    "\057\020\062\035\077\036\061\040\063\047\067\050\072" +
    "\054\060\055\076\060\075\001\001\000\036\007\071\013" +
    "\214\014\213\016\057\020\062\035\077\036\061\040\063" +
    "\047\067\050\072\053\211\054\060\055\076\060\075\001" +
    "\001\000\006\041\176\050\173\001\001\000\004\053\167" +
    "\001\001\000\004\053\104\001\001\000\014\020\116\042" +
    "\134\043\117\044\120\046\166\001\001\000\002\001\001" +
    "\000\014\020\116\042\134\043\117\044\120\046\164\001" +
    "\001\000\010\045\163\051\125\052\132\001\001\000\030" +
    "\017\114\020\116\021\124\022\115\042\134\043\117\044" +
    "\120\045\121\046\135\051\125\052\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\116\042\155\043\117\044\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\116\043\137\044\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\114\020" +
    "\116\021\124\022\143\042\134\043\117\044\120\045\121" +
    "\046\135\051\125\052\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\116\044\146\001\001\000\002" +
    "\001\001\000\006\051\154\052\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\161\020\116\042\134\043\117\044\120\045\121" +
    "\046\135\051\125\052\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\116\042\134\043\117\044\120\046\172\001\001\000\010" +
    "\045\171\051\125\052\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\211\001\001" +
    "\000\004\053\104\001\001\000\002\001\001\000\012\020" +
    "\116\042\200\043\117\044\120\001\001\000\002\001\001" +
    "\000\032\007\071\014\202\016\057\020\062\035\077\036" +
    "\061\040\063\047\067\050\072\054\060\055\076\060\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\116" +
    "\042\210\043\117\044\120\001\001\000\002\001\001\000" +
    "\014\020\116\042\134\043\117\044\120\046\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\071\014" +
    "\215\016\057\020\062\035\077\036\061\040\063\047\067" +
    "\050\072\054\060\055\076\060\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\116\023\246\024\227\025" +
    "\232\042\134\043\117\044\120\045\231\046\234\051\125" +
    "\052\132\001\001\000\032\007\071\014\224\016\057\020" +
    "\062\035\077\036\061\040\063\047\067\050\072\054\060" +
    "\055\076\060\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\020\116\023\233\024\227\025\232\042\134" +
    "\043\117\044\120\045\231\046\234\051\125\052\132\001" +
    "\001\000\002\001\001\000\026\020\116\024\245\025\232" +
    "\042\134\043\117\044\120\045\231\046\234\051\125\052" +
    "\132\001\001\000\002\001\001\000\004\026\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\116\024" +
    "\240\025\232\042\134\043\117\044\120\045\231\046\234" +
    "\051\125\052\132\001\001\000\026\020\116\024\237\025" +
    "\232\042\134\043\117\044\120\045\231\046\234\051\125" +
    "\052\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\116\025\244\042\134\043\117" +
    "\044\120\045\231\046\234\051\125\052\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\071\014\250\016\057\020\062\035" +
    "\077\036\061\040\063\047\067\050\072\054\060\055\076" +
    "\060\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\257\052\132\056\262\001\001\000\010\051\257" +
    "\052\132\056\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\071\014\272\016" +
    "\057\020\062\035\077\036\061\040\063\047\067\050\072" +
    "\054\060\055\076\060\075\001\001\000\004\015\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\020\116" +
    "\023\277\024\227\025\232\042\134\043\117\044\120\045" +
    "\231\046\234\051\125\052\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\071\014\306\016\057\020\062\035\077\036\061" +
    "\040\063\047\067\050\072\054\060\055\076\060\075\001" +
    "\001\000\032\007\071\014\304\016\057\020\062\035\077" +
    "\036\061\040\063\047\067\050\072\054\060\055\076\060" +
    "\075\001\001\000\004\015\305\001\001\000\002\001\001" +
    "\000\004\015\307\001\001\000\002\001\001\000\032\007" +
    "\071\014\311\016\057\020\062\035\077\036\061\040\063" +
    "\047\067\050\072\054\060\055\076\060\075\001\001\000" +
    "\004\015\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\071\014\315\016\057\020\062\035\077\036" +
    "\061\040\063\047\067\050\072\054\060\055\076\060\075" +
    "\001\001\000\004\015\316\001\001\000\002\001\001\000" +
    "\004\015\322\001\001\000\004\015\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\071\014\334\016\057\020\062\035\077" +
    "\036\061\040\063\047\067\050\072\054\060\055\076\060" +
    "\075\001\001\000\032\007\071\014\327\016\057\020\062" +
    "\035\077\036\061\040\063\047\067\050\072\054\060\055" +
    "\076\060\075\001\001\000\004\015\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\071\014\342\016\057\020\062\035\077\036\061\040\063" +
    "\047\067\050\072\054\060\055\076\060\075\001\001\000" +
    "\004\015\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\071\014\356\016" +
    "\057\020\062\035\077\036\061\040\063\047\067\050\072" +
    "\054\060\055\076\060\075\001\001\000\002\001\001\000" +
    "\004\027\367\001\001\000\004\027\361\001\001\000\002" +
    "\001\001\000\032\007\071\014\363\016\057\020\062\035" +
    "\077\036\061\040\063\047\067\050\072\054\060\055\076" +
    "\060\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\071\014\375\016\057\020\062\035\077\036\061\040" +
    "\063\047\067\050\072\054\060\055\076\060\075\001\001" +
    "\000\032\007\071\014\372\016\057\020\062\035\077\036" +
    "\061\040\063\047\067\050\072\054\060\055\076\060\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\071\014\u0101\016\057\020\062\035\077\036" +
    "\061\040\063\047\067\050\072\054\060\055\076\060\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\044\032\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u010e\001\001\000\002\001" +
    "\001\000\032\007\071\014\u0110\016\057\020\062\035\077" +
    "\036\061\040\063\047\067\050\072\054\060\055\076\060" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u0114\031\044\032\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u0117\001\001" +
    "\000\002\001\001\000\032\007\071\014\u0119\016\057\020" +
    "\062\035\077\036\061\040\063\047\067\050\072\054\060" +
    "\055\076\060\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0194\031\044\032\042\001\001\000\010\012" +
    "\u0120\031\044\032\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\071\010\u012f\020" +
    "\u0126\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060" +
    "\055\u012e\057\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\071\010\u0180\020\u0126\033\u0128\034\u012d" +
    "\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001" +
    "\001\000\030\007\071\010\u017f\020\u0126\033\u0128\034\u012d" +
    "\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001" +
    "\001\000\030\007\071\010\u017e\020\u0126\033\u0128\034\u012d" +
    "\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001" +
    "\001\000\030\007\071\010\u017d\020\u0126\033\u0128\034\u012d" +
    "\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001" +
    "\001\000\030\020\116\023\u014d\024\227\025\232\042\134" +
    "\043\117\044\120\045\231\046\234\051\125\052\132\001" +
    "\001\000\002\001\001\000\030\007\071\010\u0141\020\u0126" +
    "\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055" +
    "\u012e\057\u0132\001\001\000\030\007\071\010\u0140\020\u0126" +
    "\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055" +
    "\u012e\057\u0132\001\001\000\030\007\071\010\u013f\020\u0126" +
    "\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055" +
    "\u012e\057\u0132\001\001\000\002\001\001\000\032\007\071" +
    "\010\u013b\020\u0126\033\u0128\034\u012d\040\u0127\047\u0129\050" +
    "\072\053\211\054\060\055\u012e\057\u0132\001\001\000\006" +
    "\041\u0134\050\173\001\001\000\030\007\071\010\u0133\020" +
    "\u0126\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060" +
    "\055\u012e\057\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\116\042\u0136\043\117\044\120\001\001" +
    "\000\002\001\001\000\030\007\071\010\u0138\020\u0126\033" +
    "\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e" +
    "\057\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\071\010\u013c\020\u0126\033\u0128\034\u012d\040\u0127" +
    "\047\u0129\050\072\054\060\055\u012e\057\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\020\116\023\u0148\024\227\025\232\042\134" +
    "\043\117\044\120\045\231\046\234\051\125\052\132\001" +
    "\001\000\030\007\071\010\u0144\020\u0126\033\u0128\034\u012d" +
    "\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\020\116" +
    "\023\u0147\024\227\025\232\042\134\043\117\044\120\045" +
    "\231\046\234\051\125\052\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\071\010\u014a\020\u0126\033" +
    "\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e" +
    "\057\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\071\010\u016e\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\030\007\071\010\u0152\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\004\011\u0155\001\001\000\002\001\001\000" +
    "\030\020\116\023\u015a\024\227\025\232\042\134\043\117" +
    "\044\120\045\231\046\234\051\125\052\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\071\010\u015e\020\u0126" +
    "\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060\055" +
    "\u012e\057\u0132\001\001\000\004\011\u015f\001\001\000\002" +
    "\001\001\000\030\007\071\010\u0164\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\030\007\071\010\u0162\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\004\011\u0163\001\001\000\002\001\001\000" +
    "\004\011\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\071\010\u0168\020\u0126\033\u0128\034\u012d\040" +
    "\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132\001\001" +
    "\000\004\011\u0169\001\001\000\002\001\001\000\030\007" +
    "\071\010\u016d\020\u0126\033\u0128\034\u012d\040\u0127\047\u0129" +
    "\050\072\054\060\055\u012e\057\u0132\001\001\000\030\007" +
    "\071\010\u016c\020\u0126\033\u0128\034\u012d\040\u0127\047\u0129" +
    "\050\072\054\060\055\u012e\057\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u016f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\071\010\u0173\020\u0126\033\u0128\034\u012d\040\u0127\047\u0129" +
    "\050\072\054\060\055\u012e\057\u0132\001\001\000\004\011" +
    "\u0174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\071\010\u0179\020" +
    "\u0126\033\u0128\034\u012d\040\u0127\047\u0129\050\072\054\060" +
    "\055\u012e\057\u0132\001\001\000\004\011\u017a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\071\010\u018b\020\u0126\033\u0128\034\u012d\040\u0127\047" +
    "\u0129\050\072\054\060\055\u012e\057\u0132\001\001\000\002" +
    "\001\001\000\030\007\071\010\u0191\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\030\007\071\010\u018e\020\u0126\033\u0128\034" +
    "\u012d\040\u0127\047\u0129\050\072\054\060\055\u012e\057\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\071\010" +
    "\u0197\020\u0126\033\u0128\034\u012d\040\u0127\047\u0129\050\072" +
    "\054\060\055\u012e\057\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u019b\031\044" +
    "\032\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\071\010\u019e\020\u0126\033\u0128\034\u012d\040\u0127" +
    "\047\u0129\050\072\054\060\055\u012e\057\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u01a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u01c5\001\001\000\006\027\u01b5\030\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\044\032\u01b7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u01bd\052\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\116" +
    "\042\u01c4\043\117\044\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u01c7\001\001\000\002\001\001" +
    "\000\006\031\044\032\u01c9\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;

    public void syntax_error(Symbol s){
        System.out.println("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END STRUCTURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIFSUB ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DOWHILESUB ::= DO saltoLinea SUBINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Object RESULT =null;
		 System.out.println("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIFFUNC ::= ELSE saltoLinea SIFFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIFFUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DOWHILEFUNC ::= DO saltoLinea FUNCINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAL ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAL ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMCALL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARCALL ::= VAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARCALL ::= VARCALL error 
            {
              Object RESULT =null;
		 System.out.println("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALCOND ::= VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMS ::= VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGN ::= ASIGNSTRUC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALASIGN ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALASIGN ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALUNIRSTR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNINT ::= identificador error VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNINT ::= error OPASING VALINT 
            {
              Object RESULT =null;
		 System.out.println("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPASING ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALINT ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPARIT ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP ::= OPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPP ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPP ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPP ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPP ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= DIM error 
            {
              Object RESULT =null;
		 System.out.println("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // T ::= identificador AS identificador IGUAL NEW CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VARS ::= CANTVARS AS TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VARS ::= CANTVARS error 
            {
              Object RESULT =null;
		 System.out.println("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CANTVARS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOIGUAL ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Object RESULT =null;
		 System.out.println("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // VALWR ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VALWR ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALWR ::= error 
            {
              Object RESULT =null;
		 System.out.println("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SUBINSTRUC ::= CONTINUE FOR TO NEXT STEP STRUCTURE WHILE DO UNTIL LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
