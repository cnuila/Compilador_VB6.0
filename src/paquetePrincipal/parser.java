
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\050\010" +
    "\000\002\050\010\000\002\050\010\000\002\050\010\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\005\013\000\002\005\013\000\002\005\013\000\002\005" +
    "\013\000\002\005\013\000\002\046\004\000\002\046\004" +
    "\000\002\046\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\005\000\002\046" +
    "\002\000\002\044\012\000\002\044\012\000\002\044\012" +
    "\000\002\044\012\000\002\044\012\000\002\043\010\000" +
    "\002\043\005\000\002\043\002\000\002\043\010\000\002" +
    "\043\010\000\002\043\010\000\002\043\005\000\002\053" +
    "\010\000\002\053\010\000\002\053\010\000\002\053\010" +
    "\000\002\053\010\000\002\052\011\000\002\052\011\000" +
    "\002\052\011\000\002\052\011\000\002\052\011\000\002" +
    "\006\015\000\002\006\015\000\002\006\015\000\002\006" +
    "\015\000\002\006\015\000\002\006\015\000\002\006\015" +
    "\000\002\047\004\000\002\047\004\000\002\047\005\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\002\000\002\047\005\000\002\047\004" +
    "\000\002\045\012\000\002\045\012\000\002\045\012\000" +
    "\002\045\012\000\002\045\012\000\002\042\010\000\002" +
    "\042\006\000\002\042\002\000\002\042\010\000\002\042" +
    "\010\000\002\042\010\000\002\042\005\000\002\055\010" +
    "\000\002\055\010\000\002\055\010\000\002\055\010\000" +
    "\002\055\010\000\002\054\011\000\002\054\011\000\002" +
    "\054\011\000\002\054\011\000\002\054\011\000\002\041" +
    "\004\000\002\026\003\000\002\026\003\000\002\056\003" +
    "\000\002\056\007\000\002\056\007\000\002\023\006\000" +
    "\002\023\006\000\002\024\003\000\002\024\002\000\002" +
    "\025\005\000\002\025\003\000\002\025\004\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\003" +
    "\000\002\040\005\000\002\061\003\000\002\061\003\000" +
    "\002\036\003\000\002\036\003\000\002\035\003\000\002" +
    "\035\002\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\034\005\000\002\051\005\000\002\051\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\011\005\000\002" +
    "\011\005\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\031\003\000\002\031\004\000\002\031\004\000" +
    "\002\030\003\000\002\014\005\000\002\014\003\000\002" +
    "\022\005\000\002\022\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\005\000\002\021\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\005\000" +
    "\002\020\007\000\002\020\011\000\002\020\007\000\002" +
    "\020\005\000\002\016\007\000\002\016\005\000\002\016" +
    "\004\000\002\015\005\000\002\015\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\006\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\007" +
    "\006\000\002\007\006\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0229\000\006\003\004\030\005\001\002\000\004\050" +
    "\u0227\001\002\000\006\003\010\050\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\013" +
    "\u0223\001\002\000\006\003\012\013\013\001\002\000\014" +
    "\012\021\013\020\014\014\031\022\045\023\001\002\000" +
    "\014\012\021\013\020\014\014\031\022\045\023\001\002" +
    "\000\006\003\u0202\050\u0203\001\002\000\006\003\u01fc\006" +
    "\u01fd\001\002\000\014\012\021\013\020\014\014\031\022" +
    "\045\023\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\014\012\021\013\020\014\014" +
    "\031\022\045\023\001\002\000\006\003\u01e4\050\u01e5\001" +
    "\002\000\006\003\u0148\050\u0149\001\002\000\006\003\042" +
    "\050\043\001\002\000\014\012\021\013\020\014\014\031" +
    "\022\045\023\001\002\000\014\012\021\013\031\014\014" +
    "\031\022\045\023\001\002\000\014\012\021\013\031\014" +
    "\014\031\022\045\023\001\002\000\006\003\ufff7\006\ufff7" +
    "\001\002\000\014\012\021\013\031\014\014\031\022\045" +
    "\023\001\002\000\020\003\ufff0\006\ufff0\012\021\013\031" +
    "\014\014\031\022\045\023\001\002\000\014\012\021\013" +
    "\031\014\014\031\022\045\023\001\002\000\014\012\021" +
    "\013\031\014\014\031\022\045\023\001\002\000\006\003" +
    "\ufff3\006\ufff3\001\002\000\006\003\ufff1\006\ufff1\001\002" +
    "\000\006\003\ufff4\006\ufff4\001\002\000\006\003\ufff5\006" +
    "\ufff5\001\002\000\006\003\ufff2\006\ufff2\001\002\000\006" +
    "\003\ufff6\006\ufff6\001\002\000\004\032\u013f\001\002\000" +
    "\006\003\044\032\045\001\002\000\006\033\uff80\050\047" +
    "\001\002\000\010\003\uff80\033\uff80\050\047\001\002\000" +
    "\006\003\uff81\033\uff81\001\002\000\010\003\uff54\015\uff54" +
    "\016\uff54\001\002\000\010\003\u0132\015\u0130\016\u0131\001" +
    "\002\000\006\003\053\033\052\001\002\000\006\003\u011c" +
    "\016\u011b\001\002\000\004\016\054\001\002\000\012\017" +
    "\060\022\055\023\057\050\056\001\002\000\054\003\uff4d" +
    "\004\uff4d\005\uff4d\006\uff4d\010\uff4d\012\uff4d\013\uff4d\014" +
    "\uff4d\015\uff4d\031\uff4d\033\uff4d\034\uff4d\035\uff4d\037\uff4d" +
    "\041\uff4d\042\uff4d\043\uff4d\045\uff4d\047\uff4d\050\uff4d\056" +
    "\uff4d\001\002\000\054\003\uff4a\004\uff4a\005\uff4a\006\uff4a" +
    "\010\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\031\uff4a\033" +
    "\uff4a\034\uff4a\035\uff4a\037\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\045\uff4a\047\uff4a\050\uff4a\056\uff4a\001\002\000\054\003" +
    "\uff4c\004\uff4c\005\uff4c\006\uff4c\010\uff4c\012\uff4c\013\uff4c" +
    "\014\uff4c\015\uff4c\031\uff4c\033\uff4c\034\uff4c\035\uff4c\037" +
    "\uff4c\041\uff4c\042\uff4c\043\uff4c\045\uff4c\047\uff4c\050\uff4c" +
    "\056\uff4c\001\002\000\054\003\uff4b\004\uff4b\005\uff4b\006" +
    "\uff4b\010\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\031\uff4b" +
    "\033\uff4b\034\uff4b\035\uff4b\037\uff4b\041\uff4b\042\uff4b\043" +
    "\uff4b\045\uff4b\047\uff4b\050\uff4b\056\uff4b\001\002\000\004" +
    "\013\062\001\002\000\032\003\105\004\073\006\uffb0\013" +
    "\101\014\014\034\063\035\106\041\100\043\071\047\075" +
    "\050\110\056\107\001\002\000\004\045\u0119\001\002\000" +
    "\042\003\105\004\073\005\uffb0\006\uffb0\010\uffb0\013\101" +
    "\014\014\034\063\035\106\037\uffb0\041\100\042\uffb0\043" +
    "\071\047\075\050\110\056\107\001\002\000\042\003\uff7f" +
    "\004\uff7f\005\uff7f\006\uff7f\010\uff7f\013\uff7f\014\uff7f\034" +
    "\uff7f\035\uff7f\037\uff7f\041\uff7f\042\uff7f\043\uff7f\047\uff7f" +
    "\050\uff7f\056\uff7f\001\002\000\042\003\105\004\073\005" +
    "\uffb0\006\uffb0\010\uffb0\013\101\014\014\034\063\035\106" +
    "\037\uffb0\041\100\042\uffb0\043\071\047\075\050\110\056" +
    "\107\001\002\000\042\003\105\004\073\005\uffb0\006\uffb0" +
    "\010\uffb0\013\101\014\014\034\063\035\106\037\uffb0\041" +
    "\100\042\uffb0\043\071\047\075\050\110\056\107\001\002" +
    "\000\042\003\105\004\073\005\uffb0\006\uffb0\010\uffb0\013" +
    "\101\014\014\034\063\035\106\037\uffb0\041\100\042\uffb0" +
    "\043\071\047\075\050\110\056\107\001\002\000\022\003" +
    "\135\020\127\021\133\032\134\046\120\050\140\051\130" +
    "\052\136\001\002\000\004\006\u0112\001\002\000\024\003" +
    "\340\020\127\021\133\026\252\032\134\046\120\050\140" +
    "\051\130\052\136\001\002\000\042\003\105\004\073\005" +
    "\uffb0\006\uffb0\010\uffb0\013\101\014\014\034\063\035\106" +
    "\037\uffb0\041\100\042\uffb0\043\071\047\075\050\110\056" +
    "\107\001\002\000\006\003\325\032\326\001\002\000\042" +
    "\003\uff7d\004\uff7d\005\uff7d\006\uff7d\010\uff7d\013\uff7d\014" +
    "\uff7d\034\uff7d\035\uff7d\037\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\047\uff7d\050\uff7d\056\uff7d\001\002\000\042\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\010\uff7e\013\uff7e\014\uff7e\034\uff7e" +
    "\035\uff7e\037\uff7e\041\uff7e\042\uff7e\043\uff7e\047\uff7e\050" +
    "\uff7e\056\uff7e\001\002\000\006\003\304\040\305\001\002" +
    "\000\042\003\105\004\073\005\uffb0\006\uffb0\010\uffb0\013" +
    "\101\014\014\034\063\035\106\037\uffb0\041\100\042\uffb0" +
    "\043\071\047\075\050\110\056\107\001\002\000\042\003" +
    "\105\004\073\005\uffb0\006\uffb0\010\uffb0\013\101\014\014" +
    "\034\063\035\106\037\uffb0\041\100\042\uffb0\043\071\047" +
    "\075\050\110\056\107\001\002\000\042\003\105\004\073" +
    "\005\uffb0\006\uffb0\010\uffb0\013\101\014\014\034\063\035" +
    "\106\037\uffb0\041\100\042\uffb0\043\071\047\075\050\110" +
    "\056\107\001\002\000\042\003\105\004\073\005\uffb0\006" +
    "\uffb0\010\uffb0\013\101\014\014\034\063\035\106\037\uffb0" +
    "\041\100\042\uffb0\043\071\047\075\050\110\056\107\001" +
    "\002\000\056\003\246\004\073\005\uffb0\006\uffb0\010\uffb0" +
    "\011\222\013\101\014\014\032\147\034\063\035\106\037" +
    "\uffb0\040\242\041\100\042\uffb0\043\071\045\023\047\075" +
    "\050\247\053\112\054\116\056\107\001\002\000\006\003" +
    "\201\050\202\001\002\000\010\011\175\053\112\054\116" +
    "\001\002\000\014\003\113\011\114\032\115\053\112\054" +
    "\116\001\002\000\012\003\145\032\134\050\146\052\136" +
    "\001\002\000\004\011\172\001\002\000\012\003\145\032" +
    "\134\050\146\052\136\001\002\000\022\003\uff6c\020\127" +
    "\021\133\032\uff6c\046\120\050\uff6c\051\130\052\uff6c\001" +
    "\002\000\024\003\135\020\127\021\133\032\134\033\uff8e" +
    "\046\120\050\140\051\130\052\136\001\002\000\004\011" +
    "\117\001\002\000\012\003\uff6b\032\uff6b\050\uff6b\052\uff6b" +
    "\001\002\000\060\003\uff75\004\uff75\005\uff75\006\uff75\007" +
    "\uff75\010\uff75\011\uff75\013\uff75\014\uff75\015\uff75\024\uff75" +
    "\025\uff75\033\uff75\034\uff75\035\uff75\037\uff75\041\uff75\042" +
    "\uff75\043\uff75\047\uff75\050\uff75\055\uff75\056\uff75\001\002" +
    "\000\010\003\uff8c\015\uff8c\033\uff8c\001\002\000\004\033" +
    "\167\001\002\000\074\003\uff62\004\uff62\005\uff62\006\uff62" +
    "\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015" +
    "\uff62\024\uff62\025\uff62\031\uff62\033\uff62\034\uff62\035\uff62" +
    "\036\uff62\037\uff62\041\uff62\042\uff62\043\uff62\045\uff62\047" +
    "\uff62\050\uff62\053\uff62\054\uff62\055\uff62\056\uff62\001\002" +
    "\000\074\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010" +
    "\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\024\uff67" +
    "\025\uff67\031\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037" +
    "\uff67\041\uff67\042\uff67\043\uff67\045\uff67\047\uff67\050\uff67" +
    "\053\uff67\054\152\055\uff67\056\uff67\001\002\000\074\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65" +
    "\012\uff65\013\uff65\014\uff65\015\uff65\024\uff65\025\uff65\031" +
    "\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\041\uff65" +
    "\042\uff65\043\uff65\045\uff65\047\uff65\050\uff65\053\uff65\054" +
    "\uff65\055\uff65\056\uff65\001\002\000\046\003\uff96\004\uff96" +
    "\005\uff96\006\uff96\010\uff96\013\uff96\014\uff96\015\uff96\033" +
    "\uff96\034\uff96\035\uff96\037\uff96\041\uff96\042\uff96\043\uff96" +
    "\047\uff96\050\uff96\056\uff96\001\002\000\060\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\013\uff78" +
    "\014\uff78\015\uff78\024\uff78\025\uff78\033\uff78\034\uff78\035" +
    "\uff78\037\uff78\041\uff78\042\uff78\043\uff78\047\uff78\050\uff78" +
    "\055\uff78\056\uff78\001\002\000\062\003\uff79\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\013\uff79\014\uff79" +
    "\015\uff79\024\uff79\025\uff79\033\uff79\034\uff79\035\uff79\037" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff72\047\uff79\050\uff79" +
    "\055\uff79\056\uff79\001\002\000\010\003\165\015\164\033" +
    "\uff8f\001\002\000\060\003\uff76\004\uff76\005\uff76\006\uff76" +
    "\007\uff76\010\uff76\011\uff76\013\uff76\014\uff76\015\uff76\024" +
    "\uff76\025\uff76\033\uff76\034\uff76\035\uff76\037\uff76\041\uff76" +
    "\042\uff76\043\uff76\047\uff76\050\uff76\055\uff76\056\uff76\001" +
    "\002\000\060\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77" +
    "\010\uff77\011\uff77\013\uff77\014\uff77\015\uff77\024\uff77\025" +
    "\uff77\033\uff77\034\uff77\035\uff77\037\uff77\041\uff77\042\uff77" +
    "\043\uff77\047\uff77\050\uff77\055\uff77\056\uff77\001\002\000" +
    "\012\003\145\032\134\050\146\052\136\001\002\000\070" +
    "\003\uff60\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60\011" +
    "\uff60\013\uff60\014\uff60\015\uff60\024\uff60\025\uff60\032\147" +
    "\033\uff60\034\uff60\035\uff60\037\uff60\041\uff60\042\uff60\043" +
    "\uff60\044\uff70\047\uff60\050\uff60\053\uff60\054\uff60\055\uff60" +
    "\056\uff60\001\002\000\074\003\uff64\004\uff64\005\uff64\006" +
    "\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64" +
    "\015\uff64\024\uff64\025\uff64\031\uff64\033\uff64\034\uff64\035" +
    "\uff64\036\uff64\037\uff64\041\uff64\042\uff64\043\uff64\045\uff64" +
    "\047\uff64\050\uff64\053\uff64\054\uff64\055\uff64\056\uff64\001" +
    "\002\000\004\044\154\001\002\000\070\003\uff63\004\uff63" +
    "\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\013\uff63\014" +
    "\uff63\015\uff63\024\uff63\025\uff63\032\115\033\uff63\034\uff63" +
    "\035\uff63\037\uff63\041\uff63\042\uff63\043\uff63\044\uff71\047" +
    "\uff63\050\uff63\053\uff63\054\uff63\055\uff63\056\uff63\001\002" +
    "\000\064\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010" +
    "\uff69\011\uff69\013\uff69\014\uff69\015\uff69\024\uff69\025\uff69" +
    "\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\041\uff69\042" +
    "\uff69\043\uff69\047\uff69\050\uff69\053\143\055\uff69\056\uff69" +
    "\001\002\000\046\003\uff95\004\uff95\005\uff95\006\uff95\010" +
    "\uff95\013\uff95\014\uff95\015\uff95\033\uff95\034\uff95\035\uff95" +
    "\037\uff95\041\uff95\042\uff95\043\uff95\047\uff95\050\uff95\056" +
    "\uff95\001\002\000\012\003\145\032\134\050\146\052\136" +
    "\001\002\000\074\003\uff68\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\024\uff68\025\uff68\031\uff68\033\uff68\034\uff68\035\uff68\036" +
    "\uff68\037\uff68\041\uff68\042\uff68\043\uff68\045\uff68\047\uff68" +
    "\050\uff68\053\uff68\054\152\055\uff68\056\uff68\001\002\000" +
    "\076\003\uff60\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60" +
    "\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\024\uff60\025" +
    "\uff60\031\uff60\032\147\033\uff60\034\uff60\035\uff60\036\uff60" +
    "\037\uff60\041\uff60\042\uff60\043\uff60\045\uff60\047\uff60\050" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\001\002\000\076" +
    "\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011" +
    "\uff63\012\uff63\013\uff63\014\uff63\015\uff63\024\uff63\025\uff63" +
    "\031\uff63\032\115\033\uff63\034\uff63\035\uff63\036\uff63\037" +
    "\uff63\041\uff63\042\uff63\043\uff63\045\uff63\047\uff63\050\uff63" +
    "\053\uff63\054\uff63\055\uff63\056\uff63\001\002\000\024\003" +
    "\135\020\127\021\133\032\134\033\uff8e\046\120\050\140" +
    "\051\130\052\136\001\002\000\004\033\151\001\002\000" +
    "\074\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\024\uff90\025" +
    "\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\041\uff90\042\uff90\043\uff90\045\uff90\047\uff90\050\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\001\002\000\012\003\145" +
    "\032\134\050\146\052\136\001\002\000\074\003\uff66\004" +
    "\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66" +
    "\013\uff66\014\uff66\015\uff66\024\uff66\025\uff66\031\uff66\033" +
    "\uff66\034\uff66\035\uff66\036\uff66\037\uff66\041\uff66\042\uff66" +
    "\043\uff66\045\uff66\047\uff66\050\uff66\053\uff66\054\uff66\055" +
    "\uff66\056\uff66\001\002\000\010\003\156\050\157\051\155" +
    "\001\002\000\070\003\uff72\004\uff72\005\uff72\006\uff72\007" +
    "\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72" +
    "\024\uff72\025\uff72\031\uff72\033\uff72\034\uff72\035\uff72\037" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\047\uff72" +
    "\050\uff72\055\uff72\056\uff72\001\002\000\070\003\uff70\004" +
    "\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\024\uff70\025\uff70\031\uff70\033" +
    "\uff70\034\uff70\035\uff70\037\uff70\041\uff70\042\uff70\043\uff70" +
    "\044\uff70\045\uff70\047\uff70\050\uff70\055\uff70\056\uff70\001" +
    "\002\000\070\003\uff71\004\uff71\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\024" +
    "\uff71\025\uff71\031\uff71\033\uff71\034\uff71\035\uff71\037\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\047\uff71\050" +
    "\uff71\055\uff71\056\uff71\001\002\000\070\003\uff73\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013" +
    "\uff73\014\uff73\015\uff73\024\uff73\025\uff73\031\uff73\033\uff73" +
    "\034\uff73\035\uff73\037\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\154\045\uff73\047\uff73\050\uff73\055\uff73\056\uff73\001\002" +
    "\000\066\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\024\uff74" +
    "\025\uff74\031\uff74\033\uff74\034\uff74\035\uff74\037\uff74\041" +
    "\uff74\042\uff74\043\uff74\045\uff74\047\uff74\050\uff74\055\uff74" +
    "\056\uff74\001\002\000\006\033\163\053\143\001\002\000" +
    "\074\003\uff61\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61" +
    "\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61\024\uff61\025" +
    "\uff61\031\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61" +
    "\041\uff61\042\uff61\043\uff61\045\uff61\047\uff61\050\uff61\053" +
    "\uff61\054\uff61\055\uff61\056\uff61\001\002\000\022\003\135" +
    "\020\127\021\133\032\134\046\120\050\140\051\130\052" +
    "\136\001\002\000\010\003\uff8b\015\uff8b\033\uff8b\001\002" +
    "\000\010\003\uff8d\015\uff8d\033\uff8d\001\002\000\074\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\024\uff91\025\uff91\031" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\041\uff91" +
    "\042\uff91\043\uff91\045\uff91\047\uff91\050\uff91\053\uff91\054" +
    "\uff91\055\uff91\056\uff91\001\002\000\042\003\uff7c\004\uff7c" +
    "\005\uff7c\006\uff7c\010\uff7c\013\uff7c\014\uff7c\034\uff7c\035" +
    "\uff7c\037\uff7c\041\uff7c\042\uff7c\043\uff7c\047\uff7c\050\uff7c" +
    "\056\uff7c\001\002\000\044\003\uff6e\004\uff6e\005\uff6e\006" +
    "\uff6e\010\uff6e\013\uff6e\014\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\037\uff6e\041\uff6e\042\uff6e\043\uff6e\047\uff6e\050\uff6e\056" +
    "\uff6e\001\002\000\012\003\uff6a\032\uff6a\050\uff6a\052\uff6a" +
    "\001\002\000\044\003\uff6f\004\uff6f\005\uff6f\006\uff6f\010" +
    "\uff6f\013\uff6f\014\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\047\uff6f\050\uff6f\056\uff6f\001" +
    "\002\000\012\003\145\032\134\050\146\052\136\001\002" +
    "\000\022\003\uff6c\020\127\021\133\032\uff6c\046\120\050" +
    "\uff6c\051\130\052\uff6c\001\002\000\042\003\uff7b\004\uff7b" +
    "\005\uff7b\006\uff7b\010\uff7b\013\uff7b\014\uff7b\034\uff7b\035" +
    "\uff7b\037\uff7b\041\uff7b\042\uff7b\043\uff7b\047\uff7b\050\uff7b" +
    "\056\uff7b\001\002\000\042\003\uff7a\004\uff7a\005\uff7a\006" +
    "\uff7a\010\uff7a\013\uff7a\014\uff7a\034\uff7a\035\uff7a\037\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\047\uff7a\050\uff7a\056\uff7a\001" +
    "\002\000\006\003\uff94\036\uff94\001\002\000\014\011\222" +
    "\016\230\036\226\053\112\054\116\001\002\000\014\003" +
    "\113\011\222\016\221\053\112\054\116\001\002\000\006" +
    "\003\205\036\204\001\002\000\012\003\145\032\134\050" +
    "\146\052\136\001\002\000\012\003\145\032\134\050\146" +
    "\052\136\001\002\000\006\013\207\053\143\001\002\000" +
    "\032\003\105\004\073\013\101\014\014\034\063\035\106" +
    "\037\uffb0\041\100\043\071\047\075\050\110\056\107\001" +
    "\002\000\004\037\211\001\002\000\042\003\uff99\004\uff99" +
    "\005\uff99\006\uff99\010\uff99\013\uff99\014\uff99\034\uff99\035" +
    "\uff99\037\uff99\041\uff99\042\uff99\043\uff99\047\uff99\050\uff99" +
    "\056\uff99\001\002\000\010\003\213\013\214\053\143\001" +
    "\002\000\032\003\105\004\073\013\101\014\014\034\063" +
    "\035\106\037\uffb0\041\100\043\071\047\075\050\110\056" +
    "\107\001\002\000\032\003\105\004\073\013\101\014\014" +
    "\034\063\035\106\037\uffb0\041\100\043\071\047\075\050" +
    "\110\056\107\001\002\000\004\037\216\001\002\000\042" +
    "\003\uff9c\004\uff9c\005\uff9c\006\uff9c\010\uff9c\013\uff9c\014" +
    "\uff9c\034\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\047\uff9c\050\uff9c\056\uff9c\001\002\000\004\037\220\001" +
    "\002\000\042\003\uff98\004\uff98\005\uff98\006\uff98\010\uff98" +
    "\013\uff98\014\uff98\034\uff98\035\uff98\037\uff98\041\uff98\042" +
    "\uff98\043\uff98\047\uff98\050\uff98\056\uff98\001\002\000\004" +
    "\022\223\001\002\000\012\003\uff6c\032\uff6c\050\uff6c\052" +
    "\uff6c\001\002\000\004\011\224\001\002\000\012\003\145" +
    "\032\134\050\146\052\136\001\002\000\010\003\uff93\036" +
    "\uff93\053\143\001\002\000\012\003\145\032\134\050\146" +
    "\052\136\001\002\000\012\003\145\032\134\050\146\052" +
    "\136\001\002\000\004\022\231\001\002\000\004\011\232" +
    "\001\002\000\012\003\145\032\134\050\146\052\136\001" +
    "\002\000\010\003\uff92\036\uff92\053\143\001\002\000\044" +
    "\003\uff6d\004\uff6d\005\uff6d\006\uff6d\010\uff6d\013\uff6d\014" +
    "\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\041\uff6d\042\uff6d" +
    "\043\uff6d\047\uff6d\050\uff6d\056\uff6d\001\002\000\006\013" +
    "\236\053\143\001\002\000\032\003\105\004\073\013\101" +
    "\014\014\034\063\035\106\037\uffb0\041\100\043\071\047" +
    "\075\050\110\056\107\001\002\000\004\037\240\001\002" +
    "\000\042\003\uff9a\004\uff9a\005\uff9a\006\uff9a\010\uff9a\013" +
    "\uff9a\014\uff9a\034\uff9a\035\uff9a\037\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\047\uff9a\050\uff9a\056\uff9a\001\002\000\004\036" +
    "\273\001\002\000\024\003\135\020\127\021\133\026\252" +
    "\032\134\046\120\050\140\051\130\052\136\001\002\000" +
    "\014\005\uffae\006\uffae\010\uffae\037\uffae\042\uffae\001\002" +
    "\000\034\003\uff7e\004\uff7e\006\uff7e\013\uff7e\014\uff7e\034" +
    "\uff7e\035\uff7e\036\uff94\041\uff7e\043\uff7e\047\uff7e\050\uff7e" +
    "\056\uff7e\001\002\000\042\003\105\004\073\005\uffb0\006" +
    "\uffb0\010\uffb0\013\101\014\014\034\063\035\106\037\uffb0" +
    "\041\100\042\uffb0\043\071\047\075\050\110\056\107\001" +
    "\002\000\060\003\246\004\073\005\uffb0\006\uffb0\010\uffb0" +
    "\011\222\013\101\014\014\016\230\032\147\034\063\035" +
    "\106\037\uffb0\040\242\041\100\042\uffb0\043\071\045\023" +
    "\047\075\050\247\053\112\054\116\056\107\001\002\000" +
    "\016\003\113\011\114\016\221\032\115\053\112\054\116" +
    "\001\002\000\014\005\uffaf\006\uffaf\010\uffaf\037\uffaf\042" +
    "\uffaf\001\002\000\014\003\uff87\007\uff87\013\uff87\024\uff87" +
    "\025\uff87\001\002\000\022\003\135\020\127\021\133\032" +
    "\134\046\120\050\140\051\130\052\136\001\002\000\020" +
    "\003\uff83\007\uff83\011\uff83\013\uff83\024\uff83\025\uff83\055" +
    "\uff83\001\002\000\006\011\270\055\266\001\002\000\010" +
    "\013\261\024\257\025\260\001\002\000\020\003\uff82\007" +
    "\uff82\011\uff82\013\uff82\024\uff82\025\uff82\055\uff82\001\002" +
    "\000\022\003\135\020\127\021\133\032\134\046\120\050" +
    "\140\051\130\052\136\001\002\000\022\003\135\020\127" +
    "\021\133\032\134\046\120\050\140\051\130\052\136\001" +
    "\002\000\032\003\105\004\073\013\101\014\014\034\063" +
    "\035\106\041\100\042\uffb0\043\071\047\075\050\110\056" +
    "\107\001\002\000\004\042\263\001\002\000\042\003\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\010\uffa0\013\uffa0\014\uffa0\034" +
    "\uffa0\035\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0\047\uffa0" +
    "\050\uffa0\056\uffa0\001\002\000\014\003\uff89\007\uff89\013" +
    "\uff89\024\uff89\025\uff89\001\002\000\014\003\uff8a\007\uff8a" +
    "\013\uff8a\024\uff8a\025\uff8a\001\002\000\022\003\uff85\020" +
    "\uff85\021\uff85\032\uff85\046\uff85\050\uff85\051\uff85\052\uff85" +
    "\001\002\000\022\003\135\020\127\021\133\032\134\046" +
    "\120\050\140\051\130\052\136\001\002\000\022\003\uff84" +
    "\020\uff84\021\uff84\032\uff84\046\uff84\050\uff84\051\uff84\052" +
    "\uff84\001\002\000\014\003\uff86\007\uff86\013\uff86\024\uff86" +
    "\025\uff86\001\002\000\014\003\uff88\007\uff88\013\uff88\024" +
    "\uff88\025\uff88\001\002\000\012\003\145\032\134\050\146" +
    "\052\136\001\002\000\006\013\275\053\143\001\002\000" +
    "\032\003\105\004\073\013\101\014\014\034\063\035\106" +
    "\037\uffb0\041\100\043\071\047\075\050\110\056\107\001" +
    "\002\000\004\037\277\001\002\000\042\003\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\010\uff9b\013\uff9b\014\uff9b\034\uff9b\035" +
    "\uff9b\037\uff9b\041\uff9b\042\uff9b\043\uff9b\047\uff9b\050\uff9b" +
    "\056\uff9b\001\002\000\014\005\uffb2\006\uffb2\010\uffb2\037" +
    "\uffb2\042\uffb2\001\002\000\014\005\uffb4\006\uffb4\010\uffb4" +
    "\037\uffb4\042\uffb4\001\002\000\014\005\uffb3\006\uffb3\010" +
    "\uffb3\037\uffb3\042\uffb3\001\002\000\014\005\uffb9\006\uffb9" +
    "\010\uffb9\037\uffb9\042\uffb9\001\002\000\024\003\135\020" +
    "\127\021\133\026\252\032\134\046\120\050\140\051\130" +
    "\052\136\001\002\000\024\003\306\020\127\021\133\026" +
    "\252\032\134\046\120\050\140\051\130\052\136\001\002" +
    "\000\020\011\uff60\013\316\032\147\044\uff70\053\uff60\054" +
    "\uff60\055\uff60\001\002\000\012\003\310\013\311\024\257" +
    "\025\260\001\002\000\032\003\105\004\073\013\101\014" +
    "\014\034\063\035\106\041\100\042\uffb0\043\071\047\075" +
    "\050\110\056\107\001\002\000\032\003\105\004\073\013" +
    "\101\014\014\034\063\035\106\041\100\042\uffb0\043\071" +
    "\047\075\050\110\056\107\001\002\000\004\042\313\001" +
    "\002\000\042\003\uffa1\004\uffa1\005\uffa1\006\uffa1\010\uffa1" +
    "\013\uffa1\014\uffa1\034\uffa1\035\uffa1\037\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\047\uffa1\050\uffa1\056\uffa1\001\002\000\004" +
    "\042\315\001\002\000\042\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\010\uff9d\013\uff9d\014\uff9d\034\uff9d\035\uff9d\037\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\047\uff9d\050\uff9d\056\uff9d\001" +
    "\002\000\032\003\105\004\073\013\101\014\014\034\063" +
    "\035\106\041\100\042\uffb0\043\071\047\075\050\110\056" +
    "\107\001\002\000\004\042\320\001\002\000\042\003\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\010\uff9e\013\uff9e\014\uff9e\034" +
    "\uff9e\035\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e\047\uff9e" +
    "\050\uff9e\056\uff9e\001\002\000\010\013\322\024\257\025" +
    "\260\001\002\000\032\003\105\004\073\013\101\014\014" +
    "\034\063\035\106\041\100\042\uffb0\043\071\047\075\050" +
    "\110\056\107\001\002\000\004\042\324\001\002\000\042" +
    "\003\uff9f\004\uff9f\005\uff9f\006\uff9f\010\uff9f\013\uff9f\014" +
    "\uff9f\034\uff9f\035\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\047\uff9f\050\uff9f\056\uff9f\001\002\000\010\003\330\050" +
    "\331\051\327\001\002\000\010\003\330\050\331\051\327" +
    "\001\002\000\006\033\uff46\044\uff72\001\002\000\006\033" +
    "\uff44\044\uff70\001\002\000\006\033\uff47\044\uff71\001\002" +
    "\000\004\033\uff45\001\002\000\004\033\334\001\002\000" +
    "\042\003\uff49\004\uff49\005\uff49\006\uff49\010\uff49\013\uff49" +
    "\014\uff49\034\uff49\035\uff49\037\uff49\041\uff49\042\uff49\043" +
    "\uff49\047\uff49\050\uff49\056\uff49\001\002\000\004\033\336" +
    "\001\002\000\042\003\uff48\004\uff48\005\uff48\006\uff48\010" +
    "\uff48\013\uff48\014\uff48\034\uff48\035\uff48\037\uff48\041\uff48" +
    "\042\uff48\043\uff48\047\uff48\050\uff48\056\uff48\001\002\000" +
    "\014\005\uffb7\006\uffb7\010\uffb7\037\uffb7\042\uffb7\001\002" +
    "\000\020\007\u010c\011\uff60\032\147\044\uff70\053\uff60\054" +
    "\uff60\055\uff60\001\002\000\012\003\342\007\343\024\257" +
    "\025\260\001\002\000\004\013\u0107\001\002\000\006\003" +
    "\344\013\345\001\002\000\036\003\105\004\073\005\uffb0" +
    "\006\uffb0\010\uffb0\013\101\014\014\034\063\035\106\041" +
    "\100\043\071\047\075\050\110\056\107\001\002\000\036" +
    "\003\105\004\073\005\uffb0\006\uffb0\010\uffb0\013\101\014" +
    "\014\034\063\035\106\041\100\043\071\047\075\050\110" +
    "\056\107\001\002\000\010\005\350\006\uffa6\010\351\001" +
    "\002\000\004\006\u0100\001\002\000\006\003\373\013\374" +
    "\001\002\000\024\003\352\020\127\021\133\026\252\032" +
    "\134\046\120\050\140\051\130\052\136\001\002\000\020" +
    "\007\367\011\uff60\032\147\044\uff70\053\uff60\054\uff60\055" +
    "\uff60\001\002\000\012\003\354\007\355\024\257\025\260" +
    "\001\002\000\004\013\364\001\002\000\006\003\356\013" +
    "\357\001\002\000\036\003\105\004\073\005\uffb0\006\uffb0" +
    "\010\uffb0\013\101\014\014\034\063\035\106\041\100\043" +
    "\071\047\075\050\110\056\107\001\002\000\036\003\105" +
    "\004\073\005\uffb0\006\uffb0\010\uffb0\013\101\014\014\034" +
    "\063\035\106\041\100\043\071\047\075\050\110\056\107" +
    "\001\002\000\010\005\350\006\uffa6\010\351\001\002\000" +
    "\004\006\uffa8\001\002\000\010\005\350\006\uffa6\010\351" +
    "\001\002\000\004\006\uffa3\001\002\000\036\003\105\004" +
    "\073\005\uffb0\006\uffb0\010\uffb0\013\101\014\014\034\063" +
    "\035\106\041\100\043\071\047\075\050\110\056\107\001" +
    "\002\000\010\005\350\006\uffa6\010\351\001\002\000\004" +
    "\006\uffa4\001\002\000\004\013\370\001\002\000\036\003" +
    "\105\004\073\005\uffb0\006\uffb0\010\uffb0\013\101\014\014" +
    "\034\063\035\106\041\100\043\071\047\075\050\110\056" +
    "\107\001\002\000\010\005\350\006\uffa6\010\351\001\002" +
    "\000\004\006\uffa5\001\002\000\010\005\350\006\uffa6\010" +
    "\351\001\002\000\036\003\105\004\073\005\uffb0\006\uffb0" +
    "\010\uffb0\013\101\014\014\034\063\035\106\041\100\043" +
    "\071\047\075\050\110\056\107\001\002\000\010\005\350" +
    "\006\uffa6\010\351\001\002\000\004\006\uffa7\001\002\000" +
    "\004\006\uffa2\001\002\000\006\003\u0101\004\u0102\001\002" +
    "\000\042\003\uffa9\004\uffa9\005\uffa9\006\uffa9\010\uffa9\013" +
    "\uffa9\014\uffa9\034\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\047\uffa9\050\uffa9\056\uffa9\001\002\000\042\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\010\uffad\013\uffad\014\uffad" +
    "\034\uffad\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad\047" +
    "\uffad\050\uffad\056\uffad\001\002\000\010\005\350\006\uffa6" +
    "\010\351\001\002\000\004\006\u0105\001\002\000\004\004" +
    "\u0106\001\002\000\042\003\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\010\uffaa\013\uffaa\014\uffaa\034\uffaa\035\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\047\uffaa\050\uffaa\056\uffaa\001\002" +
    "\000\036\003\105\004\073\005\uffb0\006\uffb0\010\uffb0\013" +
    "\101\014\014\034\063\035\106\041\100\043\071\047\075" +
    "\050\110\056\107\001\002\000\010\005\350\006\uffa6\010" +
    "\351\001\002\000\004\006\u010a\001\002\000\004\004\u010b" +
    "\001\002\000\042\003\uffab\004\uffab\005\uffab\006\uffab\010" +
    "\uffab\013\uffab\014\uffab\034\uffab\035\uffab\037\uffab\041\uffab" +
    "\042\uffab\043\uffab\047\uffab\050\uffab\056\uffab\001\002\000" +
    "\004\013\u010d\001\002\000\036\003\105\004\073\005\uffb0" +
    "\006\uffb0\010\uffb0\013\101\014\014\034\063\035\106\041" +
    "\100\043\071\047\075\050\110\056\107\001\002\000\010" +
    "\005\350\006\uffa6\010\351\001\002\000\004\006\u0110\001" +
    "\002\000\004\004\u0111\001\002\000\042\003\uffac\004\uffac" +
    "\005\uffac\006\uffac\010\uffac\013\uffac\014\uffac\034\uffac\035" +
    "\uffac\037\uffac\041\uffac\042\uffac\043\uffac\047\uffac\050\uffac" +
    "\056\uffac\001\002\000\004\045\u0113\001\002\000\050\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\031\uffbe\034\uffbe\035\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\045\uffbe\047\uffbe\050\uffbe\056\uffbe\001\002" +
    "\000\042\003\uff97\004\uff97\005\uff97\006\uff97\010\uff97\013" +
    "\uff97\014\uff97\034\uff97\035\uff97\037\uff97\041\uff97\042\uff97" +
    "\043\uff97\047\uff97\050\uff97\056\uff97\001\002\000\014\005" +
    "\uffba\006\uffba\010\uffba\037\uffba\042\uffba\001\002\000\014" +
    "\005\uffb5\006\uffb5\010\uffb5\037\uffb5\042\uffb5\001\002\000" +
    "\014\005\uffb1\006\uffb1\010\uffb1\037\uffb1\042\uffb1\001\002" +
    "\000\014\005\uffb6\006\uffb6\010\uffb6\037\uffb6\042\uffb6\001" +
    "\002\000\042\003\105\004\073\005\uffb0\006\uffb0\010\uffb0" +
    "\013\101\014\014\034\063\035\106\037\uffb0\041\100\042" +
    "\uffb0\043\071\047\075\050\110\056\107\001\002\000\014" +
    "\005\uffb8\006\uffb8\010\uffb8\037\uffb8\042\uffb8\001\002\000" +
    "\014\003\u0122\017\060\022\055\023\057\050\056\001\002" +
    "\000\012\017\060\022\055\023\057\050\056\001\002\000" +
    "\004\013\u011e\001\002\000\032\003\105\004\073\006\uffb0" +
    "\013\101\014\014\034\063\035\106\041\100\043\071\047" +
    "\075\050\110\056\107\001\002\000\004\006\u0120\001\002" +
    "\000\004\045\u0121\001\002\000\050\003\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\031\uffbd" +
    "\034\uffbd\035\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\056\uffbd\001\002\000\004\013\u012c" +
    "\001\002\000\006\003\u0124\013\u0125\001\002\000\032\003" +
    "\105\004\073\006\uffb0\013\101\014\014\034\063\035\106" +
    "\041\100\043\071\047\075\050\110\056\107\001\002\000" +
    "\032\003\105\004\073\006\uffb0\013\101\014\014\034\063" +
    "\035\106\041\100\043\071\047\075\050\110\056\107\001" +
    "\002\000\004\006\u0127\001\002\000\004\045\u0128\001\002" +
    "\000\050\003\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\031\uffc1\034\uffc1\035\uffc1\037\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\045\uffc1\047\uffc1\050\uffc1\056" +
    "\uffc1\001\002\000\004\006\u012a\001\002\000\004\045\u012b" +
    "\001\002\000\050\003\uffbb\004\uffbb\005\uffbb\006\uffbb\010" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\031\uffbb\034\uffbb\035\uffbb" +
    "\037\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\056\uffbb\001\002\000\032\003\105\004\073\006\uffb0" +
    "\013\101\014\014\034\063\035\106\041\100\043\071\047" +
    "\075\050\110\056\107\001\002\000\004\006\u012e\001\002" +
    "\000\004\045\u012f\001\002\000\050\003\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\031\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\047\uffbc\050\uffbc\056\uffbc\001\002\000\004\050\u0136" +
    "\001\002\000\012\017\060\022\055\023\057\050\056\001" +
    "\002\000\052\003\uff56\004\uff56\005\uff56\006\uff56\010\uff56" +
    "\012\uff56\013\uff56\014\uff56\031\uff56\033\uff56\034\uff56\035" +
    "\uff56\037\uff56\041\uff56\042\uff56\043\uff56\045\uff56\047\uff56" +
    "\050\uff56\056\uff56\001\002\000\054\003\uff57\004\uff57\005" +
    "\uff57\006\uff57\010\uff57\012\uff57\013\uff57\014\uff57\015\u0134" +
    "\031\uff57\033\uff57\034\uff57\035\uff57\037\uff57\041\uff57\042" +
    "\uff57\043\uff57\045\uff57\047\uff57\050\uff57\056\uff57\001\002" +
    "\000\004\050\047\001\002\000\052\003\uff58\004\uff58\005" +
    "\uff58\006\uff58\010\uff58\012\uff58\013\uff58\014\uff58\031\uff58" +
    "\033\uff58\034\uff58\035\uff58\037\uff58\041\uff58\042\uff58\043" +
    "\uff58\045\uff58\047\uff58\050\uff58\056\uff58\001\002\000\010" +
    "\003\uff55\015\uff55\016\uff55\001\002\000\004\033\u0138\001" +
    "\002\000\004\016\u0139\001\002\000\012\017\060\022\055" +
    "\023\057\050\056\001\002\000\004\013\u013b\001\002\000" +
    "\032\003\105\004\073\006\uffb0\013\101\014\014\034\063" +
    "\035\106\041\100\043\071\047\075\050\110\056\107\001" +
    "\002\000\004\006\u013d\001\002\000\004\045\u013e\001\002" +
    "\000\050\003\uffbf\004\uffbf\005\uffbf\006\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\031\uffbf\034\uffbf\035\uffbf\037\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\045\uffbf\047\uffbf\050\uffbf\056" +
    "\uffbf\001\002\000\006\033\uff80\050\047\001\002\000\004" +
    "\033\u0141\001\002\000\004\016\u0142\001\002\000\012\017" +
    "\060\022\055\023\057\050\056\001\002\000\004\013\u0144" +
    "\001\002\000\032\003\105\004\073\006\uffb0\013\101\014" +
    "\014\034\063\035\106\041\100\043\071\047\075\050\110" +
    "\056\107\001\002\000\004\006\u0146\001\002\000\004\045" +
    "\u0147\001\002\000\050\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\010\uffc0\012\uffc0\013\uffc0\014\uffc0\031\uffc0\034\uffc0\035" +
    "\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\047\uffc0" +
    "\050\uffc0\056\uffc0\001\002\000\004\032\u01dd\001\002\000" +
    "\006\003\u014a\032\u014b\001\002\000\006\033\uff80\050\047" +
    "\001\002\000\010\003\uff80\033\uff80\050\047\001\002\000" +
    "\006\003\u014e\033\u014d\001\002\000\006\003\u01cf\013\u01d0" +
    "\001\002\000\004\013\u014f\001\002\000\030\003\u015b\004" +
    "\u0154\006\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156" +
    "\047\075\050\110\056\107\001\002\000\004\031\u01cd\001" +
    "\002\000\040\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8" +
    "\013\u0157\014\014\034\u0150\035\u015c\037\uffd8\041\u0156\042" +
    "\uffd8\047\075\050\110\056\107\001\002\000\040\003\u015b" +
    "\004\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157\014\014\034" +
    "\u0150\035\u015c\037\uffd8\041\u0156\042\uffd8\047\075\050\110" +
    "\056\107\001\002\000\040\003\u015b\004\u0154\005\uffd8\006" +
    "\uffd8\010\uffd8\013\u0157\014\014\034\u0150\035\u015c\037\uffd8" +
    "\041\u0156\042\uffd8\047\075\050\110\056\107\001\002\000" +
    "\024\003\u0199\020\127\021\133\026\252\032\134\046\120" +
    "\050\140\051\130\052\136\001\002\000\040\003\u015b\004" +
    "\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157\014\014\034\u0150" +
    "\035\u015c\037\uffd8\041\u0156\042\uffd8\047\075\050\110\056" +
    "\107\001\002\000\006\003\u0187\040\u0188\001\002\000\040" +
    "\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157\014" +
    "\014\034\u0150\035\u015c\037\uffd8\041\u0156\042\uffd8\047\075" +
    "\050\110\056\107\001\002\000\040\003\u015b\004\u0154\005" +
    "\uffd8\006\uffd8\010\uffd8\013\u0157\014\014\034\u0150\035\u015c" +
    "\037\uffd8\041\u0156\042\uffd8\047\075\050\110\056\107\001" +
    "\002\000\040\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8" +
    "\013\u0157\014\014\034\u0150\035\u015c\037\uffd8\041\u0156\042" +
    "\uffd8\047\075\050\110\056\107\001\002\000\004\006\u0182" +
    "\001\002\000\054\003\u0177\004\u0154\005\uffd8\006\uffd8\010" +
    "\uffd8\011\222\013\u0157\014\014\031\u0175\032\147\034\u0150" +
    "\035\u015c\037\uffd8\040\u0174\041\u0156\042\uffd8\047\075\050" +
    "\247\053\112\054\116\056\107\001\002\000\006\003\u015f" +
    "\050\202\001\002\000\040\003\u015b\004\u0154\005\uffd8\006" +
    "\uffd8\010\uffd8\013\u0157\014\014\034\u0150\035\u015c\037\uffd8" +
    "\041\u0156\042\uffd8\047\075\050\110\056\107\001\002\000" +
    "\014\005\uffdd\006\uffdd\010\uffdd\037\uffdd\042\uffdd\001\002" +
    "\000\014\011\222\016\230\036\u016e\053\112\054\116\001" +
    "\002\000\006\003\u0162\036\u0161\001\002\000\012\003\145" +
    "\032\134\050\146\052\136\001\002\000\012\003\145\032" +
    "\134\050\146\052\136\001\002\000\006\013\u0164\053\143" +
    "\001\002\000\030\003\u015b\004\u0154\013\u0157\014\014\034" +
    "\u0150\035\u015c\037\uffd8\041\u0156\047\075\050\110\056\107" +
    "\001\002\000\004\037\u0166\001\002\000\040\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\010\uffc3\013\uffc3\014\uffc3\034\uffc3" +
    "\035\uffc3\037\uffc3\041\uffc3\042\uffc3\047\uffc3\050\uffc3\056" +
    "\uffc3\001\002\000\010\003\u0168\013\u0169\053\143\001\002" +
    "\000\030\003\u015b\004\u0154\013\u0157\014\014\034\u0150\035" +
    "\u015c\037\uffd8\041\u0156\047\075\050\110\056\107\001\002" +
    "\000\030\003\u015b\004\u0154\013\u0157\014\014\034\u0150\035" +
    "\u015c\037\uffd8\041\u0156\047\075\050\110\056\107\001\002" +
    "\000\004\037\u016b\001\002\000\040\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\010\uffc6\013\uffc6\014\uffc6\034\uffc6\035\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\047\uffc6\050\uffc6\056\uffc6\001" +
    "\002\000\004\037\u016d\001\002\000\040\003\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\010\uffc2\013\uffc2\014\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\041\uffc2\042\uffc2\047\uffc2\050\uffc2\056\uffc2" +
    "\001\002\000\012\003\145\032\134\050\146\052\136\001" +
    "\002\000\006\013\u0170\053\143\001\002\000\030\003\u015b" +
    "\004\u0154\013\u0157\014\014\034\u0150\035\u015c\037\uffd8\041" +
    "\u0156\047\075\050\110\056\107\001\002\000\004\037\u0172" +
    "\001\002\000\040\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010" +
    "\uffc4\013\uffc4\014\uffc4\034\uffc4\035\uffc4\037\uffc4\041\uffc4" +
    "\042\uffc4\047\uffc4\050\uffc4\056\uffc4\001\002\000\004\036" +
    "\u017d\001\002\000\024\003\135\020\127\021\133\026\252" +
    "\032\134\046\120\050\140\051\130\052\136\001\002\000" +
    "\040\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157" +
    "\014\014\034\u0150\035\u015c\037\uffd8\041\u0156\042\uffd8\047" +
    "\075\050\110\056\107\001\002\000\014\005\uffda\006\uffda" +
    "\010\uffda\037\uffda\042\uffda\001\002\000\056\003\u0177\004" +
    "\u0154\005\uffd8\006\uffd8\010\uffd8\011\222\013\u0157\014\014" +
    "\016\230\031\u0175\032\147\034\u0150\035\u015c\037\uffd8\040" +
    "\u0174\041\u0156\042\uffd8\047\075\050\247\053\112\054\116" +
    "\056\107\001\002\000\014\005\uffd9\006\uffd9\010\uffd9\037" +
    "\uffd9\042\uffd9\001\002\000\010\013\u017a\024\257\025\260" +
    "\001\002\000\030\003\u015b\004\u0154\013\u0157\014\014\034" +
    "\u0150\035\u015c\041\u0156\042\uffd8\047\075\050\110\056\107" +
    "\001\002\000\004\042\u017c\001\002\000\040\003\uffca\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\013\uffca\014\uffca\034\uffca" +
    "\035\uffca\037\uffca\041\uffca\042\uffca\047\uffca\050\uffca\056" +
    "\uffca\001\002\000\012\003\145\032\134\050\146\052\136" +
    "\001\002\000\006\013\u017f\053\143\001\002\000\030\003" +
    "\u015b\004\u0154\013\u0157\014\014\034\u0150\035\u015c\037\uffd8" +
    "\041\u0156\047\075\050\110\056\107\001\002\000\004\037" +
    "\u0181\001\002\000\040\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\010\uffc5\013\uffc5\014\uffc5\034\uffc5\035\uffc5\037\uffc5\041" +
    "\uffc5\042\uffc5\047\uffc5\050\uffc5\056\uffc5\001\002\000\004" +
    "\031\u0183\001\002\000\014\012\uffe5\013\uffe5\014\uffe5\031" +
    "\uffe5\045\uffe5\001\002\000\014\005\uffde\006\uffde\010\uffde" +
    "\037\uffde\042\uffde\001\002\000\014\005\uffdb\006\uffdb\010" +
    "\uffdb\037\uffdb\042\uffdb\001\002\000\014\005\uffe2\006\uffe2" +
    "\010\uffe2\037\uffe2\042\uffe2\001\002\000\024\003\135\020" +
    "\127\021\133\026\252\032\134\046\120\050\140\051\130" +
    "\052\136\001\002\000\024\003\u0189\020\127\021\133\026" +
    "\252\032\134\046\120\050\140\051\130\052\136\001\002" +
    "\000\020\011\uff60\013\u0191\032\147\044\uff70\053\uff60\054" +
    "\uff60\055\uff60\001\002\000\012\003\u018b\013\u018c\024\257" +
    "\025\260\001\002\000\030\003\u015b\004\u0154\013\u0157\014" +
    "\014\034\u0150\035\u015c\041\u0156\042\uffd8\047\075\050\110" +
    "\056\107\001\002\000\030\003\u015b\004\u0154\013\u0157\014" +
    "\014\034\u0150\035\u015c\041\u0156\042\uffd8\047\075\050\110" +
    "\056\107\001\002\000\004\042\u018e\001\002\000\040\003" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\013\uffcb\014\uffcb" +
    "\034\uffcb\035\uffcb\037\uffcb\041\uffcb\042\uffcb\047\uffcb\050" +
    "\uffcb\056\uffcb\001\002\000\004\042\u0190\001\002\000\040" +
    "\003\uffc7\004\uffc7\005\uffc7\006\uffc7\010\uffc7\013\uffc7\014" +
    "\uffc7\034\uffc7\035\uffc7\037\uffc7\041\uffc7\042\uffc7\047\uffc7" +
    "\050\uffc7\056\uffc7\001\002\000\030\003\u015b\004\u0154\013" +
    "\u0157\014\014\034\u0150\035\u015c\041\u0156\042\uffd8\047\075" +
    "\050\110\056\107\001\002\000\004\042\u0193\001\002\000" +
    "\040\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8\013\uffc8" +
    "\014\uffc8\034\uffc8\035\uffc8\037\uffc8\041\uffc8\042\uffc8\047" +
    "\uffc8\050\uffc8\056\uffc8\001\002\000\010\013\u0195\024\257" +
    "\025\260\001\002\000\030\003\u015b\004\u0154\013\u0157\014" +
    "\014\034\u0150\035\u015c\041\u0156\042\uffd8\047\075\050\110" +
    "\056\107\001\002\000\004\042\u0197\001\002\000\040\003" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9\013\uffc9\014\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\047\uffc9\050" +
    "\uffc9\056\uffc9\001\002\000\014\005\uffe0\006\uffe0\010\uffe0" +
    "\037\uffe0\042\uffe0\001\002\000\020\007\u01c4\011\uff60\032" +
    "\147\044\uff70\053\uff60\054\uff60\055\uff60\001\002\000\012" +
    "\003\u019b\007\u019c\024\257\025\260\001\002\000\004\013" +
    "\u01bf\001\002\000\006\003\u019d\013\u019e\001\002\000\034" +
    "\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157\014" +
    "\014\034\u0150\035\u015c\041\u0156\047\075\050\110\056\107" +
    "\001\002\000\034\003\u015b\004\u0154\005\uffd8\006\uffd8\010" +
    "\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156\047\075" +
    "\050\110\056\107\001\002\000\010\005\u01a0\006\uffd0\010" +
    "\u01a1\001\002\000\006\003\u01b7\013\u01b8\001\002\000\024" +
    "\003\u01a6\020\127\021\133\026\252\032\134\046\120\050" +
    "\140\051\130\052\136\001\002\000\004\006\u01a3\001\002" +
    "\000\006\003\u01a4\004\u01a5\001\002\000\040\003\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\010\uffd3\013\uffd3\014\uffd3\034\uffd3" +
    "\035\uffd3\037\uffd3\041\uffd3\042\uffd3\047\uffd3\050\uffd3\056" +
    "\uffd3\001\002\000\040\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\010\uffd7\013\uffd7\014\uffd7\034\uffd7\035\uffd7\037\uffd7\041" +
    "\uffd7\042\uffd7\047\uffd7\050\uffd7\056\uffd7\001\002\000\020" +
    "\007\u01b3\011\uff60\032\147\044\uff70\053\uff60\054\uff60\055" +
    "\uff60\001\002\000\012\003\u01a9\007\u01a8\024\257\025\260" +
    "\001\002\000\006\003\u01ad\013\u01ae\001\002\000\004\013" +
    "\u01aa\001\002\000\034\003\u015b\004\u0154\005\uffd8\006\uffd8" +
    "\010\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156\047" +
    "\075\050\110\056\107\001\002\000\010\005\u01a0\006\uffd0" +
    "\010\u01a1\001\002\000\004\006\uffce\001\002\000\034\003" +
    "\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8\013\u0157\014\014" +
    "\034\u0150\035\u015c\041\u0156\047\075\050\110\056\107\001" +
    "\002\000\034\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8" +
    "\013\u0157\014\014\034\u0150\035\u015c\041\u0156\047\075\050" +
    "\110\056\107\001\002\000\010\005\u01a0\006\uffd0\010\u01a1" +
    "\001\002\000\004\006\uffd2\001\002\000\010\005\u01a0\006" +
    "\uffd0\010\u01a1\001\002\000\004\006\uffcd\001\002\000\004" +
    "\013\u01b4\001\002\000\034\003\u015b\004\u0154\005\uffd8\006" +
    "\uffd8\010\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156" +
    "\047\075\050\110\056\107\001\002\000\010\005\u01a0\006" +
    "\uffd0\010\u01a1\001\002\000\004\006\uffcf\001\002\000\030" +
    "\003\u015b\004\u0154\006\uffd8\013\u0157\014\014\034\u0150\035" +
    "\u015c\041\u0156\047\075\050\110\056\107\001\002\000\030" +
    "\003\u015b\004\u0154\006\uffd8\013\u0157\014\014\034\u0150\035" +
    "\u015c\041\u0156\047\075\050\110\056\107\001\002\000\004" +
    "\006\uffd1\001\002\000\004\006\uffcc\001\002\000\010\005" +
    "\u01a0\006\uffd0\010\u01a1\001\002\000\004\006\u01bd\001\002" +
    "\000\004\004\u01be\001\002\000\040\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\010\uffd4\013\uffd4\014\uffd4\034\uffd4\035\uffd4" +
    "\037\uffd4\041\uffd4\042\uffd4\047\uffd4\050\uffd4\056\uffd4\001" +
    "\002\000\034\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8" +
    "\013\u0157\014\014\034\u0150\035\u015c\041\u0156\047\075\050" +
    "\110\056\107\001\002\000\010\005\u01a0\006\uffd0\010\u01a1" +
    "\001\002\000\004\006\u01c2\001\002\000\004\004\u01c3\001" +
    "\002\000\040\003\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5" +
    "\013\uffd5\014\uffd5\034\uffd5\035\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\047\uffd5\050\uffd5\056\uffd5\001\002\000\004\013\u01c5" +
    "\001\002\000\034\003\u015b\004\u0154\005\uffd8\006\uffd8\010" +
    "\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156\047\075" +
    "\050\110\056\107\001\002\000\010\005\u01a0\006\uffd0\010" +
    "\u01a1\001\002\000\004\006\u01c8\001\002\000\004\004\u01c9" +
    "\001\002\000\040\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\013\uffd6\014\uffd6\034\uffd6\035\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\047\uffd6\050\uffd6\056\uffd6\001\002\000\014\005" +
    "\uffdc\006\uffdc\010\uffdc\037\uffdc\042\uffdc\001\002\000\014" +
    "\005\uffe3\006\uffe3\010\uffe3\037\uffe3\042\uffe3\001\002\000" +
    "\014\005\uffdf\006\uffdf\010\uffdf\037\uffdf\042\uffdf\001\002" +
    "\000\040\003\u015b\004\u0154\005\uffd8\006\uffd8\010\uffd8\013" +
    "\u0157\014\014\034\u0150\035\u015c\037\uffd8\041\u0156\042\uffd8" +
    "\047\075\050\110\056\107\001\002\000\014\005\uffe1\006" +
    "\uffe1\010\uffe1\037\uffe1\042\uffe1\001\002\000\030\003\u015b" +
    "\004\u0154\006\uffd8\013\u0157\014\014\034\u0150\035\u015c\041" +
    "\u0156\047\075\050\110\056\107\001\002\000\030\003\u015b" +
    "\004\u0154\006\uffd8\013\u0157\014\014\034\u0150\035\u015c\041" +
    "\u0156\047\075\050\110\056\107\001\002\000\004\006\u01d2" +
    "\001\002\000\004\031\u01d3\001\002\000\014\012\uffe8\013" +
    "\uffe8\014\uffe8\031\uffe8\045\uffe8\001\002\000\004\006\u01d5" +
    "\001\002\000\004\031\u01d6\001\002\000\014\012\uffe4\013" +
    "\uffe4\014\uffe4\031\uffe4\045\uffe4\001\002\000\004\033\u01d8" +
    "\001\002\000\004\013\u01d9\001\002\000\030\003\u015b\004" +
    "\u0154\006\uffd8\013\u0157\014\014\034\u0150\035\u015c\041\u0156" +
    "\047\075\050\110\056\107\001\002\000\004\006\u01db\001" +
    "\002\000\004\031\u01dc\001\002\000\014\012\uffe6\013\uffe6" +
    "\014\uffe6\031\uffe6\045\uffe6\001\002\000\006\033\uff80\050" +
    "\047\001\002\000\004\033\u01df\001\002\000\004\013\u01e0" +
    "\001\002\000\030\003\u015b\004\u0154\006\uffd8\013\u0157\014" +
    "\014\034\u0150\035\u015c\041\u0156\047\075\050\110\056\107" +
    "\001\002\000\004\006\u01e2\001\002\000\004\031\u01e3\001" +
    "\002\000\014\012\uffe7\013\uffe7\014\uffe7\031\uffe7\045\uffe7" +
    "\001\002\000\004\013\u01f5\001\002\000\006\003\u01e6\013" +
    "\u01e7\001\002\000\006\013\u01e9\014\014\001\002\000\006" +
    "\013\u01e9\014\014\001\002\000\010\006\u01f0\013\u01e9\014" +
    "\014\001\002\000\010\006\uffe9\013\u01e9\014\014\001\002" +
    "\000\004\006\u01eb\001\002\000\004\012\u01ec\001\002\000" +
    "\014\012\uffef\013\uffef\014\uffef\031\uffef\045\uffef\001\002" +
    "\000\006\013\u01e9\014\014\001\002\000\004\006\uffea\001" +
    "\002\000\004\006\uffeb\001\002\000\004\003\u01f1\001\002" +
    "\000\014\012\uffec\013\uffec\014\uffec\031\uffec\045\uffec\001" +
    "\002\000\004\006\u01f3\001\002\000\004\012\u01f4\001\002" +
    "\000\014\012\uffed\013\uffed\014\uffed\031\uffed\045\uffed\001" +
    "\002\000\006\013\u01e9\014\014\001\002\000\004\006\u01f7" +
    "\001\002\000\004\012\u01f8\001\002\000\014\012\uffee\013" +
    "\uffee\014\uffee\031\uffee\045\uffee\001\002\000\006\003\ufff9" +
    "\006\ufff9\001\002\000\006\003\ufffa\006\ufffa\001\002\000" +
    "\006\003\ufff8\006\ufff8\001\002\000\004\030\u0200\001\002" +
    "\000\006\003\u01fe\030\u01ff\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffc\001\002" +
    "\000\050\003\uff5f\004\uff5f\005\uff5f\006\uff5f\010\uff5f\012" +
    "\uff5f\013\uff5f\014\uff5f\031\uff5f\034\uff5f\035\uff5f\037\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\045\uff5f\047\uff5f\050\uff5f\056" +
    "\uff5f\001\002\000\050\003\uff5e\004\uff5e\005\uff5e\006\uff5e" +
    "\010\uff5e\012\uff5e\013\uff5e\014\uff5e\031\uff5e\034\uff5e\035" +
    "\uff5e\037\uff5e\041\uff5e\042\uff5e\043\uff5e\045\uff5e\047\uff5e" +
    "\050\uff5e\056\uff5e\001\002\000\006\015\u0204\016\u0205\001" +
    "\002\000\004\050\047\001\002\000\012\017\u020a\022\u0206" +
    "\023\u0209\050\u0208\001\002\000\054\003\uff4d\004\uff4d\005" +
    "\uff4d\006\uff4d\010\uff4d\011\u0219\012\uff4d\013\uff4d\014\uff4d" +
    "\015\uff4d\031\uff4d\034\uff4d\035\uff4d\037\uff4d\041\uff4d\042" +
    "\uff4d\043\uff4d\045\uff4d\047\uff4d\050\uff4d\056\uff4d\001\002" +
    "\000\050\003\uff5d\004\uff5d\005\uff5d\006\uff5d\010\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\031\uff5d\034\uff5d\035\uff5d\037\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\045\uff5d\047\uff5d\050\uff5d\056" +
    "\uff5d\001\002\000\054\003\uff4a\004\uff4a\005\uff4a\006\uff4a" +
    "\010\uff4a\011\u0214\012\uff4a\013\uff4a\014\uff4a\015\uff4a\031" +
    "\uff4a\034\uff4a\035\uff4a\037\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\045\uff4a\047\uff4a\050\uff4a\056\uff4a\001\002\000\054\003" +
    "\uff4c\004\uff4c\005\uff4c\006\uff4c\010\uff4c\011\u0211\012\uff4c" +
    "\013\uff4c\014\uff4c\015\uff4c\031\uff4c\034\uff4c\035\uff4c\037" +
    "\uff4c\041\uff4c\042\uff4c\043\uff4c\045\uff4c\047\uff4c\050\uff4c" +
    "\056\uff4c\001\002\000\054\003\uff4b\004\uff4b\005\uff4b\006" +
    "\uff4b\010\uff4b\011\u020e\012\uff4b\013\uff4b\014\uff4b\015\uff4b" +
    "\031\uff4b\034\uff4b\035\uff4b\037\uff4b\041\uff4b\042\uff4b\043" +
    "\uff4b\045\uff4b\047\uff4b\050\uff4b\056\uff4b\001\002\000\052" +
    "\003\uff59\004\uff59\005\uff59\006\uff59\010\uff59\012\uff59\013" +
    "\uff59\014\uff59\015\u020c\031\uff59\034\uff59\035\uff59\037\uff59" +
    "\041\uff59\042\uff59\043\uff59\045\uff59\047\uff59\050\uff59\056" +
    "\uff59\001\002\000\004\050\047\001\002\000\050\003\uff5c" +
    "\004\uff5c\005\uff5c\006\uff5c\010\uff5c\012\uff5c\013\uff5c\014" +
    "\uff5c\031\uff5c\034\uff5c\035\uff5c\037\uff5c\041\uff5c\042\uff5c" +
    "\043\uff5c\045\uff5c\047\uff5c\050\uff5c\056\uff5c\001\002\000" +
    "\006\020\u020f\021\u0210\001\002\000\050\003\uff51\004\uff51" +
    "\005\uff51\006\uff51\010\uff51\012\uff51\013\uff51\014\uff51\031" +
    "\uff51\034\uff51\035\uff51\037\uff51\041\uff51\042\uff51\043\uff51" +
    "\045\uff51\047\uff51\050\uff51\056\uff51\001\002\000\050\003" +
    "\uff50\004\uff50\005\uff50\006\uff50\010\uff50\012\uff50\013\uff50" +
    "\014\uff50\031\uff50\034\uff50\035\uff50\037\uff50\041\uff50\042" +
    "\uff50\043\uff50\045\uff50\047\uff50\050\uff50\056\uff50\001\002" +
    "\000\010\003\156\050\157\051\u0212\001\002\000\052\003" +
    "\uff52\004\uff52\005\uff52\006\uff52\010\uff52\012\uff52\013\uff52" +
    "\014\uff52\031\uff52\034\uff52\035\uff52\037\uff52\041\uff52\042" +
    "\uff52\043\uff52\044\uff72\045\uff52\047\uff52\050\uff52\056\uff52" +
    "\001\002\000\050\003\uff4f\004\uff4f\005\uff4f\006\uff4f\010" +
    "\uff4f\012\uff4f\013\uff4f\014\uff4f\031\uff4f\034\uff4f\035\uff4f" +
    "\037\uff4f\041\uff4f\042\uff4f\043\uff4f\045\uff4f\047\uff4f\050" +
    "\uff4f\056\uff4f\001\002\000\004\027\u0215\001\002\000\006" +
    "\003\u0216\050\u0217\001\002\000\004\032\147\001\002\000" +
    "\004\032\115\001\002\000\050\003\uff4e\004\uff4e\005\uff4e" +
    "\006\uff4e\010\uff4e\012\uff4e\013\uff4e\014\uff4e\031\uff4e\034" +
    "\uff4e\035\uff4e\037\uff4e\041\uff4e\042\uff4e\043\uff4e\045\uff4e" +
    "\047\uff4e\050\uff4e\056\uff4e\001\002\000\012\003\145\032" +
    "\134\050\146\052\136\001\002\000\052\003\uff53\004\uff53" +
    "\005\uff53\006\uff53\010\uff53\012\uff53\013\uff53\014\uff53\031" +
    "\uff53\034\uff53\035\uff53\037\uff53\041\uff53\042\uff53\043\uff53" +
    "\045\uff53\047\uff53\050\uff53\053\143\056\uff53\001\002\000" +
    "\006\015\u0130\016\u021c\001\002\000\012\017\060\022\055" +
    "\023\057\050\056\001\002\000\052\003\uff5a\004\uff5a\005" +
    "\uff5a\006\uff5a\010\uff5a\012\uff5a\013\uff5a\014\uff5a\015\u021e" +
    "\031\uff5a\034\uff5a\035\uff5a\037\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\045\uff5a\047\uff5a\050\uff5a\056\uff5a\001\002\000\004" +
    "\050\047\001\002\000\050\003\uff5b\004\uff5b\005\uff5b\006" +
    "\uff5b\010\uff5b\012\uff5b\013\uff5b\014\uff5b\031\uff5b\034\uff5b" +
    "\035\uff5b\037\uff5b\041\uff5b\042\uff5b\043\uff5b\045\uff5b\047" +
    "\uff5b\050\uff5b\056\uff5b\001\002\000\004\006\u0221\001\002" +
    "\000\004\030\u0222\001\002\000\004\002\ufffd\001\002\000" +
    "\014\012\021\013\020\014\014\031\022\045\023\001\002" +
    "\000\004\006\u0225\001\002\000\004\030\u0226\001\002\000" +
    "\004\002\ufffe\001\002\000\004\013\u0228\001\002\000\014" +
    "\012\021\013\020\014\014\031\022\045\023\001\002\000" +
    "\004\006\u022a\001\002\000\004\030\u022b\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0229\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u021f\005\024\006" +
    "\015\017\016\050\023\001\001\000\014\003\014\005\024" +
    "\006\015\017\016\050\023\001\001\000\004\020\u0200\001" +
    "\001\000\002\001\001\000\014\003\u01fa\005\024\006\015" +
    "\017\016\050\023\001\001\000\014\003\u01f9\005\024\006" +
    "\015\017\016\050\023\001\001\000\014\003\u01f8\005\024" +
    "\006\015\017\016\050\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\040\005\024" +
    "\006\015\017\016\050\023\001\001\000\014\004\026\005" +
    "\032\006\025\017\027\050\031\001\001\000\014\004\037" +
    "\005\032\006\025\017\027\050\031\001\001\000\002\001" +
    "\001\000\014\004\036\005\032\006\025\017\027\050\031" +
    "\001\001\000\014\004\035\005\032\006\025\017\027\050" +
    "\031\001\001\000\014\004\034\005\032\006\025\017\027" +
    "\050\031\001\001\000\014\004\033\005\032\006\025\017" +
    "\027\050\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\047\016\045\035\u0136\001\001\000\010\015\047\016" +
    "\045\035\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\102\017\067\023\066\032\073" +
    "\033\076\034\064\041\063\045\101\047\071\051\075\054" +
    "\103\055\065\001\001\000\002\001\001\000\032\007\102" +
    "\017\067\023\066\032\073\033\076\034\064\041\063\045" +
    "\101\047\u0117\051\075\054\103\055\065\001\001\000\002" +
    "\001\001\000\032\007\102\017\067\023\066\032\073\033" +
    "\076\034\064\041\063\045\101\047\u0116\051\075\054\103" +
    "\055\065\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\u0115\051\075" +
    "\054\103\055\065\001\001\000\032\007\102\017\067\023" +
    "\066\032\073\033\076\034\064\041\063\045\101\047\u0114" +
    "\051\075\054\103\055\065\001\001\000\024\011\131\014" +
    "\140\021\124\022\123\023\122\026\u0113\027\125\030\141" +
    "\057\136\001\001\000\002\001\001\000\030\011\131\014" +
    "\140\021\124\022\123\023\122\027\252\030\255\036\253" +
    "\037\340\040\250\057\136\001\001\000\032\007\102\017" +
    "\067\023\066\032\073\033\076\034\064\041\063\045\101" +
    "\047\336\051\075\054\103\055\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\017\067\023\066\032\073\033\076\034" +
    "\064\041\063\045\101\047\302\051\075\054\103\055\065" +
    "\001\001\000\032\007\102\017\067\023\066\032\073\033" +
    "\076\034\064\041\063\045\101\047\301\051\075\054\103" +
    "\055\065\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\300\051\075" +
    "\054\103\055\065\001\001\000\032\007\102\017\067\023" +
    "\066\032\073\033\076\034\064\041\063\045\101\047\277" +
    "\051\075\054\103\055\065\001\001\000\040\006\244\007" +
    "\102\017\067\023\066\031\226\032\073\033\243\034\064" +
    "\041\063\045\101\047\242\051\075\054\103\055\065\056" +
    "\240\001\001\000\006\033\177\056\202\001\001\000\004" +
    "\031\173\001\001\000\004\031\110\001\001\000\014\014" +
    "\140\021\124\022\123\023\122\030\172\001\001\000\002" +
    "\001\001\000\014\014\140\021\124\022\123\023\122\030" +
    "\170\001\001\000\010\011\131\027\167\057\136\001\001" +
    "\000\030\011\131\014\140\021\124\022\123\023\122\024" +
    "\121\025\130\026\120\027\125\030\141\057\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\161\021\124\022\123\023" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\124\022\143\023\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\131\014\140\021\124\022\123\023\122\024\147\025\130" +
    "\026\120\027\125\030\141\057\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\152\023\122\001\001" +
    "\000\002\001\001\000\006\011\160\057\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\131\014\140\021\124\022\123\023\122" +
    "\026\165\027\125\030\141\057\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\140\021\124\022\123\023\122\030\176\001\001" +
    "\000\010\011\131\027\175\057\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\226" +
    "\001\001\000\004\031\110\001\001\000\002\001\001\000" +
    "\012\014\211\021\124\022\123\023\122\001\001\000\012" +
    "\014\205\021\124\022\123\023\122\001\001\000\002\001" +
    "\001\000\032\007\102\017\067\023\066\032\073\033\076" +
    "\034\064\041\063\045\101\047\207\051\075\054\103\055" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\102\017\067\023\066\032\073\033" +
    "\076\034\064\041\063\045\101\047\216\051\075\054\103" +
    "\055\065\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\214\051\075" +
    "\054\103\055\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\224\021" +
    "\124\022\123\023\122\001\001\000\002\001\001\000\012" +
    "\014\234\021\124\022\123\023\122\001\001\000\014\014" +
    "\140\021\124\022\123\023\122\030\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\232\021\124\022" +
    "\123\023\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\236\051\075" +
    "\054\103\055\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\131\014\140\021\124" +
    "\022\123\023\122\027\252\030\255\036\253\037\254\040" +
    "\250\057\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\017\067\023\066\032\073\033\076\034" +
    "\064\041\063\045\101\047\247\051\075\054\103\055\065" +
    "\001\001\000\040\006\244\007\102\017\067\023\066\031" +
    "\226\032\073\033\243\034\064\041\063\045\101\047\242" +
    "\051\075\054\103\055\065\056\240\001\001\000\004\031" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\131\014\140\021\124\022\123\023\122\027\252\030" +
    "\255\036\253\040\271\057\136\001\001\000\002\001\001" +
    "\000\004\061\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\131\014\140\021\124\022\123\023\122" +
    "\027\252\030\255\036\253\040\264\057\136\001\001\000" +
    "\026\011\131\014\140\021\124\022\123\023\122\027\252" +
    "\030\255\036\253\040\263\057\136\001\001\000\032\007" +
    "\102\017\067\023\066\032\073\033\076\034\064\041\063" +
    "\045\101\047\261\051\075\054\103\055\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\131\014\140\021" +
    "\124\022\123\023\122\027\252\030\255\036\270\057\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\273\021\124\022\123\023\122\001\001" +
    "\000\002\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\275\051\075" +
    "\054\103\055\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\131\014\140\021\124\022" +
    "\123\023\122\027\252\030\255\036\253\037\320\040\250" +
    "\057\136\001\001\000\030\011\131\014\140\021\124\022" +
    "\123\023\122\027\252\030\255\036\253\037\306\040\250" +
    "\057\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\102\017\067\023\066\032\073\033\076\034\064" +
    "\041\063\045\101\047\313\051\075\054\103\055\065\001" +
    "\001\000\032\007\102\017\067\023\066\032\073\033\076" +
    "\034\064\041\063\045\101\047\311\051\075\054\103\055" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\102\017\067\023" +
    "\066\032\073\033\076\034\064\041\063\045\101\047\316" +
    "\051\075\054\103\055\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\017\067" +
    "\023\066\032\073\033\076\034\064\041\063\045\101\047" +
    "\322\051\075\054\103\055\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\331\012\334\057\136\001" +
    "\001\000\010\011\331\012\332\057\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\102\017\067\023\066\032\073\033\076\034\064\041" +
    "\063\045\101\047\u0102\051\075\054\103\055\065\001\001" +
    "\000\032\007\102\017\067\023\066\032\073\033\076\034" +
    "\064\041\063\045\101\047\345\051\075\054\103\055\065" +
    "\001\001\000\004\042\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\131\014\140\021\124\022\123" +
    "\023\122\027\252\030\255\036\253\037\352\040\250\057" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\102\017\067\023" +
    "\066\032\073\033\076\034\064\041\063\045\101\047\361" +
    "\051\075\054\103\055\065\001\001\000\032\007\102\017" +
    "\067\023\066\032\073\033\076\034\064\041\063\045\101" +
    "\047\357\051\075\054\103\055\065\001\001\000\004\042" +
    "\360\001\001\000\002\001\001\000\004\042\362\001\001" +
    "\000\002\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\364\051\075" +
    "\054\103\055\065\001\001\000\004\042\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\017\067" +
    "\023\066\032\073\033\076\034\064\041\063\045\101\047" +
    "\370\051\075\054\103\055\065\001\001\000\004\042\371" +
    "\001\001\000\002\001\001\000\004\042\376\001\001\000" +
    "\032\007\102\017\067\023\066\032\073\033\076\034\064" +
    "\041\063\045\101\047\374\051\075\054\103\055\065\001" +
    "\001\000\004\042\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\102\017\067\023" +
    "\066\032\073\033\076\034\064\041\063\045\101\047\u0107" +
    "\051\075\054\103\055\065\001\001\000\004\042\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\102\017\067\023\066\032" +
    "\073\033\076\034\064\041\063\045\101\047\u010d\051\075" +
    "\054\103\055\065\001\001\000\004\042\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\017\067\023\066\032\073\033\076\034" +
    "\064\041\063\045\101\047\u0119\051\075\054\103\055\065" +
    "\001\001\000\002\001\001\000\004\060\u0122\001\001\000" +
    "\004\060\u011c\001\001\000\002\001\001\000\032\007\102" +
    "\017\067\023\066\032\073\033\076\034\064\041\063\045" +
    "\101\047\u011e\051\075\054\103\055\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\102\017\067\023\066" +
    "\032\073\033\076\034\064\041\063\045\101\047\u0128\051" +
    "\075\054\103\055\065\001\001\000\032\007\102\017\067" +
    "\023\066\032\073\033\076\034\064\041\063\045\101\047" +
    "\u0125\051\075\054\103\055\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\017\067" +
    "\023\066\032\073\033\076\034\064\041\063\045\101\047" +
    "\u012c\051\075\054\103\055\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u0132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\047\016\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u0139\001\001\000\002\001\001\000\032\007\102\017" +
    "\067\023\066\032\073\033\076\034\064\041\063\045\101" +
    "\047\u013b\051\075\054\103\055\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\047" +
    "\016\045\035\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u0142\001\001\000\002\001\001\000\032" +
    "\007\102\017\067\023\066\032\073\033\076\034\064\041" +
    "\063\045\101\047\u0144\051\075\054\103\055\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\047\016\045" +
    "\035\u01d6\001\001\000\010\015\047\016\045\035\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034" +
    "\064\044\u015c\046\u0159\051\075\052\u0152\053\u0157\001\001" +
    "\000\002\001\001\000\030\007\u0158\017\u0151\023\u0150\032" +
    "\u0154\033\076\034\064\044\u015c\046\u01cb\051\075\052\u0152" +
    "\053\u0157\001\001\000\030\007\u0158\017\u0151\023\u0150\032" +
    "\u0154\033\076\034\064\044\u015c\046\u01ca\051\075\052\u0152" +
    "\053\u0157\001\001\000\030\007\u0158\017\u0151\023\u0150\032" +
    "\u0154\033\076\034\064\044\u015c\046\u01c9\051\075\052\u0152" +
    "\053\u0157\001\001\000\030\011\131\014\140\021\124\022" +
    "\123\023\122\027\252\030\255\036\253\037\u0199\040\250" +
    "\057\136\001\001\000\030\007\u0158\017\u0151\023\u0150\032" +
    "\u0154\033\076\034\064\044\u015c\046\u0197\051\075\052\u0152" +
    "\053\u0157\001\001\000\002\001\001\000\030\007\u0158\017" +
    "\u0151\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u0185" +
    "\051\075\052\u0152\053\u0157\001\001\000\030\007\u0158\017" +
    "\u0151\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u0184" +
    "\051\075\052\u0152\053\u0157\001\001\000\030\007\u0158\017" +
    "\u0151\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u0183" +
    "\051\075\052\u0152\053\u0157\001\001\000\002\001\001\000" +
    "\034\007\u0158\017\u0151\023\u0150\031\226\032\u0154\033\243" +
    "\034\064\044\u015c\046\u0175\051\075\052\u0152\053\u0157\056" +
    "\u0172\001\001\000\006\033\177\056\u015f\001\001\000\030" +
    "\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034\064\044" +
    "\u015c\046\u015d\051\075\052\u0152\053\u0157\001\001\000\002" +
    "\001\001\000\004\031\226\001\001\000\002\001\001\000" +
    "\012\014\u0166\021\124\022\123\023\122\001\001\000\012" +
    "\014\u0162\021\124\022\123\023\122\001\001\000\002\001" +
    "\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033\076" +
    "\034\064\044\u015c\046\u0164\051\075\052\u0152\053\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034" +
    "\064\044\u015c\046\u016b\051\075\052\u0152\053\u0157\001\001" +
    "\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034" +
    "\064\044\u015c\046\u0169\051\075\052\u0152\053\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\u016e\021\124\022\123\023\122" +
    "\001\001\000\002\001\001\000\030\007\u0158\017\u0151\023" +
    "\u0150\032\u0154\033\076\034\064\044\u015c\046\u0170\051\075" +
    "\052\u0152\053\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\131\014\140\021\124" +
    "\022\123\023\122\027\252\030\255\036\253\037\u0178\040" +
    "\250\057\136\001\001\000\030\007\u0158\017\u0151\023\u0150" +
    "\032\u0154\033\076\034\064\044\u015c\046\u0177\051\075\052" +
    "\u0152\053\u0157\001\001\000\002\001\001\000\034\007\u0158" +
    "\017\u0151\023\u0150\031\226\032\u0154\033\243\034\064\044" +
    "\u015c\046\u0175\051\075\052\u0152\053\u0157\056\u0172\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\u0158\017" +
    "\u0151\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u017a" +
    "\051\075\052\u0152\053\u0157\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\u017d\021\124\022\123\023\122" +
    "\001\001\000\002\001\001\000\030\007\u0158\017\u0151\023" +
    "\u0150\032\u0154\033\076\034\064\044\u015c\046\u017f\051\075" +
    "\052\u0152\053\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\131\014" +
    "\140\021\124\022\123\023\122\027\252\030\255\036\253" +
    "\037\u0193\040\250\057\136\001\001\000\030\011\131\014" +
    "\140\021\124\022\123\023\122\027\252\030\255\036\253" +
    "\037\u0189\040\250\057\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154" +
    "\033\076\034\064\044\u015c\046\u018e\051\075\052\u0152\053" +
    "\u0157\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154" +
    "\033\076\034\064\044\u015c\046\u018c\051\075\052\u0152\053" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\u0158\017\u0151\023" +
    "\u0150\032\u0154\033\076\034\064\044\u015c\046\u0191\051\075" +
    "\052\u0152\053\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\u0158\017\u0151\023\u0150" +
    "\032\u0154\033\076\034\064\044\u015c\046\u0195\051\075\052" +
    "\u0152\053\u0157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\u0158\017\u0151" +
    "\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u01ba\051" +
    "\075\052\u0152\053\u0157\001\001\000\030\007\u0158\017\u0151" +
    "\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u019e\051" +
    "\075\052\u0152\053\u0157\001\001\000\004\043\u01a1\001\001" +
    "\000\002\001\001\000\030\011\131\014\140\021\124\022" +
    "\123\023\122\027\252\030\255\036\253\037\u01a6\040\250" +
    "\057\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\u0158\017\u0151\023\u0150\032\u0154\033\076\034\064\044\u015c" +
    "\046\u01aa\051\075\052\u0152\053\u0157\001\001\000\004\043" +
    "\u01ab\001\001\000\002\001\001\000\030\007\u0158\017\u0151" +
    "\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u01b0\051" +
    "\075\052\u0152\053\u0157\001\001\000\030\007\u0158\017\u0151" +
    "\023\u0150\032\u0154\033\076\034\064\044\u015c\046\u01ae\051" +
    "\075\052\u0152\053\u0157\001\001\000\004\043\u01af\001\001" +
    "\000\002\001\001\000\004\043\u01b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\u0158\017\u0151\023\u0150" +
    "\032\u0154\033\076\034\064\044\u015c\046\u01b4\051\075\052" +
    "\u0152\053\u0157\001\001\000\004\043\u01b5\001\001\000\002" +
    "\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033" +
    "\076\034\064\044\u015c\046\u01b9\051\075\052\u0152\053\u0157" +
    "\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033" +
    "\076\034\064\044\u015c\046\u01b8\051\075\052\u0152\053\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u01bb\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033" +
    "\076\034\064\044\u015c\046\u01bf\051\075\052\u0152\053\u0157" +
    "\001\001\000\004\043\u01c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034\064\044" +
    "\u015c\046\u01c5\051\075\052\u0152\053\u0157\001\001\000\004" +
    "\043\u01c6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154\033" +
    "\076\034\064\044\u015c\046\u01cd\051\075\052\u0152\053\u0157" +
    "\001\001\000\002\001\001\000\030\007\u0158\017\u0151\023" +
    "\u0150\032\u0154\033\076\034\064\044\u015c\046\u01d3\051\075" +
    "\052\u0152\053\u0157\001\001\000\030\007\u0158\017\u0151\023" +
    "\u0150\032\u0154\033\076\034\064\044\u015c\046\u01d0\051\075" +
    "\052\u0152\053\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\u0158\017\u0151\023\u0150\032\u0154\033\076\034\064" +
    "\044\u015c\046\u01d9\051\075\052\u0152\053\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\047\016\045\035\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\u0158\017\u0151\023\u0150\032\u0154" +
    "\033\076\034\064\044\u015c\046\u01e0\051\075\052\u0152\053" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\u01f1\017\u01ec\001\001\000\006\010\u01e9\017\u01e7\001\001" +
    "\000\006\010\u01ee\017\u01ec\001\001\000\006\010\u01ed\017" +
    "\u01ec\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u01ee\017\u01ec\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u01f5\017\u01ec\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u021a\001\001\000\006\013\u0206\060\u020a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\047\016\u020c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0212\057" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u0219\021\124" +
    "\022\123\023\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u021c\001\001\000\002\001\001\000\006" +
    "\015\047\016\u021e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0223" +
    "\005\024\006\015\017\016\050\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0228\005\024\006\015\017\016\050\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Nodo RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = md;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= DECLARACION MDLINP 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= saltoLinea MDLINP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (m != null){
                        RESULT=m;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= FUNC MDLINP 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sd = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(sd);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            Nodo node = new Nodo("STRUCTURE",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++; 
                            node.addHijo(s);                            
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCTUREDECLA ::= STRUCTURE error saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCTUREDECLA ::= STRUCTURE identificador error STRUCTINSTRUC END STRUCTURE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la structure"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo node = new Nodo("STRUCTURE INSTRUCTIONS",parser.cont);
                        parser.cont++;
                        node.addHijo(d);
                        node.addHijo(s);                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=s;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRUCTINSTRUC ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                        Nodo node = new Nodo("VACIO",parser.cont);
                        parser.cont++;                            
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }
                        if (s != null){
                            node.addHijo(s);
                        }                          
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (s != null){
                        RESULT = s;   
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUBINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIFSUB ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOWHILESUB ::= error WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOWHILESUB ::= DO error CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DOWHILESUB ::= DO WHILE error saltoLinea SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DOWHILESUB ::= DO WHILE CONDICION error SUBINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(o);
                            if (s != null){
                                node.addHijo(s);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FORSUB ::= error COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FORSUB ::= FOR error TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FORSUB ::= FOR COUNTER error OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FORSUB ::= FOR COUNTER TO OPARIT error SUBINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (f != null){
                            node.addHijo(f);
                        }                        
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (f != null){
                        node.addHijo(f);
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ff = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(ff);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SIFFUNC ::= ELSE saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }
                    if (f != null){
                        node.addHijo(f);
                    }
                    node.addHijo(s);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SIFFUNC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("DO WHILE",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            if (f != null){
                                node.addHijo(f);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DOWHILEFUNC ::= error WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un DO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DOWHILEFUNC ::= DO error CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DOWHILEFUNC ::= DO WHILE error saltoLinea FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DOWHILEFUNC ::= DO WHILE CONDICION error FUNCINSTRUC LOOP 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo node = new Nodo("FOR",parser.cont);
                            parser.cont++;
                            node.addHijo(c);
                            node.addHijo(o);
                            if (f != null){
                                node.addHijo(f);
                            }
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FORFUNC ::= error COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FORFUNC ::= FOR error TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Error en la asignacion del contador del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FORFUNC ::= FOR COUNTER error OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FORFUNC ::= FOR COUNTER TO OPARIT error FUNCINSTRUC NEXT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RETVAL ::= RETURN VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VAL ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VAL ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COUNTER ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ai = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=ai;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo node = new Nodo("=",parser.cont);
                            parser.cont++;
                            node.addHijo(new Nodo(id,parser.cont));
                            parser.cont++;
                            node.addHijo(new Nodo("INTEGER",parser.cont));
                            parser.cont++;
                            node.addHijo(op);
                            RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COUNTER ::= error AS INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(i,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMCALL ::= VARCALL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMCALL ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARCALL ::= VARCALL COMA VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(val);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VARCALL ::= VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARCALL ::= VARCALL error 
            {
              Nodo RESULT =null;
		 errores.add("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= NOT CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(v2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 
                    RESULT="=";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALCOND ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALCOND ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAMS ::= VARS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGN ::= ASIGNOTRO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGN ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGN ::= ASIGNSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(l,parser.cont));
                    parser.cont++;
                    node.addHijo(va);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(l,parser.cont));                    
                    parser.cont++;                
                    o.addHijo(v);
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALASIGN ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALASIGN ::= TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALASIGN ::= FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("FALSE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALASIGN ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=ustr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALASIGN ::= READ 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("read console",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("&",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(v2,parser.cont));
                    parser.cont++;
                    RESULT= node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALUNIRSTR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VALUNIRSTR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VALUNIRSTR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    o.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    o.addHijo(v);
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ASIGNINT ::= identificador error VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ASIGNINT ::= error OPASING VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPASING ::= IGUAL 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPASING ::= OPMULTI IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPASING ::= OPADICION IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VALINT ::= OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPARIT ::= OPARIT OPADICION OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPARIT ::= OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP ::= OP OPMULTI OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP ::= OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPP ::= INTEGER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(i,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPP ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPP ::= CALL 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = c;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPP ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= DIM T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= DIM error 
            {
              Nodo RESULT =null;
		 errores.add("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // T ::= identificador AS TIPOIGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(t);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // T ::= identificador AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // T ::= identificador AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VARS ::= CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VARS ::= CANTVARS error 
            {
              Nodo RESULT =null;
		 errores.add("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CANTVARS ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("INTEGER",parser.cont));
                    parser.cont++;
                    node.addHijo(o);
                    RESULT=node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(str.substring(1,str.length()-1),parser.cont));
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("TRUE",parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("FALSE",parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(ustr);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPOIGUAL ::= identificador IGUAL NEW CALL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VALWR ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VALWR ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VALWR ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ustr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ustr; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VALWR ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
