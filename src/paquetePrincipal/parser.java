
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package paquetePrincipal;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\010\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\003\000\002\003\010" +
    "\000\002\014\013\000\002\014\013\000\002\014\013\000" +
    "\002\014\013\000\002\014\013\000\002\052\004\000\002" +
    "\052\004\000\002\052\005\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\005\000" +
    "\002\052\002\000\002\050\012\000\002\050\012\000\002" +
    "\050\012\000\002\050\012\000\002\050\012\000\002\047" +
    "\010\000\002\047\005\000\002\047\002\000\002\047\010" +
    "\000\002\047\010\000\002\047\010\000\002\047\005\000" +
    "\002\006\010\000\002\006\010\000\002\005\011\000\002" +
    "\015\015\000\002\015\015\000\002\015\015\000\002\015" +
    "\015\000\002\015\015\000\002\015\015\000\002\015\015" +
    "\000\002\053\004\000\002\053\004\000\002\053\005\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\002\000\002\053\005\000\002\053\004" +
    "\000\002\051\012\000\002\051\012\000\002\051\012\000" +
    "\002\051\012\000\002\051\012\000\002\046\010\000\002" +
    "\046\006\000\002\046\002\000\002\046\010\000\002\046" +
    "\010\000\002\046\010\000\002\046\005\000\002\007\011" +
    "\000\002\010\010\000\002\010\010\000\002\045\004\000" +
    "\002\032\003\000\002\032\003\000\002\011\003\000\002" +
    "\011\007\000\002\027\006\000\002\027\006\000\002\030" +
    "\003\000\002\030\002\000\002\031\005\000\002\031\003" +
    "\000\002\031\004\000\002\043\005\000\002\043\005\000" +
    "\002\043\004\000\002\043\003\000\002\044\005\000\002" +
    "\060\003\000\002\060\003\000\002\042\003\000\002\042" +
    "\003\000\002\041\003\000\002\041\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\040\005\000" +
    "\002\004\005\000\002\004\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\055\005\000\002\055\005\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\035\003\000\002" +
    "\035\004\000\002\035\004\000\002\034\003\000\002\020" +
    "\005\000\002\020\003\000\002\026\005\000\002\026\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\005\000\002\025\003\000\002\023\004\000\002" +
    "\023\004\000\002\024\005\000\002\024\007\000\002\024" +
    "\011\000\002\024\007\000\002\024\005\000\002\024\010" +
    "\000\002\022\007\000\002\022\005\000\002\022\004\000" +
    "\002\021\005\000\002\021\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\016\006\000\002\016\006\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d1\000\006\003\004\031\005\001\002\000\004\051" +
    "\u01cf\001\002\000\006\003\010\051\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\014" +
    "\u01cb\001\002\000\006\003\012\014\013\001\002\000\014" +
    "\012\021\014\020\015\014\032\022\046\023\001\002\000" +
    "\014\012\021\014\020\015\014\032\022\046\023\001\002" +
    "\000\006\003\u01aa\051\u01ab\001\002\000\006\003\u01a4\006" +
    "\u01a5\001\002\000\014\012\021\014\020\015\014\032\022" +
    "\046\023\001\002\000\014\012\021\014\020\015\014\032" +
    "\022\046\023\001\002\000\014\012\021\014\020\015\014" +
    "\032\022\046\023\001\002\000\004\051\u019c\001\002\000" +
    "\006\003\u0121\051\u0122\001\002\000\006\003\042\051\043" +
    "\001\002\000\014\012\021\014\020\015\014\032\022\046" +
    "\023\001\002\000\014\012\021\014\031\015\014\032\022" +
    "\046\023\001\002\000\014\012\021\014\031\015\014\032" +
    "\022\046\023\001\002\000\006\003\ufff7\006\ufff7\001\002" +
    "\000\014\012\021\014\031\015\014\032\022\046\023\001" +
    "\002\000\020\003\ufff0\006\ufff0\012\021\014\031\015\014" +
    "\032\022\046\023\001\002\000\014\012\021\014\031\015" +
    "\014\032\022\046\023\001\002\000\014\012\021\014\031" +
    "\015\014\032\022\046\023\001\002\000\006\003\ufff3\006" +
    "\ufff3\001\002\000\006\003\ufff1\006\ufff1\001\002\000\006" +
    "\003\ufff4\006\ufff4\001\002\000\006\003\ufff5\006\ufff5\001" +
    "\002\000\006\003\ufff2\006\ufff2\001\002\000\006\003\ufff6" +
    "\006\ufff6\001\002\000\004\033\u0118\001\002\000\006\003" +
    "\044\033\045\001\002\000\006\034\uff95\051\047\001\002" +
    "\000\010\003\uff95\034\uff95\051\047\001\002\000\006\003" +
    "\uff96\034\uff96\001\002\000\010\003\uff68\016\uff68\017\uff68" +
    "\001\002\000\010\003\u010b\016\u0109\017\u010a\001\002\000" +
    "\006\003\053\034\052\001\002\000\006\003\365\017\364" +
    "\001\002\000\004\017\054\001\002\000\010\020\057\023" +
    "\055\024\056\001\002\000\054\003\uff62\004\uff62\005\uff62" +
    "\006\uff62\010\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016" +
    "\uff62\032\uff62\034\uff62\035\uff62\036\uff62\040\uff62\042\uff62" +
    "\043\uff62\044\uff62\046\uff62\050\uff62\051\uff62\001\002\000" +
    "\054\003\uff61\004\uff61\005\uff61\006\uff61\010\uff61\012\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\032\uff61\034\uff61\035" +
    "\uff61\036\uff61\040\uff61\042\uff61\043\uff61\044\uff61\046\uff61" +
    "\050\uff61\051\uff61\001\002\000\054\003\uff60\004\uff60\005" +
    "\uff60\006\uff60\010\uff60\012\uff60\013\uff60\014\uff60\015\uff60" +
    "\016\uff60\032\uff60\034\uff60\035\uff60\036\uff60\040\uff60\042" +
    "\uff60\043\uff60\044\uff60\046\uff60\050\uff60\051\uff60\001\002" +
    "\000\004\014\061\001\002\000\032\003\104\004\072\006" +
    "\uffbd\013\106\014\100\015\014\035\062\036\105\042\077" +
    "\044\070\050\074\051\107\001\002\000\004\046\362\001" +
    "\002\000\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd" +
    "\013\106\014\100\015\014\035\062\036\105\040\uffbd\042" +
    "\077\043\uffbd\044\070\050\074\051\107\001\002\000\042" +
    "\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014" +
    "\100\015\014\035\062\036\105\040\uffbd\042\077\043\uffbd" +
    "\044\070\050\074\051\107\001\002\000\042\003\uff94\004" +
    "\uff94\005\uff94\006\uff94\010\uff94\013\uff94\014\uff94\015\uff94" +
    "\035\uff94\036\uff94\040\uff94\042\uff94\043\uff94\044\uff94\050" +
    "\uff94\051\uff94\001\002\000\042\003\104\004\072\005\uffbd" +
    "\006\uffbd\010\uffbd\013\106\014\100\015\014\035\062\036" +
    "\105\040\uffbd\042\077\043\uffbd\044\070\050\074\051\107" +
    "\001\002\000\042\003\104\004\072\005\uffbd\006\uffbd\010" +
    "\uffbd\013\106\014\100\015\014\035\062\036\105\040\uffbd" +
    "\042\077\043\uffbd\044\070\050\074\051\107\001\002\000" +
    "\022\003\134\021\126\022\132\033\133\047\117\051\137" +
    "\052\127\053\135\001\002\000\004\006\353\001\002\000" +
    "\024\003\271\021\126\022\132\027\234\033\133\047\117" +
    "\051\137\052\127\053\135\001\002\000\042\003\104\004" +
    "\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014" +
    "\035\062\036\105\040\uffbd\042\077\043\uffbd\044\070\050" +
    "\074\051\107\001\002\000\006\003\256\033\257\001\002" +
    "\000\042\003\uff92\004\uff92\005\uff92\006\uff92\010\uff92\013" +
    "\uff92\014\uff92\015\uff92\035\uff92\036\uff92\040\uff92\042\uff92" +
    "\043\uff92\044\uff92\050\uff92\051\uff92\001\002\000\042\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\010\uff93\013\uff93\014\uff93" +
    "\015\uff93\035\uff93\036\uff93\040\uff93\042\uff93\043\uff93\044" +
    "\uff93\050\uff93\051\uff93\001\002\000\006\014\227\041\226" +
    "\001\002\000\042\003\104\004\072\005\uffbd\006\uffbd\010" +
    "\uffbd\013\106\014\100\015\014\035\062\036\105\040\uffbd" +
    "\042\077\043\uffbd\044\070\050\074\051\107\001\002\000" +
    "\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106" +
    "\014\100\015\014\035\062\036\105\040\uffbd\042\077\043" +
    "\uffbd\044\070\050\074\051\107\001\002\000\042\003\104" +
    "\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015" +
    "\014\035\062\036\105\040\uffbd\042\077\043\uffbd\044\070" +
    "\050\074\051\107\001\002\000\042\003\104\004\072\005" +
    "\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035\062" +
    "\036\105\040\uffbd\042\077\043\uffbd\044\070\050\074\051" +
    "\107\001\002\000\054\003\104\004\072\005\uffbd\006\uffbd" +
    "\010\uffbd\011\211\013\106\014\100\015\014\033\146\035" +
    "\062\036\105\040\uffbd\042\077\043\uffbd\044\070\046\023" +
    "\050\074\051\107\054\111\055\115\001\002\000\006\003" +
    "\200\051\201\001\002\000\010\011\174\054\111\055\115" +
    "\001\002\000\014\003\112\011\113\033\114\054\111\055" +
    "\115\001\002\000\012\003\144\033\133\051\145\053\135" +
    "\001\002\000\004\011\171\001\002\000\012\003\144\033" +
    "\133\051\145\053\135\001\002\000\022\003\uff81\021\126" +
    "\022\132\033\uff81\047\117\051\uff81\052\127\053\uff81\001" +
    "\002\000\024\003\134\021\126\022\132\033\133\034\uffa3" +
    "\047\117\051\137\052\127\053\135\001\002\000\004\011" +
    "\116\001\002\000\012\003\uff80\033\uff80\051\uff80\053\uff80" +
    "\001\002\000\060\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\025\uff8a\026\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a\042" +
    "\uff8a\043\uff8a\044\uff8a\050\uff8a\051\uff8a\056\uff8a\001\002" +
    "\000\010\003\uffa1\016\uffa1\034\uffa1\001\002\000\004\034" +
    "\166\001\002\000\074\003\uff77\004\uff77\005\uff77\006\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\uff77\016\uff77\025\uff77\026\uff77\032\uff77\034\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\042\uff77\043\uff77\044\uff77\046" +
    "\uff77\050\uff77\051\uff77\054\uff77\055\uff77\056\uff77\001\002" +
    "\000\074\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010" +
    "\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c" +
    "\025\uff7c\026\uff7c\032\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\042\uff7c\043\uff7c\044\uff7c\046\uff7c\050\uff7c" +
    "\051\uff7c\054\uff7c\055\151\056\uff7c\001\002\000\074\003" +
    "\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\025\uff7a\026" +
    "\uff7a\032\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\042\uff7a\043\uff7a\044\uff7a\046\uff7a\050\uff7a\051\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\001\002\000\046\003\uffaa\004\uffaa" +
    "\005\uffaa\006\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\050\uffaa\051\uffaa\001\002\000\060\003\uff8d\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\025\uff8d\026\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\040\uff8d\042\uff8d\043\uff8d\044\uff8d\050\uff8d" +
    "\051\uff8d\056\uff8d\001\002\000\062\003\uff8e\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\025\uff8e\026\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\040\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff87\050\uff8e" +
    "\051\uff8e\056\uff8e\001\002\000\010\003\164\016\163\034" +
    "\uffa4\001\002\000\060\003\uff8b\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\025\uff8b\026\uff8b\034\uff8b\035\uff8b\036\uff8b\040\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\050\uff8b\051\uff8b\056\uff8b\001" +
    "\002\000\060\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\025" +
    "\uff8c\026\uff8c\034\uff8c\035\uff8c\036\uff8c\040\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\050\uff8c\051\uff8c\056\uff8c\001\002\000" +
    "\012\003\144\033\133\051\145\053\135\001\002\000\070" +
    "\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\013\uff75\014\uff75\015\uff75\016\uff75\025\uff75\026\uff75" +
    "\033\146\034\uff75\035\uff75\036\uff75\040\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff85\050\uff75\051\uff75\054\uff75\055\uff75" +
    "\056\uff75\001\002\000\074\003\uff79\004\uff79\005\uff79\006" +
    "\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79" +
    "\015\uff79\016\uff79\025\uff79\026\uff79\032\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\042\uff79\043\uff79\044\uff79" +
    "\046\uff79\050\uff79\051\uff79\054\uff79\055\uff79\056\uff79\001" +
    "\002\000\004\045\153\001\002\000\070\003\uff78\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\013\uff78\014" +
    "\uff78\015\uff78\016\uff78\025\uff78\026\uff78\033\114\034\uff78" +
    "\035\uff78\036\uff78\040\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff86\050\uff78\051\uff78\054\uff78\055\uff78\056\uff78\001\002" +
    "\000\064\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\025\uff7e" +
    "\026\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\042" +
    "\uff7e\043\uff7e\044\uff7e\050\uff7e\051\uff7e\054\142\056\uff7e" +
    "\001\002\000\046\003\uffa9\004\uffa9\005\uffa9\006\uffa9\010" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9\050\uffa9\051" +
    "\uffa9\001\002\000\012\003\144\033\133\051\145\053\135" +
    "\001\002\000\074\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\025\uff7d\026\uff7d\032\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\042\uff7d\043\uff7d\044\uff7d\046\uff7d" +
    "\050\uff7d\051\uff7d\054\uff7d\055\151\056\uff7d\001\002\000" +
    "\076\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\025" +
    "\uff75\026\uff75\032\uff75\033\146\034\uff75\035\uff75\036\uff75" +
    "\037\uff75\040\uff75\042\uff75\043\uff75\044\uff75\046\uff75\050" +
    "\uff75\051\uff75\054\uff75\055\uff75\056\uff75\001\002\000\076" +
    "\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011" +
    "\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\025\uff78" +
    "\026\uff78\032\uff78\033\114\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\042\uff78\043\uff78\044\uff78\046\uff78\050\uff78" +
    "\051\uff78\054\uff78\055\uff78\056\uff78\001\002\000\024\003" +
    "\134\021\126\022\132\033\133\034\uffa3\047\117\051\137" +
    "\052\127\053\135\001\002\000\004\034\150\001\002\000" +
    "\074\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\025" +
    "\uffa5\026\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000\012\003\144" +
    "\033\133\051\145\053\135\001\002\000\074\003\uff7b\004" +
    "\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\015\uff7b\016\uff7b\025\uff7b\026\uff7b\032" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\046\uff7b\050\uff7b\051\uff7b\054\uff7b\055" +
    "\uff7b\056\uff7b\001\002\000\010\003\155\051\156\052\154" +
    "\001\002\000\070\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\016\uff87\025\uff87\026\uff87\032\uff87\034\uff87\035\uff87\036" +
    "\uff87\040\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87" +
    "\050\uff87\051\uff87\056\uff87\001\002\000\070\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\014\uff85\015\uff85\016\uff85\025\uff85\026\uff85\032" +
    "\uff85\034\uff85\035\uff85\036\uff85\040\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\050\uff85\051\uff85\056\uff85\001" +
    "\002\000\070\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\025\uff86\026\uff86\032\uff86\034\uff86\035\uff86\036\uff86" +
    "\040\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\050" +
    "\uff86\051\uff86\056\uff86\001\002\000\070\003\uff88\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\025\uff88\026\uff88\032\uff88" +
    "\034\uff88\035\uff88\036\uff88\040\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\153\046\uff88\050\uff88\051\uff88\056\uff88\001\002" +
    "\000\066\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\025\uff89\026\uff89\032\uff89\034\uff89\035\uff89\036\uff89\040" +
    "\uff89\042\uff89\043\uff89\044\uff89\046\uff89\050\uff89\051\uff89" +
    "\056\uff89\001\002\000\006\034\162\054\142\001\002\000" +
    "\074\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\025" +
    "\uff76\026\uff76\032\uff76\034\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\042\uff76\043\uff76\044\uff76\046\uff76\050\uff76\051" +
    "\uff76\054\uff76\055\uff76\056\uff76\001\002\000\022\003\134" +
    "\021\126\022\132\033\133\047\117\051\137\052\127\053" +
    "\135\001\002\000\010\003\uffa0\016\uffa0\034\uffa0\001\002" +
    "\000\010\003\uffa2\016\uffa2\034\uffa2\001\002\000\074\003" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\025\uffa6\026" +
    "\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\046\uffa6\050\uffa6\051\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\001\002\000\042\003\uff91\004\uff91" +
    "\005\uff91\006\uff91\010\uff91\013\uff91\014\uff91\015\uff91\035" +
    "\uff91\036\uff91\040\uff91\042\uff91\043\uff91\044\uff91\050\uff91" +
    "\051\uff91\001\002\000\044\003\uff83\004\uff83\005\uff83\006" +
    "\uff83\010\uff83\013\uff83\014\uff83\015\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\042\uff83\043\uff83\044\uff83\050\uff83\051" +
    "\uff83\001\002\000\012\003\uff7f\033\uff7f\051\uff7f\053\uff7f" +
    "\001\002\000\044\003\uff84\004\uff84\005\uff84\006\uff84\010" +
    "\uff84\013\uff84\014\uff84\015\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\042\uff84\043\uff84\044\uff84\050\uff84\051\uff84\001" +
    "\002\000\012\003\144\033\133\051\145\053\135\001\002" +
    "\000\022\003\uff81\021\126\022\132\033\uff81\047\117\051" +
    "\uff81\052\127\053\uff81\001\002\000\042\003\uff90\004\uff90" +
    "\005\uff90\006\uff90\010\uff90\013\uff90\014\uff90\015\uff90\035" +
    "\uff90\036\uff90\040\uff90\042\uff90\043\uff90\044\uff90\050\uff90" +
    "\051\uff90\001\002\000\042\003\uff8f\004\uff8f\005\uff8f\006" +
    "\uff8f\010\uff8f\013\uff8f\014\uff8f\015\uff8f\035\uff8f\036\uff8f" +
    "\040\uff8f\042\uff8f\043\uff8f\044\uff8f\050\uff8f\051\uff8f\001" +
    "\002\000\004\037\uffa8\001\002\000\010\011\211\054\111" +
    "\055\115\001\002\000\014\003\112\011\211\017\210\054" +
    "\111\055\115\001\002\000\004\037\203\001\002\000\012" +
    "\003\144\033\133\051\145\053\135\001\002\000\006\014" +
    "\205\054\142\001\002\000\032\003\104\004\072\013\106" +
    "\014\100\015\014\035\062\036\105\040\uffbd\042\077\044" +
    "\070\050\074\051\107\001\002\000\004\040\207\001\002" +
    "\000\042\003\uffae\004\uffae\005\uffae\006\uffae\010\uffae\013" +
    "\uffae\014\uffae\015\uffae\035\uffae\036\uffae\040\uffae\042\uffae" +
    "\043\uffae\044\uffae\050\uffae\051\uffae\001\002\000\004\023" +
    "\212\001\002\000\012\003\uff81\033\uff81\051\uff81\053\uff81" +
    "\001\002\000\004\011\213\001\002\000\012\003\144\033" +
    "\133\051\145\053\135\001\002\000\006\037\uffa7\054\142" +
    "\001\002\000\012\003\144\033\133\051\145\053\135\001" +
    "\002\000\044\003\uff82\004\uff82\005\uff82\006\uff82\010\uff82" +
    "\013\uff82\014\uff82\015\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\042\uff82\043\uff82\044\uff82\050\uff82\051\uff82\001\002" +
    "\000\014\005\uffbb\006\uffbb\010\uffbb\040\uffbb\043\uffbb\001" +
    "\002\000\042\003\104\004\072\005\uffbd\006\uffbd\010\uffbd" +
    "\013\106\014\100\015\014\035\062\036\105\040\uffbd\042" +
    "\077\043\uffbd\044\070\050\074\051\107\001\002\000\014" +
    "\005\uffbc\006\uffbc\010\uffbc\040\uffbc\043\uffbc\001\002\000" +
    "\014\005\uffbf\006\uffbf\010\uffbf\040\uffbf\043\uffbf\001\002" +
    "\000\014\005\uffc1\006\uffc1\010\uffc1\040\uffc1\043\uffc1\001" +
    "\002\000\014\005\uffc0\006\uffc0\010\uffc0\040\uffc0\043\uffc0" +
    "\001\002\000\014\005\uffc6\006\uffc6\010\uffc6\040\uffc6\043" +
    "\uffc6\001\002\000\024\003\134\021\126\022\132\027\234" +
    "\033\133\047\117\051\137\052\127\053\135\001\002\000" +
    "\032\003\104\004\072\013\106\014\100\015\014\035\062" +
    "\036\105\042\077\043\uffbd\044\070\050\074\051\107\001" +
    "\002\000\004\043\231\001\002\000\004\041\232\001\002" +
    "\000\024\003\134\021\126\022\132\027\234\033\133\047" +
    "\117\051\137\052\127\053\135\001\002\000\050\003\uff9c" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\025\uff9c\026\uff9c\035\uff9c\036\uff9c\040\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\050\uff9c\051\uff9c\001\002\000" +
    "\022\003\134\021\126\022\132\033\133\047\117\051\137" +
    "\052\127\053\135\001\002\000\054\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\013\uff98\014\uff98" +
    "\015\uff98\025\uff98\026\uff98\035\uff98\036\uff98\040\uff98\042" +
    "\uff98\043\uff98\044\uff98\050\uff98\051\uff98\056\uff98\001\002" +
    "\000\006\011\247\056\245\001\002\000\046\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\010\uffac\013\uffac\014\uffac\015\uffac" +
    "\025\241\026\242\035\uffac\036\uffac\040\uffac\042\uffac\043" +
    "\uffac\044\uffac\050\uffac\051\uffac\001\002\000\054\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013" +
    "\uff97\014\uff97\015\uff97\025\uff97\026\uff97\035\uff97\036\uff97" +
    "\040\uff97\042\uff97\043\uff97\044\uff97\050\uff97\051\uff97\056" +
    "\uff97\001\002\000\022\003\134\021\126\022\132\033\133" +
    "\047\117\051\137\052\127\053\135\001\002\000\022\003" +
    "\134\021\126\022\132\033\133\047\117\051\137\052\127" +
    "\053\135\001\002\000\050\003\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\013\uff9e\014\uff9e\015\uff9e\025\uff9e" +
    "\026\uff9e\035\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\050\uff9e\051\uff9e\001\002\000\050\003\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\025\uff9f\026\uff9f\035\uff9f\036\uff9f\040\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\050\uff9f\051\uff9f\001\002\000\022\003" +
    "\uff9a\021\uff9a\022\uff9a\033\uff9a\047\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\001\002\000\022\003\134\021\126\022\132\033" +
    "\133\047\117\051\137\052\127\053\135\001\002\000\022" +
    "\003\uff99\021\uff99\022\uff99\033\uff99\047\uff99\051\uff99\052" +
    "\uff99\053\uff99\001\002\000\050\003\uff9b\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\013\uff9b\014\uff9b\015\uff9b\025" +
    "\uff9b\026\uff9b\035\uff9b\036\uff9b\040\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\050\uff9b\051\uff9b\001\002\000\050\003\uff9d\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\025\uff9d\026\uff9d\035\uff9d\036\uff9d\040\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\050\uff9d\051\uff9d\001\002\000\010" +
    "\014\253\025\241\026\242\001\002\000\032\003\104\004" +
    "\072\013\106\014\100\015\014\035\062\036\105\042\077" +
    "\043\uffbd\044\070\050\074\051\107\001\002\000\004\043" +
    "\255\001\002\000\042\003\uffad\004\uffad\005\uffad\006\uffad" +
    "\010\uffad\013\uffad\014\uffad\015\uffad\035\uffad\036\uffad\040" +
    "\uffad\042\uffad\043\uffad\044\uffad\050\uffad\051\uffad\001\002" +
    "\000\010\003\261\051\262\052\260\001\002\000\010\003" +
    "\261\051\262\052\260\001\002\000\006\034\uff5c\045\uff87" +
    "\001\002\000\006\034\uff5a\045\uff85\001\002\000\006\034" +
    "\uff5d\045\uff86\001\002\000\004\034\uff5b\001\002\000\004" +
    "\034\265\001\002\000\042\003\uff5f\004\uff5f\005\uff5f\006" +
    "\uff5f\010\uff5f\013\uff5f\014\uff5f\015\uff5f\035\uff5f\036\uff5f" +
    "\040\uff5f\042\uff5f\043\uff5f\044\uff5f\050\uff5f\051\uff5f\001" +
    "\002\000\004\034\267\001\002\000\042\003\uff5e\004\uff5e" +
    "\005\uff5e\006\uff5e\010\uff5e\013\uff5e\014\uff5e\015\uff5e\035" +
    "\uff5e\036\uff5e\040\uff5e\042\uff5e\043\uff5e\044\uff5e\050\uff5e" +
    "\051\uff5e\001\002\000\014\005\uffc4\006\uffc4\010\uffc4\040" +
    "\uffc4\043\uffc4\001\002\000\020\007\345\011\uff75\033\146" +
    "\045\uff85\054\uff75\055\uff75\056\uff75\001\002\000\012\003" +
    "\274\007\273\025\241\026\242\001\002\000\006\003\332" +
    "\014\333\001\002\000\004\014\275\001\002\000\036\003" +
    "\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\100" +
    "\015\014\035\062\036\105\042\077\044\070\050\074\051" +
    "\107\001\002\000\010\005\301\006\uffb3\010\300\001\002" +
    "\000\004\006\330\001\002\000\024\003\307\021\126\022" +
    "\132\027\234\033\133\047\117\051\137\052\127\053\135" +
    "\001\002\000\006\003\302\014\303\001\002\000\010\005" +
    "\301\006\uffb3\010\300\001\002\000\036\003\104\004\072" +
    "\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035" +
    "\062\036\105\042\077\044\070\050\074\051\107\001\002" +
    "\000\010\005\301\006\uffb3\010\300\001\002\000\004\006" +
    "\uffb4\001\002\000\004\006\uffaf\001\002\000\020\007\324" +
    "\011\uff75\033\146\045\uff85\054\uff75\055\uff75\056\uff75\001" +
    "\002\000\012\003\311\007\312\025\241\026\242\001\002" +
    "\000\004\014\321\001\002\000\006\003\313\014\314\001" +
    "\002\000\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd" +
    "\013\106\014\100\015\014\035\062\036\105\042\077\044" +
    "\070\050\074\051\107\001\002\000\036\003\104\004\072" +
    "\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035" +
    "\062\036\105\042\077\044\070\050\074\051\107\001\002" +
    "\000\010\005\301\006\uffb3\010\300\001\002\000\004\006" +
    "\uffb5\001\002\000\010\005\301\006\uffb3\010\300\001\002" +
    "\000\004\006\uffb0\001\002\000\036\003\104\004\072\005" +
    "\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035\062" +
    "\036\105\042\077\044\070\050\074\051\107\001\002\000" +
    "\010\005\301\006\uffb3\010\300\001\002\000\004\006\uffb1" +
    "\001\002\000\004\014\325\001\002\000\036\003\104\004" +
    "\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014" +
    "\035\062\036\105\042\077\044\070\050\074\051\107\001" +
    "\002\000\010\005\301\006\uffb3\010\300\001\002\000\004" +
    "\006\uffb2\001\002\000\004\004\331\001\002\000\042\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\010\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\035\uffb8\036\uffb8\040\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\050\uffb8\051\uffb8\001\002\000\036\003\104\004\072" +
    "\005\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035" +
    "\062\036\105\042\077\044\070\050\074\051\107\001\002" +
    "\000\036\003\104\004\072\005\uffbd\006\uffbd\010\uffbd\013" +
    "\106\014\100\015\014\035\062\036\105\042\077\044\070" +
    "\050\074\051\107\001\002\000\010\005\301\006\uffb3\010" +
    "\300\001\002\000\004\006\336\001\002\000\006\003\337" +
    "\004\340\001\002\000\042\003\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\035\uffb6\036\uffb6" +
    "\040\uffb6\042\uffb6\043\uffb6\044\uffb6\050\uffb6\051\uffb6\001" +
    "\002\000\042\003\uffba\004\uffba\005\uffba\006\uffba\010\uffba" +
    "\013\uffba\014\uffba\015\uffba\035\uffba\036\uffba\040\uffba\042" +
    "\uffba\043\uffba\044\uffba\050\uffba\051\uffba\001\002\000\010" +
    "\005\301\006\uffb3\010\300\001\002\000\004\006\343\001" +
    "\002\000\004\004\344\001\002\000\042\003\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\010\uffb7\013\uffb7\014\uffb7\015\uffb7\035" +
    "\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\050\uffb7" +
    "\051\uffb7\001\002\000\004\014\346\001\002\000\036\003" +
    "\104\004\072\005\uffbd\006\uffbd\010\uffbd\013\106\014\100" +
    "\015\014\035\062\036\105\042\077\044\070\050\074\051" +
    "\107\001\002\000\010\005\301\006\uffb3\010\300\001\002" +
    "\000\004\006\351\001\002\000\004\004\352\001\002\000" +
    "\042\003\uffb9\004\uffb9\005\uffb9\006\uffb9\010\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\035\uffb9\036\uffb9\040\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\050\uffb9\051\uffb9\001\002\000\004\046\354" +
    "\001\002\000\050\003\uffcb\004\uffcb\005\uffcb\006\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\032\uffcb\035\uffcb" +
    "\036\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050" +
    "\uffcb\051\uffcb\001\002\000\042\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\010\uffab\013\uffab\014\uffab\015\uffab\035\uffab\036" +
    "\uffab\040\uffab\042\uffab\043\uffab\044\uffab\050\uffab\051\uffab" +
    "\001\002\000\014\005\uffc7\006\uffc7\010\uffc7\040\uffc7\043" +
    "\uffc7\001\002\000\014\005\uffc2\006\uffc2\010\uffc2\040\uffc2" +
    "\043\uffc2\001\002\000\014\005\uffbe\006\uffbe\010\uffbe\040" +
    "\uffbe\043\uffbe\001\002\000\014\005\uffc3\006\uffc3\010\uffc3" +
    "\040\uffc3\043\uffc3\001\002\000\042\003\104\004\072\005" +
    "\uffbd\006\uffbd\010\uffbd\013\106\014\100\015\014\035\062" +
    "\036\105\040\uffbd\042\077\043\uffbd\044\070\050\074\051" +
    "\107\001\002\000\014\005\uffc5\006\uffc5\010\uffc5\040\uffc5" +
    "\043\uffc5\001\002\000\012\003\373\020\057\023\055\024" +
    "\056\001\002\000\010\020\057\023\055\024\056\001\002" +
    "\000\004\014\367\001\002\000\032\003\104\004\072\006" +
    "\uffbd\013\106\014\100\015\014\035\062\036\105\042\077" +
    "\044\070\050\074\051\107\001\002\000\004\006\371\001" +
    "\002\000\004\046\372\001\002\000\050\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\032\uffca\035\uffca\036\uffca\040\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\050\uffca\051\uffca\001\002\000\004\014" +
    "\u0105\001\002\000\006\003\375\014\376\001\002\000\032" +
    "\003\104\004\072\006\uffbd\013\106\014\100\015\014\035" +
    "\062\036\105\042\077\044\070\050\074\051\107\001\002" +
    "\000\032\003\104\004\072\006\uffbd\013\106\014\100\015" +
    "\014\035\062\036\105\042\077\044\070\050\074\051\107" +
    "\001\002\000\004\006\u0100\001\002\000\004\046\u0101\001" +
    "\002\000\050\003\uffce\004\uffce\005\uffce\006\uffce\010\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\032\uffce\035\uffce\036" +
    "\uffce\040\uffce\042\uffce\043\uffce\044\uffce\046\uffce\050\uffce" +
    "\051\uffce\001\002\000\004\006\u0103\001\002\000\004\046" +
    "\u0104\001\002\000\050\003\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\032\uffc8\035" +
    "\uffc8\036\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8" +
    "\050\uffc8\051\uffc8\001\002\000\032\003\104\004\072\006" +
    "\uffbd\013\106\014\100\015\014\035\062\036\105\042\077" +
    "\044\070\050\074\051\107\001\002\000\004\006\u0107\001" +
    "\002\000\004\046\u0108\001\002\000\050\003\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\032\uffc9\035\uffc9\036\uffc9\040\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\046\uffc9\050\uffc9\051\uffc9\001\002\000\004\051" +
    "\u010f\001\002\000\010\020\057\023\055\024\056\001\002" +
    "\000\052\003\uff6a\004\uff6a\005\uff6a\006\uff6a\010\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\032\uff6a\034\uff6a\035\uff6a" +
    "\036\uff6a\040\uff6a\042\uff6a\043\uff6a\044\uff6a\046\uff6a\050" +
    "\uff6a\051\uff6a\001\002\000\054\003\uff6b\004\uff6b\005\uff6b" +
    "\006\uff6b\010\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016" +
    "\u010d\032\uff6b\034\uff6b\035\uff6b\036\uff6b\040\uff6b\042\uff6b" +
    "\043\uff6b\044\uff6b\046\uff6b\050\uff6b\051\uff6b\001\002\000" +
    "\004\051\047\001\002\000\052\003\uff6c\004\uff6c\005\uff6c" +
    "\006\uff6c\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\032" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\040\uff6c\042\uff6c\043\uff6c" +
    "\044\uff6c\046\uff6c\050\uff6c\051\uff6c\001\002\000\010\003" +
    "\uff69\016\uff69\017\uff69\001\002\000\004\034\u0111\001\002" +
    "\000\004\017\u0112\001\002\000\010\020\057\023\055\024" +
    "\056\001\002\000\004\014\u0114\001\002\000\032\003\104" +
    "\004\072\006\uffbd\013\106\014\100\015\014\035\062\036" +
    "\105\042\077\044\070\050\074\051\107\001\002\000\004" +
    "\006\u0116\001\002\000\004\046\u0117\001\002\000\050\003" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\032\uffcc\035\uffcc\036\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\050\uffcc\051\uffcc\001\002" +
    "\000\006\034\uff95\051\047\001\002\000\004\034\u011a\001" +
    "\002\000\004\017\u011b\001\002\000\010\020\057\023\055" +
    "\024\056\001\002\000\004\014\u011d\001\002\000\032\003" +
    "\104\004\072\006\uffbd\013\106\014\100\015\014\035\062" +
    "\036\105\042\077\044\070\050\074\051\107\001\002\000" +
    "\004\006\u011f\001\002\000\004\046\u0120\001\002\000\050" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\032\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd\051\uffcd\001" +
    "\002\000\004\033\u0195\001\002\000\006\003\u0123\033\u0124" +
    "\001\002\000\006\034\uff95\051\047\001\002\000\010\003" +
    "\uff95\034\uff95\051\047\001\002\000\006\003\u0127\034\u0126" +
    "\001\002\000\006\003\u0187\014\u0188\001\002\000\004\014" +
    "\u0128\001\002\000\030\003\u0134\004\u012e\006\uffde\013\106" +
    "\014\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074\051" +
    "\107\001\002\000\004\032\u0185\001\002\000\040\003\u0134" +
    "\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\u0130\015" +
    "\014\035\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050\074" +
    "\051\107\001\002\000\040\003\u0134\004\u012e\005\uffde\006" +
    "\uffde\010\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135" +
    "\040\uffde\042\u012f\043\uffde\050\074\051\107\001\002\000" +
    "\040\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106" +
    "\014\u0130\015\014\035\u0129\036\u0135\040\uffde\042\u012f\043" +
    "\uffde\050\074\051\107\001\002\000\040\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\u0130\015\014\035" +
    "\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050\074\051\107" +
    "\001\002\000\024\003\u0150\021\126\022\132\027\234\033" +
    "\133\047\117\051\137\052\127\053\135\001\002\000\006" +
    "\014\u0147\041\u0146\001\002\000\040\003\u0134\004\u012e\005" +
    "\uffde\006\uffde\010\uffde\013\106\014\u0130\015\014\035\u0129" +
    "\036\u0135\040\uffde\042\u012f\043\uffde\050\074\051\107\001" +
    "\002\000\040\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde" +
    "\013\106\014\u0130\015\014\035\u0129\036\u0135\040\uffde\042" +
    "\u012f\043\uffde\050\074\051\107\001\002\000\040\003\u0134" +
    "\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\u0130\015" +
    "\014\035\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050\074" +
    "\051\107\001\002\000\004\006\u0141\001\002\000\052\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\011\211\013\106" +
    "\014\u0130\015\014\032\u013e\033\146\035\u0129\036\u0135\040" +
    "\uffde\042\u012f\043\uffde\050\074\051\107\054\111\055\115" +
    "\001\002\000\006\003\200\051\201\001\002\000\040\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\u0130" +
    "\015\014\035\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050" +
    "\074\051\107\001\002\000\014\005\uffe3\006\uffe3\010\uffe3" +
    "\040\uffe3\043\uffe3\001\002\000\004\037\u0139\001\002\000" +
    "\012\003\144\033\133\051\145\053\135\001\002\000\006" +
    "\014\u013b\054\142\001\002\000\030\003\u0134\004\u012e\013" +
    "\106\014\u0130\015\014\035\u0129\036\u0135\040\uffde\042\u012f" +
    "\050\074\051\107\001\002\000\004\040\u013d\001\002\000" +
    "\040\003\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\035\uffcf\036\uffcf\040\uffcf\042\uffcf\043" +
    "\uffcf\050\uffcf\051\uffcf\001\002\000\040\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\u0130\015\014\035" +
    "\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050\074\051\107" +
    "\001\002\000\014\005\uffe0\006\uffe0\010\uffe0\040\uffe0\043" +
    "\uffe0\001\002\000\014\005\uffdf\006\uffdf\010\uffdf\040\uffdf" +
    "\043\uffdf\001\002\000\004\032\u0142\001\002\000\014\012" +
    "\uffeb\014\uffeb\015\uffeb\032\uffeb\046\uffeb\001\002\000\014" +
    "\005\uffe4\006\uffe4\010\uffe4\040\uffe4\043\uffe4\001\002\000" +
    "\014\005\uffe1\006\uffe1\010\uffe1\040\uffe1\043\uffe1\001\002" +
    "\000\014\005\uffe8\006\uffe8\010\uffe8\040\uffe8\043\uffe8\001" +
    "\002\000\024\003\134\021\126\022\132\027\234\033\133" +
    "\047\117\051\137\052\127\053\135\001\002\000\030\003" +
    "\u0134\004\u012e\013\106\014\u0130\015\014\035\u0129\036\u0135" +
    "\042\u012f\043\uffde\050\074\051\107\001\002\000\004\043" +
    "\u0149\001\002\000\004\041\u014a\001\002\000\024\003\134" +
    "\021\126\022\132\027\234\033\133\047\117\051\137\052" +
    "\127\053\135\001\002\000\044\003\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\025\241\026" +
    "\242\035\uffd0\036\uffd0\040\uffd0\042\uffd0\043\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\010\014\u014d\025\241\026\242\001" +
    "\002\000\030\003\u0134\004\u012e\013\106\014\u0130\015\014" +
    "\035\u0129\036\u0135\042\u012f\043\uffde\050\074\051\107\001" +
    "\002\000\004\043\u014f\001\002\000\040\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\035" +
    "\uffd1\036\uffd1\040\uffd1\042\uffd1\043\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\020\007\u017b\011\uff75\033\146\045\uff85\054" +
    "\uff75\055\uff75\056\uff75\001\002\000\012\003\u0152\007\u0153" +
    "\025\241\026\242\001\002\000\004\014\u0176\001\002\000" +
    "\006\003\u0154\014\u0155\001\002\000\034\003\u0134\004\u012e" +
    "\005\uffde\006\uffde\010\uffde\013\106\014\u0130\015\014\035" +
    "\u0129\036\u0135\042\u012f\050\074\051\107\001\002\000\034" +
    "\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014" +
    "\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074\051\107" +
    "\001\002\000\010\005\u0157\006\uffd6\010\u0158\001\002\000" +
    "\006\003\u016e\014\u016f\001\002\000\024\003\u015d\021\126" +
    "\022\132\027\234\033\133\047\117\051\137\052\127\053" +
    "\135\001\002\000\004\006\u015a\001\002\000\006\003\u015b" +
    "\004\u015c\001\002\000\040\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\013\uffd9\014\uffd9\015\uffd9\035\uffd9\036\uffd9" +
    "\040\uffd9\042\uffd9\043\uffd9\050\uffd9\051\uffd9\001\002\000" +
    "\040\003\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\050\uffdd\051\uffdd\001\002\000\020\007\u016a\011\uff75" +
    "\033\146\045\uff85\054\uff75\055\uff75\056\uff75\001\002\000" +
    "\012\003\u015f\007\u0160\025\241\026\242\001\002\000\004" +
    "\014\u0167\001\002\000\006\003\u0161\014\u0162\001\002\000" +
    "\034\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106" +
    "\014\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074\051" +
    "\107\001\002\000\034\003\u0134\004\u012e\005\uffde\006\uffde" +
    "\010\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135\042" +
    "\u012f\050\074\051\107\001\002\000\010\005\u0157\006\uffd6" +
    "\010\u0158\001\002\000\004\006\uffd8\001\002\000\010\005" +
    "\u0157\006\uffd6\010\u0158\001\002\000\004\006\uffd3\001\002" +
    "\000\034\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013" +
    "\106\014\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074" +
    "\051\107\001\002\000\010\005\u0157\006\uffd6\010\u0158\001" +
    "\002\000\004\006\uffd4\001\002\000\004\014\u016b\001\002" +
    "\000\034\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013" +
    "\106\014\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074" +
    "\051\107\001\002\000\010\005\u0157\006\uffd6\010\u0158\001" +
    "\002\000\004\006\uffd5\001\002\000\030\003\u0134\004\u012e" +
    "\006\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135\042" +
    "\u012f\050\074\051\107\001\002\000\030\003\u0134\004\u012e" +
    "\006\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135\042" +
    "\u012f\050\074\051\107\001\002\000\004\006\uffd7\001\002" +
    "\000\004\006\uffd2\001\002\000\010\005\u0157\006\uffd6\010" +
    "\u0158\001\002\000\004\006\u0174\001\002\000\004\004\u0175" +
    "\001\002\000\040\003\uffda\004\uffda\005\uffda\006\uffda\010" +
    "\uffda\013\uffda\014\uffda\015\uffda\035\uffda\036\uffda\040\uffda" +
    "\042\uffda\043\uffda\050\uffda\051\uffda\001\002\000\034\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\u0130" +
    "\015\014\035\u0129\036\u0135\042\u012f\050\074\051\107\001" +
    "\002\000\010\005\u0157\006\uffd6\010\u0158\001\002\000\004" +
    "\006\u0179\001\002\000\004\004\u017a\001\002\000\040\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\010\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\035\uffdb\036\uffdb\040\uffdb\042\uffdb\043\uffdb\050" +
    "\uffdb\051\uffdb\001\002\000\004\014\u017c\001\002\000\034" +
    "\003\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014" +
    "\u0130\015\014\035\u0129\036\u0135\042\u012f\050\074\051\107" +
    "\001\002\000\010\005\u0157\006\uffd6\010\u0158\001\002\000" +
    "\004\006\u017f\001\002\000\004\004\u0180\001\002\000\040" +
    "\003\uffdc\004\uffdc\005\uffdc\006\uffdc\010\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\035\uffdc\036\uffdc\040\uffdc\042\uffdc\043\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\014\005\uffe6\006\uffe6\010" +
    "\uffe6\040\uffe6\043\uffe6\001\002\000\014\005\uffe2\006\uffe2" +
    "\010\uffe2\040\uffe2\043\uffe2\001\002\000\014\005\uffe9\006" +
    "\uffe9\010\uffe9\040\uffe9\043\uffe9\001\002\000\014\005\uffe5" +
    "\006\uffe5\010\uffe5\040\uffe5\043\uffe5\001\002\000\040\003" +
    "\u0134\004\u012e\005\uffde\006\uffde\010\uffde\013\106\014\u0130" +
    "\015\014\035\u0129\036\u0135\040\uffde\042\u012f\043\uffde\050" +
    "\074\051\107\001\002\000\014\005\uffe7\006\uffe7\010\uffe7" +
    "\040\uffe7\043\uffe7\001\002\000\030\003\u0134\004\u012e\006" +
    "\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135\042\u012f" +
    "\050\074\051\107\001\002\000\030\003\u0134\004\u012e\006" +
    "\uffde\013\106\014\u0130\015\014\035\u0129\036\u0135\042\u012f" +
    "\050\074\051\107\001\002\000\004\006\u018a\001\002\000" +
    "\004\032\u018b\001\002\000\014\012\uffee\014\uffee\015\uffee" +
    "\032\uffee\046\uffee\001\002\000\004\006\u018d\001\002\000" +
    "\004\032\u018e\001\002\000\014\012\uffea\014\uffea\015\uffea" +
    "\032\uffea\046\uffea\001\002\000\004\034\u0190\001\002\000" +
    "\004\014\u0191\001\002\000\030\003\u0134\004\u012e\006\uffde" +
    "\013\106\014\u0130\015\014\035\u0129\036\u0135\042\u012f\050" +
    "\074\051\107\001\002\000\004\006\u0193\001\002\000\004" +
    "\032\u0194\001\002\000\014\012\uffec\014\uffec\015\uffec\032" +
    "\uffec\046\uffec\001\002\000\006\034\uff95\051\047\001\002" +
    "\000\004\034\u0197\001\002\000\004\014\u0198\001\002\000" +
    "\030\003\u0134\004\u012e\006\uffde\013\106\014\u0130\015\014" +
    "\035\u0129\036\u0135\042\u012f\050\074\051\107\001\002\000" +
    "\004\006\u019a\001\002\000\004\032\u019b\001\002\000\014" +
    "\012\uffed\014\uffed\015\uffed\032\uffed\046\uffed\001\002\000" +
    "\004\014\u019d\001\002\000\004\015\014\001\002\000\004" +
    "\006\u019f\001\002\000\004\012\u01a0\001\002\000\014\012" +
    "\uffef\014\uffef\015\uffef\032\uffef\046\uffef\001\002\000\006" +
    "\003\ufff9\006\ufff9\001\002\000\006\003\ufffa\006\ufffa\001" +
    "\002\000\006\003\ufff8\006\ufff8\001\002\000\004\031\u01a8" +
    "\001\002\000\006\003\u01a6\031\u01a7\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\000\001\002\000\004\002\ufffc" +
    "\001\002\000\050\003\uff74\004\uff74\005\uff74\006\uff74\010" +
    "\uff74\012\uff74\013\uff74\014\uff74\015\uff74\032\uff74\035\uff74" +
    "\036\uff74\040\uff74\042\uff74\043\uff74\044\uff74\046\uff74\050" +
    "\uff74\051\uff74\001\002\000\050\003\uff73\004\uff73\005\uff73" +
    "\006\uff73\010\uff73\012\uff73\013\uff73\014\uff73\015\uff73\032" +
    "\uff73\035\uff73\036\uff73\040\uff73\042\uff73\043\uff73\044\uff73" +
    "\046\uff73\050\uff73\051\uff73\001\002\000\006\016\u01ac\017" +
    "\u01ad\001\002\000\004\051\047\001\002\000\012\020\u01b2" +
    "\023\u01ae\024\u01b1\051\u01b0\001\002\000\054\003\uff62\004" +
    "\uff62\005\uff62\006\uff62\010\uff62\011\u01c1\012\uff62\013\uff62" +
    "\014\uff62\015\uff62\016\uff62\032\uff62\035\uff62\036\uff62\040" +
    "\uff62\042\uff62\043\uff62\044\uff62\046\uff62\050\uff62\051\uff62" +
    "\001\002\000\050\003\uff72\004\uff72\005\uff72\006\uff72\010" +
    "\uff72\012\uff72\013\uff72\014\uff72\015\uff72\032\uff72\035\uff72" +
    "\036\uff72\040\uff72\042\uff72\043\uff72\044\uff72\046\uff72\050" +
    "\uff72\051\uff72\001\002\000\004\011\u01bc\001\002\000\054" +
    "\003\uff61\004\uff61\005\uff61\006\uff61\010\uff61\011\u01b9\012" +
    "\uff61\013\uff61\014\uff61\015\uff61\016\uff61\032\uff61\035\uff61" +
    "\036\uff61\040\uff61\042\uff61\043\uff61\044\uff61\046\uff61\050" +
    "\uff61\051\uff61\001\002\000\054\003\uff60\004\uff60\005\uff60" +
    "\006\uff60\010\uff60\011\u01b6\012\uff60\013\uff60\014\uff60\015" +
    "\uff60\016\uff60\032\uff60\035\uff60\036\uff60\040\uff60\042\uff60" +
    "\043\uff60\044\uff60\046\uff60\050\uff60\051\uff60\001\002\000" +
    "\052\003\uff6e\004\uff6e\005\uff6e\006\uff6e\010\uff6e\012\uff6e" +
    "\013\uff6e\014\uff6e\015\uff6e\016\u01b4\032\uff6e\035\uff6e\036" +
    "\uff6e\040\uff6e\042\uff6e\043\uff6e\044\uff6e\046\uff6e\050\uff6e" +
    "\051\uff6e\001\002\000\004\051\047\001\002\000\050\003" +
    "\uff71\004\uff71\005\uff71\006\uff71\010\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\032\uff71\035\uff71\036\uff71\040\uff71\042" +
    "\uff71\043\uff71\044\uff71\046\uff71\050\uff71\051\uff71\001\002" +
    "\000\006\021\u01b7\022\u01b8\001\002\000\050\003\uff65\004" +
    "\uff65\005\uff65\006\uff65\010\uff65\012\uff65\013\uff65\014\uff65" +
    "\015\uff65\032\uff65\035\uff65\036\uff65\040\uff65\042\uff65\043" +
    "\uff65\044\uff65\046\uff65\050\uff65\051\uff65\001\002\000\050" +
    "\003\uff64\004\uff64\005\uff64\006\uff64\010\uff64\012\uff64\013" +
    "\uff64\014\uff64\015\uff64\032\uff64\035\uff64\036\uff64\040\uff64" +
    "\042\uff64\043\uff64\044\uff64\046\uff64\050\uff64\051\uff64\001" +
    "\002\000\010\003\155\051\156\052\u01ba\001\002\000\052" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\010\uff66\012\uff66\013" +
    "\uff66\014\uff66\015\uff66\032\uff66\035\uff66\036\uff66\040\uff66" +
    "\042\uff66\043\uff66\044\uff66\045\uff87\046\uff66\050\uff66\051" +
    "\uff66\001\002\000\050\003\uff63\004\uff63\005\uff63\006\uff63" +
    "\010\uff63\012\uff63\013\uff63\014\uff63\015\uff63\032\uff63\035" +
    "\uff63\036\uff63\040\uff63\042\uff63\043\uff63\044\uff63\046\uff63" +
    "\050\uff63\051\uff63\001\002\000\004\030\u01bd\001\002\000" +
    "\006\003\u01be\051\u01bf\001\002\000\004\033\146\001\002" +
    "\000\004\033\114\001\002\000\050\003\uff6d\004\uff6d\005" +
    "\uff6d\006\uff6d\010\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d" +
    "\032\uff6d\035\uff6d\036\uff6d\040\uff6d\042\uff6d\043\uff6d\044" +
    "\uff6d\046\uff6d\050\uff6d\051\uff6d\001\002\000\012\003\144" +
    "\033\133\051\145\053\135\001\002\000\052\003\uff67\004" +
    "\uff67\005\uff67\006\uff67\010\uff67\012\uff67\013\uff67\014\uff67" +
    "\015\uff67\032\uff67\035\uff67\036\uff67\040\uff67\042\uff67\043" +
    "\uff67\044\uff67\046\uff67\050\uff67\051\uff67\054\142\001\002" +
    "\000\006\016\u0109\017\u01c4\001\002\000\010\020\057\023" +
    "\055\024\056\001\002\000\052\003\uff6f\004\uff6f\005\uff6f" +
    "\006\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016" +
    "\u01c6\032\uff6f\035\uff6f\036\uff6f\040\uff6f\042\uff6f\043\uff6f" +
    "\044\uff6f\046\uff6f\050\uff6f\051\uff6f\001\002\000\004\051" +
    "\047\001\002\000\050\003\uff70\004\uff70\005\uff70\006\uff70" +
    "\010\uff70\012\uff70\013\uff70\014\uff70\015\uff70\032\uff70\035" +
    "\uff70\036\uff70\040\uff70\042\uff70\043\uff70\044\uff70\046\uff70" +
    "\050\uff70\051\uff70\001\002\000\004\006\u01c9\001\002\000" +
    "\004\031\u01ca\001\002\000\004\002\ufffd\001\002\000\014" +
    "\012\021\014\020\015\014\032\022\046\023\001\002\000" +
    "\004\006\u01cd\001\002\000\004\031\u01ce\001\002\000\004" +
    "\002\ufffe\001\002\000\004\014\u01d0\001\002\000\014\012" +
    "\021\014\020\015\014\032\022\046\023\001\002\000\004" +
    "\006\u01d2\001\002\000\004\031\u01d3\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d1\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\023\012\u01c7\014" +
    "\024\015\015\023\016\001\001\000\014\003\023\012\014" +
    "\014\024\015\015\023\016\001\001\000\004\024\u01a8\001" +
    "\001\000\002\001\001\000\014\003\023\012\u01a2\014\024" +
    "\015\015\023\016\001\001\000\014\003\023\012\u01a1\014" +
    "\024\015\015\023\016\001\001\000\014\003\023\012\u01a0" +
    "\014\024\015\015\023\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\023\012\040" +
    "\014\024\015\015\023\016\001\001\000\014\003\031\013" +
    "\026\014\032\015\025\023\027\001\001\000\014\003\031" +
    "\013\037\014\032\015\025\023\027\001\001\000\002\001" +
    "\001\000\014\003\031\013\036\014\032\015\025\023\027" +
    "\001\001\000\014\003\031\013\035\014\032\015\025\023" +
    "\027\001\001\000\014\003\031\013\034\014\032\015\025" +
    "\023\027\001\001\000\014\003\031\013\033\014\032\015" +
    "\025\023\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\047\022\045\041\u010f\001\001\000\010\021\047\022" +
    "\045\041\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\074\007\102\010\063\016\101\023\066\027\065" +
    "\036\072\037\075\040\064\045\062\051\100\053\070\001" +
    "\001\000\002\001\001\000\032\004\074\007\102\010\063" +
    "\016\101\023\066\027\065\036\072\037\075\040\064\045" +
    "\062\051\100\053\360\001\001\000\032\004\074\007\102" +
    "\010\063\016\101\023\066\027\065\036\072\037\075\040" +
    "\064\045\062\051\100\053\357\001\001\000\002\001\001" +
    "\000\032\004\074\007\102\010\063\016\101\023\066\027" +
    "\065\036\072\037\075\040\064\045\062\051\100\053\356" +
    "\001\001\000\032\004\074\007\102\010\063\016\101\023" +
    "\066\027\065\036\072\037\075\040\064\045\062\051\100" +
    "\053\355\001\001\000\024\020\137\025\123\026\122\027" +
    "\121\032\354\033\124\034\140\055\130\056\135\001\001" +
    "\000\002\001\001\000\030\020\137\025\123\026\122\027" +
    "\121\033\234\034\237\042\235\043\271\044\232\055\130" +
    "\056\135\001\001\000\032\004\074\007\102\010\063\016" +
    "\101\023\066\027\065\036\072\037\075\040\064\045\062" +
    "\051\100\053\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\074" +
    "\007\102\010\063\016\101\023\066\027\065\036\072\037" +
    "\075\040\064\045\062\051\100\053\224\001\001\000\032" +
    "\004\074\007\102\010\063\016\101\023\066\027\065\036" +
    "\072\037\075\040\064\045\062\051\100\053\223\001\001" +
    "\000\032\004\074\007\102\010\063\016\101\023\066\027" +
    "\065\036\072\037\075\040\064\045\062\051\100\053\222" +
    "\001\001\000\032\004\074\007\102\010\063\016\101\023" +
    "\066\027\065\036\072\037\075\040\064\045\062\051\100" +
    "\053\221\001\001\000\036\004\074\007\102\010\063\015" +
    "\217\016\101\023\066\027\065\035\214\036\072\037\075" +
    "\040\064\045\062\051\100\053\216\001\001\000\006\011" +
    "\201\037\176\001\001\000\004\035\172\001\001\000\004" +
    "\035\107\001\001\000\014\020\137\025\123\026\122\027" +
    "\121\034\171\001\001\000\002\001\001\000\014\020\137" +
    "\025\123\026\122\027\121\034\167\001\001\000\010\033" +
    "\166\055\130\056\135\001\001\000\030\020\137\025\123" +
    "\026\122\027\121\030\120\031\127\032\117\033\124\034" +
    "\140\055\130\056\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\160\025\123\026\122\027\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\123\026" +
    "\142\027\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\137\025\123\026\122\027" +
    "\121\030\146\031\127\032\117\033\124\034\140\055\130" +
    "\056\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\151\027\121\001\001\000\002\001\001\000\006" +
    "\055\157\056\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\137\025" +
    "\123\026\122\027\121\032\164\033\124\034\140\055\130" +
    "\056\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\137\025\123\026" +
    "\122\027\121\034\175\001\001\000\010\033\174\055\130" +
    "\056\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\214\001\001\000\004\035\107" +
    "\001\001\000\002\001\001\000\012\020\203\025\123\026" +
    "\122\027\121\001\001\000\002\001\001\000\032\004\074" +
    "\007\102\010\063\016\101\023\066\027\065\036\072\037" +
    "\075\040\064\045\062\051\100\053\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\213\025\123\026\122" +
    "\027\121\001\001\000\002\001\001\000\014\020\137\025" +
    "\123\026\122\027\121\034\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\074\007\102\010\063\016" +
    "\101\023\066\027\065\036\072\037\075\040\064\045\062" +
    "\051\100\053\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\020\137\025\123\026\122\027\121\033\234\034" +
    "\237\042\235\043\251\044\232\055\130\056\135\001\001" +
    "\000\032\004\074\007\102\010\063\016\101\023\066\027" +
    "\065\036\072\037\075\040\064\045\062\051\100\053\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\020" +
    "\137\025\123\026\122\027\121\033\234\034\237\042\235" +
    "\043\236\044\232\055\130\056\135\001\001\000\002\001" +
    "\001\000\026\020\137\025\123\026\122\027\121\033\234" +
    "\034\237\042\235\044\250\055\130\056\135\001\001\000" +
    "\002\001\001\000\004\060\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\137\025\123\026\122\027" +
    "\121\033\234\034\237\042\235\044\243\055\130\056\135" +
    "\001\001\000\026\020\137\025\123\026\122\027\121\033" +
    "\234\034\237\042\235\044\242\055\130\056\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\020\137\025\123\026\122\027\121\033\234\034\237" +
    "\042\247\055\130\056\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\074\007\102\010\063\016\101\023\066\027\065\036" +
    "\072\037\075\040\064\045\062\051\100\053\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\054\265\055" +
    "\262\056\135\001\001\000\010\054\263\055\262\056\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\074\007\102\010\063\016\101\023" +
    "\066\027\065\036\072\037\075\040\064\045\062\051\100" +
    "\053\275\001\001\000\004\046\276\001\001\000\002\001" +
    "\001\000\030\020\137\025\123\026\122\027\121\033\234" +
    "\034\237\042\235\043\307\044\232\055\130\056\135\001" +
    "\001\000\002\001\001\000\004\046\305\001\001\000\032" +
    "\004\074\007\102\010\063\016\101\023\066\027\065\036" +
    "\072\037\075\040\064\045\062\051\100\053\303\001\001" +
    "\000\004\046\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\074\007\102\010\063\016" +
    "\101\023\066\027\065\036\072\037\075\040\064\045\062" +
    "\051\100\053\316\001\001\000\032\004\074\007\102\010" +
    "\063\016\101\023\066\027\065\036\072\037\075\040\064" +
    "\045\062\051\100\053\314\001\001\000\004\046\315\001" +
    "\001\000\002\001\001\000\004\046\317\001\001\000\002" +
    "\001\001\000\032\004\074\007\102\010\063\016\101\023" +
    "\066\027\065\036\072\037\075\040\064\045\062\051\100" +
    "\053\321\001\001\000\004\046\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\074\007\102\010\063" +
    "\016\101\023\066\027\065\036\072\037\075\040\064\045" +
    "\062\051\100\053\325\001\001\000\004\046\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\074\007\102\010\063\016\101\023\066\027\065" +
    "\036\072\037\075\040\064\045\062\051\100\053\340\001" +
    "\001\000\032\004\074\007\102\010\063\016\101\023\066" +
    "\027\065\036\072\037\075\040\064\045\062\051\100\053" +
    "\333\001\001\000\004\046\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\074\007" +
    "\102\010\063\016\101\023\066\027\065\036\072\037\075" +
    "\040\064\045\062\051\100\053\346\001\001\000\004\046" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\074\007\102\010\063\016" +
    "\101\023\066\027\065\036\072\037\075\040\064\045\062" +
    "\051\100\053\362\001\001\000\002\001\001\000\004\057" +
    "\373\001\001\000\004\057\365\001\001\000\002\001\001" +
    "\000\032\004\074\007\102\010\063\016\101\023\066\027" +
    "\065\036\072\037\075\040\064\045\062\051\100\053\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\074" +
    "\007\102\010\063\016\101\023\066\027\065\036\072\037" +
    "\075\040\064\045\062\051\100\053\u0101\001\001\000\032" +
    "\004\074\007\102\010\063\016\101\023\066\027\065\036" +
    "\072\037\075\040\064\045\062\051\100\053\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\074\007\102\010\063\016\101\023\066\027\065\036" +
    "\072\037\075\040\064\045\062\051\100\053\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\047\022\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u0112\001\001\000\002\001\001\000" +
    "\032\004\074\007\102\010\063\016\101\023\066\027\065" +
    "\036\072\037\075\040\064\045\062\051\100\053\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\047\022\045\041\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u011b\001\001\000\002" +
    "\001\001\000\032\004\074\007\102\010\063\016\101\023" +
    "\066\027\065\036\072\037\075\040\064\045\062\051\100" +
    "\053\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\047\022\045\041\u018e\001\001\000\010\021\047\022" +
    "\045\041\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\074\005\u012b\006\u0130\016" +
    "\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064\050\u0135" +
    "\052\u0132\001\001\000\002\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0183\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0182\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0181\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0180\001\001\000\030\020\137\025" +
    "\123\026\122\027\121\033\234\034\237\042\235\043\u0150" +
    "\044\232\055\130\056\135\001\001\000\002\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0144\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0143\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0142\001\001\000" +
    "\002\001\001\000\032\004\074\005\u012b\006\u0130\016\u0131" +
    "\023\u012a\027\u0129\035\214\036\u012c\037\075\040\064\050" +
    "\u0135\052\u013e\001\001\000\006\011\u0137\037\176\001\001" +
    "\000\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027" +
    "\u0129\036\u012c\037\075\040\064\050\u0135\052\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\u0139\025" +
    "\123\026\122\027\121\001\001\000\002\001\001\000\030" +
    "\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036" +
    "\u012c\037\075\040\064\050\u0135\052\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\074\005\u012b\006" +
    "\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064" +
    "\050\u0135\052\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\020\137\025" +
    "\123\026\122\027\121\033\234\034\237\042\235\043\u014b" +
    "\044\232\055\130\056\135\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0147\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\020\137\025\123\026\122\027\121" +
    "\033\234\034\237\042\235\043\u014a\044\232\055\130\056" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036" +
    "\u012c\037\075\040\064\050\u0135\052\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\074" +
    "\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037" +
    "\075\040\064\050\u0135\052\u0171\001\001\000\030\004\074" +
    "\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037" +
    "\075\040\064\050\u0135\052\u0155\001\001\000\004\047\u0158" +
    "\001\001\000\002\001\001\000\030\020\137\025\123\026" +
    "\122\027\121\033\234\034\237\042\235\043\u015d\044\232" +
    "\055\130\056\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0164\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0162\001\001\000" +
    "\004\047\u0163\001\001\000\002\001\001\000\004\047\u0165" +
    "\001\001\000\002\001\001\000\030\004\074\005\u012b\006" +
    "\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064" +
    "\050\u0135\052\u0167\001\001\000\004\047\u0168\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\074\005\u012b" +
    "\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075\040" +
    "\064\050\u0135\052\u016b\001\001\000\004\047\u016c\001\001" +
    "\000\002\001\001\000\030\004\074\005\u012b\006\u0130\016" +
    "\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064\050\u0135" +
    "\052\u0170\001\001\000\030\004\074\005\u012b\006\u0130\016" +
    "\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064\050\u0135" +
    "\052\u016f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\074\005\u012b\006\u0130\016" +
    "\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064\050\u0135" +
    "\052\u0176\001\001\000\004\047\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027" +
    "\u0129\036\u012c\037\075\040\064\050\u0135\052\u017c\001\001" +
    "\000\004\047\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\074\005" +
    "\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037\075" +
    "\040\064\050\u0135\052\u0185\001\001\000\002\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u018b\001\001\000" +
    "\030\004\074\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129" +
    "\036\u012c\037\075\040\064\050\u0135\052\u0188\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\074\005\u012b\006\u0130" +
    "\016\u0131\023\u012a\027\u0129\036\u012c\037\075\040\064\050" +
    "\u0135\052\u0191\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\047\022\045\041\u0195\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\074" +
    "\005\u012b\006\u0130\016\u0131\023\u012a\027\u0129\036\u012c\037" +
    "\075\040\064\050\u0135\052\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u019d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u01c2" +
    "\001\001\000\006\017\u01ae\057\u01b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\047\022" +
    "\u01b4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\u01ba\056\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u01bf\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u01c1\025\123\026\122" +
    "\027\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u01c4\001\001\000\002\001\001\000\006\021\047" +
    "\022\u01c6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\023\012\u01cb" +
    "\014\024\015\015\023\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\023\012\u01d0\014\024\015\015\023\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;    
    public int cont = 0;
    public ArrayList<String> errores = new ArrayList<>();

    public void syntax_error(Symbol s){
        errores.add("Syntax error: " +  s.value + " Linea: " + (s.left + 1) + " Columna: " + (s.right + 1));
    }

    //public void unrecovered_syntax_error


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            System.out.println("Listo Module");
            Nodo node = new Nodo("INICIO",parser.cont);
            parser.cont++;
            node.addHijo(new Nodo("MODULE", parser.cont));
            parser.cont++;
            node.addHijo(new Nodo(id, parser.cont));
            parser.cont++;
            node.addHijo(m);
            parser.raiz = node;            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un MODULE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= MODULE error saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador para el module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= MODULE identificador error MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado del module"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= MODULE identificador saltoLinea MDLINSTRUC error MODULE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MODULE identificador saltoLinea MDLINSTRUC END error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un MODULE al final del archivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Nodo RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = md;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo md = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                    
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    node.addHijo(md);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= DECLARACION MDLINP 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MDLINP ::= saltoLinea MDLINP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (m != null){
                        RESULT=m;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MDLINP ::= SUBPROCE MDLINP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(s);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MDLINP ::= FUNC MDLINP 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("MODULE INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(f);
                    if (m != null){
                        node.addHijo(m);
                    }                    
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MDLINP ::= saltoLinea 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MDLINP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea DECLARACION END STRUCTURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("SUB",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }
                        if (s != null){
                            node.addHijo(s);
                        }                          
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBPROCE ::= SUB error PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para el sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBPROCE ::= SUB identificador error PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS error saltoLinea SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR error SUBINSTRUC END SUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea en el encabezado del sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPROCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (s != null){
                        node.addHijo(s);   
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (s != null){
                        RESULT = s;   
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT SUB",parser.cont));
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("SUB INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUBINSTRUC ::= error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUBINSTRUC ::= error SUB SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUBINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    } 
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFSUB ::= IF error THEN saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IFSUB ::= IF CONDICION error saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFSUB ::= IF CONDICION THEN error SUBINSTRUC SIFSUB END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFSUB ::= IF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSUB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    if (s2 != null){
                        node.addHijo(s2);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);   
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIFSUB ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIFSUB ::= ELSEIF error THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIFSUB ::= ELSEIF CONDICION error saltoLinea SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIFSUB ::= ELSEIF CONDICION THEN error SUBINSTRUC SIFSUB 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIFSUB ::= ELSE error SUBINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFSUB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DOWHILESUB ::= DO saltoLinea SUBINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSUB",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Nodo node = new Nodo("FUNCTION",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id,parser.cont));
                        parser.cont++;
                        if (p != null){
                            node.addHijo(p);
                        }                        
                        node.addHijo(new Nodo(t,parser.cont));
                        parser.cont++;
                        if (f != null){
                            node.addHijo(f);
                        }                        
                        RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNC ::= FUNCTION error PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador para la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNC ::= FUNCTION identificador error PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis izquierdo en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS error AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un parentesis derecho en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR error TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un AS en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS error saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un TIPO en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO error FUNCINSTRUC END FUNCTION 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea en el encabezado de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(d);
                    if (f != null){
                        node.addHijo(f);
                    }                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("EXIT FUNCTION",parser.cont));
                    parser.cont++;
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(a);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(r);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(w);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo("FUN INSTRUCTIONS",parser.cont);
                    parser.cont++;
                    node.addHijo(i);
                    if (f != null){
                        node.addHijo(f);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCINSTRUC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCINSTRUC ::= error FUNC FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un EXIT o END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCINSTRUC ::= error FUNCINSTRUC 
            {
              Nodo RESULT =null;
		 errores.add("Error desconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo node = new Nodo("IF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IFFUNC ::= IF error THEN saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Error en codición del if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IFFUNC ::= IF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IFFUNC ::= IF CONDICION THEN error FUNCINSTRUC SIFFUNC END IF 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IFFUNC ::= IF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC END error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFFUNC",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSEIF",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    if (f != null){
                        node.addHijo(f);
                    }
                    if (s != null){
                        node.addHijo(s);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIFFUNC ::= ELSE saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ELSE",parser.cont);
                    parser.cont++;
                    if (s != null){
                        node.addHijo(s);
                    }
                    if (f != null){
                        node.addHijo(f);
                    }
                    node.addHijo(s);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIFFUNC ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIFFUNC ::= ELSEIF error THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Error en la condición"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIFFUNC ::= ELSEIF CONDICION error saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un THEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIFFUNC ::= ELSEIF CONDICION THEN error FUNCINSTRUC SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIFFUNC ::= ELSE error SIFFUNC 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un salto de línea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIFFUNC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORFUNC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DOWHILEFUNC ::= DO saltoLinea FUNCINSTRUC LOOP WHILE CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETVAL ::= RETURN VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("RETURN",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETVAL",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAL ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAL ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COUNTER",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("FUNCTION CALL",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(i,parser.cont));
                    parser.cont++;
                    if (p != null){
                        node.addHijo(p);
                    }                    
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CALL ::= error PARENTESISL PARAMCALL PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMCALL ::= VARCALL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMCALL ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARCALL ::= VARCALL COMA VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARCALL",parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(val);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARCALL ::= VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARCALL ::= VARCALL error 
            {
              Nodo RESULT =null;
		 errores.add("Error en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARCALL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("AND",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("OR",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(c1);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= NOT CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("NOT",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(o,parser.cont);
                    parser.cont++;
                    node.addHijo(v);
                    node.addHijo(v2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 
                    RESULT="=";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALCOND ::= VALASIGN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALCOND ::= VALINT 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALCOND",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS ::= VARS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;                                   
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGN ::= ASIGNOTRO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ASIGN ::= ASIGNINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIGN ::= ASIGNSTRUC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALASIGN ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(str.substring(1,str.length()-1),parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALASIGN ::= TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("TRUE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALASIGN ::= FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("FALSE",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALASIGN ::= UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(ustr,parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALASIGN ::= READ 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("read console",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=v+ustr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT= v+v2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALUNIRSTR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALUNIRSTR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALUNIRSTR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un valor String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNINT ::= identificador error VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNINT ::= error OPASING VALINT 
            {
              Nodo RESULT =null;
		 errores.add("Error en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNINT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPASING ::= IGUAL 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPASING ::= OPMULTI IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPASING ::= OPADICION IGUAL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo(op+"=",parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPASING",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALINT ::= OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALINT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPARIT ::= OPARIT OPADICION OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    Nodo node = new Nodo(oPa,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPARIT ::= OP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP ::= OP OPMULTI OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(oM,parser.cont); 
                    parser.cont++;
                    node.addHijo(o);
                    node.addHijo(op);
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP ::= OPP 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                     
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPP ::= INTEGER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(i,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPP ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Nodo node = new Nodo(id,parser.cont); 
                    parser.cont++;
                    RESULT = node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPP ::= CALL 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = c;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = o;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPP ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Error en operación con Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= DIM T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= DIM error 
            {
              Nodo RESULT =null;
		 errores.add("Error en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // T ::= identificador AS TIPOIGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(t);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // T ::= identificador AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // T ::= identificador COMA CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // T ::= identificador COMA CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // T ::= identificador AS TIPO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // T ::= identificador AS identificador IGUAL NEW CALL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VARS ::= CANTVARS AS TIPO COMA VARS 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    node.addHijo(v);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VARS ::= CANTVARS AS TIPO 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS", parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(t,parser.cont));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VARS ::= CANTVARS error 
            {
              Nodo RESULT =null;
		 errores.add("Error en variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CANTVARS ::= CANTVARS COMA identificador 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("VARS",parser.cont);
                    parser.cont++;
                    node.addHijo(c);
                    node.addHijo(new Nodo(id,parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CANTVARS ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo(id,parser.cont);
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTVARS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("INTEGER",parser.cont));
                    parser.cont++;
                    node.addHijo(o);
                    RESULT=node;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(str.substring(1,str.length()-1),parser.cont));
                    parser.cont++;
                    RESULT=node; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("TRUE",parser.cont));
                    parser.cont++;
                    RESULT=node;  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("BOOLEAN",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo("FALSE",parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Nodo RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("=",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("STRING",parser.cont));
                    parser.cont++;
                    node.addHijo(new Nodo(ustr,parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo node = new Nodo("console.write",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo(v,parser.cont));
                    parser.cont++;
                    RESULT=node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // WRCONSOLE ::= WRITE error VALWR PARENTESISR 
            {
              Nodo RESULT =null;
		 errores.add("Error en console.write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VALWR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VALWR ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=str.substring(1,str.length()-1);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALWR ::= UNIRSTRNG 
            {
              String RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ustr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ustr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VALWR ::= error 
            {
              String RESULT =null;
		 errores.add("Se esperaba un String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALWR",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
