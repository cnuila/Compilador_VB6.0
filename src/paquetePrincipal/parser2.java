
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\040\010\000\002\010\004\000\002\010" +
    "\004\000\002\010\003\000\002\005\013\000\002\006\015" +
    "\000\002\045\003\000\002\045\002\000\002\044\007\000" +
    "\002\044\007\000\002\044\005\000\002\044\005\000\002" +
    "\060\005\000\002\060\003\000\002\057\005\000\002\057" +
    "\005\000\002\037\004\000\002\037\004\000\002\037\005" +
    "\000\002\037\005\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\002\000\002\036" +
    "\013\000\002\035\010\000\002\035\005\000\002\035\002" +
    "\000\002\053\010\000\002\052\011\000\002\034\004\000" +
    "\002\022\003\000\002\022\003\000\002\042\003\000\002" +
    "\042\007\000\002\017\006\000\002\020\003\000\002\020" +
    "\002\000\002\021\005\000\002\021\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\003\000" +
    "\002\033\005\000\002\050\003\000\002\050\003\000\002" +
    "\031\003\000\002\031\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\030\005\000\002\041\005" +
    "\000\002\041\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\011\005\000\002\011\005\000\002\047\003\000\002\047" +
    "\003\000\002\027\005\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\024\003\000\002\013\005\000" +
    "\002\013\003\000\002\016\005\000\002\016\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\014\004\000\002\051\005\000\002\051\007" +
    "\000\002\051\007\000\002\051\005\000\002\051\005\000" +
    "\002\056\005\000\002\056\003\000\002\055\005\000\002" +
    "\055\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\006" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\007\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\046\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\030\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\014\012\016\013\014\014" +
    "\011\031\017\045\020\001\002\000\004\050\335\001\002" +
    "\000\004\006\332\001\002\000\014\012\016\013\014\014" +
    "\011\031\017\045\020\001\002\000\014\012\016\013\014" +
    "\014\011\031\017\045\020\001\002\000\014\012\016\013" +
    "\014\014\011\031\017\045\020\001\002\000\004\050\316" +
    "\001\002\000\004\050\306\001\002\000\004\050\037\001" +
    "\002\000\014\012\016\013\014\014\011\031\017\045\020" +
    "\001\002\000\014\012\016\013\025\014\011\031\017\045" +
    "\020\001\002\000\014\012\016\013\025\014\011\031\017" +
    "\045\020\001\002\000\004\006\ufffc\001\002\000\016\006" +
    "\ufff5\012\016\013\025\014\011\031\017\045\020\001\002" +
    "\000\014\012\016\013\025\014\011\031\017\045\020\001" +
    "\002\000\014\012\016\013\025\014\011\031\017\045\020" +
    "\001\002\000\014\012\016\013\025\014\011\031\017\045" +
    "\020\001\002\000\004\006\ufff8\001\002\000\004\006\ufff6" +
    "\001\002\000\004\006\ufffa\001\002\000\004\006\ufff9\001" +
    "\002\000\004\006\ufff7\001\002\000\004\006\ufffb\001\002" +
    "\000\004\032\040\001\002\000\006\033\uffed\050\042\001" +
    "\002\000\004\033\uffee\001\002\000\006\015\266\016\267" +
    "\001\002\000\004\033\044\001\002\000\004\016\045\001" +
    "\002\000\012\017\051\022\046\023\050\050\047\001\002" +
    "\000\052\004\uff93\005\uff93\006\uff93\010\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\031\uff93\033\uff93\034\uff93\035\uff93" +
    "\037\uff93\041\uff93\042\uff93\043\uff93\045\uff93\047\uff93\050" +
    "\uff93\056\uff93\001\002\000\052\004\uff90\005\uff90\006\uff90" +
    "\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\031\uff90\033" +
    "\uff90\034\uff90\035\uff90\037\uff90\041\uff90\042\uff90\043\uff90" +
    "\045\uff90\047\uff90\050\uff90\056\uff90\001\002\000\052\004" +
    "\uff92\005\uff92\006\uff92\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\031\uff92\033\uff92\034\uff92\035\uff92\037\uff92\041" +
    "\uff92\042\uff92\043\uff92\045\uff92\047\uff92\050\uff92\056\uff92" +
    "\001\002\000\052\004\uff91\005\uff91\006\uff91\010\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\031\uff91\033\uff91\034\uff91" +
    "\035\uff91\037\uff91\041\uff91\042\uff91\043\uff91\045\uff91\047" +
    "\uff91\050\uff91\056\uff91\001\002\000\004\013\053\001\002" +
    "\000\030\004\064\006\uffd9\013\073\014\011\034\054\035" +
    "\076\041\072\043\062\047\066\050\100\056\077\001\002" +
    "\000\006\031\262\045\263\001\002\000\040\004\064\005" +
    "\uffd9\006\uffd9\010\uffd9\013\073\014\011\034\054\035\076" +
    "\037\uffd9\041\072\042\uffd9\043\062\047\066\050\100\056" +
    "\077\001\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9" +
    "\013\073\014\011\034\054\035\076\037\uffd9\041\072\042" +
    "\uffd9\043\062\047\066\050\100\056\077\001\002\000\040" +
    "\004\uffbf\005\uffbf\006\uffbf\010\uffbf\013\uffbf\014\uffbf\034" +
    "\uffbf\035\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf\047\uffbf" +
    "\050\uffbf\056\uffbf\001\002\000\040\004\064\005\uffd9\006" +
    "\uffd9\010\uffd9\013\073\014\011\034\054\035\076\037\uffd9" +
    "\041\072\042\uffd9\043\062\047\066\050\100\056\077\001" +
    "\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9\013\073" +
    "\014\011\034\054\035\076\037\uffd9\041\072\042\uffd9\043" +
    "\062\047\066\050\100\056\077\001\002\000\020\020\116" +
    "\021\122\032\123\046\107\050\126\051\117\052\124\001" +
    "\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9\013\073" +
    "\014\011\034\054\035\076\037\uffd9\041\072\042\uffd9\043" +
    "\062\047\066\050\100\056\077\001\002\000\022\020\116" +
    "\021\122\026\201\032\123\046\107\050\126\051\117\052" +
    "\124\001\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9" +
    "\013\073\014\011\034\054\035\076\037\uffd9\041\072\042" +
    "\uffd9\043\062\047\066\050\100\056\077\001\002\000\004" +
    "\032\224\001\002\000\004\006\222\001\002\000\040\004" +
    "\uffbd\005\uffbd\006\uffbd\010\uffbd\013\uffbd\014\uffbd\034\uffbd" +
    "\035\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\050" +
    "\uffbd\056\uffbd\001\002\000\040\004\uffbe\005\uffbe\006\uffbe" +
    "\010\uffbe\013\uffbe\014\uffbe\034\uffbe\035\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\047\uffbe\050\uffbe\056\uffbe\001\002" +
    "\000\004\040\177\001\002\000\040\004\064\005\uffd9\006" +
    "\uffd9\010\uffd9\013\073\014\011\034\054\035\076\037\uffd9" +
    "\041\072\042\uffd9\043\062\047\066\050\100\056\077\001" +
    "\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9\013\073" +
    "\014\011\034\054\035\076\037\uffd9\041\072\042\uffd9\043" +
    "\062\047\066\050\100\056\077\001\002\000\040\004\064" +
    "\005\uffd9\006\uffd9\010\uffd9\013\073\014\011\034\054\035" +
    "\076\037\uffd9\041\072\042\uffd9\043\062\047\066\050\100" +
    "\056\077\001\002\000\004\050\160\001\002\000\010\011" +
    "\154\053\102\054\105\001\002\000\012\011\103\032\104" +
    "\053\102\054\105\001\002\000\010\032\123\050\133\052" +
    "\124\001\002\000\004\011\151\001\002\000\020\020\116" +
    "\021\122\032\uffaf\046\107\050\uffaf\051\117\052\uffaf\001" +
    "\002\000\022\020\116\021\122\032\123\033\uffcb\046\107" +
    "\050\126\051\117\052\124\001\002\000\004\011\106\001" +
    "\002\000\010\032\uffae\050\uffae\052\uffae\001\002\000\056" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\024\uffb5\025\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\047\uffb5\050" +
    "\uffb5\055\uffb5\056\uffb5\001\002\000\006\015\uffc9\033\uffc9" +
    "\001\002\000\004\033\147\001\002\000\072\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\024\uffa5\025\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\072\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\024" +
    "\uffaa\025\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\041\uffaa\042\uffaa\043\uffaa\045\uffaa\047\uffaa\050" +
    "\uffaa\053\uffaa\054\134\055\uffaa\056\uffaa\001\002\000\072" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\024\uffa8\025\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\047\uffa8\050\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\001\002\000\044\004\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1\047\uffd1\050" +
    "\uffd1\056\uffd1\001\002\000\056\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\024" +
    "\uffb8\025\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\047\uffb8\050\uffb8\055\uffb8\056\uffb8\001" +
    "\002\000\060\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\013\uffb9\014\uffb9\015\uffb9\024\uffb9\025\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb2\047\uffb9\050\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\006\015\145\033\uffcc\001\002\000\056\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\024\uffb6\025\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\047\uffb6\050\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\024\uffb7\025" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\047\uffb7\050\uffb7\055\uffb7\056\uffb7\001\002\000" +
    "\010\032\123\050\133\052\124\001\002\000\072\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\024\uffa7\025\uffa7\031\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\045\uffa7\047\uffa7\050\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\001\002\000\004\044\136\001\002\000\066\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\024\uffa6\025\uffa6\032\104\033\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffb1" +
    "\047\uffa6\050\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\062\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\013\uffac\014\uffac\015\uffac\024\uffac\025\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\041\uffac\042\uffac" +
    "\043\uffac\047\uffac\050\uffac\053\131\055\uffac\056\uffac\001" +
    "\002\000\044\004\uffd0\005\uffd0\006\uffd0\010\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\047\uffd0\050\uffd0\056\uffd0\001\002" +
    "\000\010\032\123\050\133\052\124\001\002\000\072\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\024\uffab\025\uffab\031\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\041\uffab\042\uffab" +
    "\043\uffab\045\uffab\047\uffab\050\uffab\053\uffab\054\134\055" +
    "\uffab\056\uffab\001\002\000\074\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\024\uffa6\025\uffa6\031\uffa6\032\104\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\045" +
    "\uffa6\047\uffa6\050\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\001\002\000\010\032\123\050\133\052\124\001\002\000" +
    "\072\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\024\uffa9\025\uffa9\031" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\045\uffa9\047\uffa9\050\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\001\002\000\006\050\140\051\137" +
    "\001\002\000\066\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\024\uffb2" +
    "\025\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2" +
    "\055\uffb2\056\uffb2\001\002\000\066\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\024\uffb1\025\uffb1\031\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\047\uffb1\050\uffb1\055\uffb1\056\uffb1\001\002\000\066\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\024\uffb3\025\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\136\045\uffb3\047\uffb3\050\uffb3\055\uffb3\056\uffb3\001" +
    "\002\000\064\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\024\uffb4\025" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\045\uffb4\047\uffb4\050\uffb4\055\uffb4\056" +
    "\uffb4\001\002\000\006\033\144\053\131\001\002\000\072" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\024\uffa4\025\uffa4\031\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\045\uffa4\047\uffa4\050\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\001\002\000\020\020\116\021\122\032" +
    "\123\046\107\050\126\051\117\052\124\001\002\000\006" +
    "\015\uffca\033\uffca\001\002\000\072\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\024\uffcd\025\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\001" +
    "\002\000\040\004\uffbc\005\uffbc\006\uffbc\010\uffbc\013\uffbc" +
    "\014\uffbc\034\uffbc\035\uffbc\037\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\047\uffbc\050\uffbc\056\uffbc\001\002\000\010\032\uffad" +
    "\050\uffad\052\uffad\001\002\000\042\004\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\013\uffb0\014\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\041\uffb0\042\uffb0\043\uffb0\047\uffb0\050\uffb0\056" +
    "\uffb0\001\002\000\010\032\123\050\133\052\124\001\002" +
    "\000\020\020\116\021\122\032\uffaf\046\107\050\uffaf\051" +
    "\117\052\uffaf\001\002\000\040\004\uffbb\005\uffbb\006\uffbb" +
    "\010\uffbb\013\uffbb\014\uffbb\034\uffbb\035\uffbb\037\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\047\uffbb\050\uffbb\056\uffbb\001\002" +
    "\000\040\004\uffba\005\uffba\006\uffba\010\uffba\013\uffba\014" +
    "\uffba\034\uffba\035\uffba\037\uffba\041\uffba\042\uffba\043\uffba" +
    "\047\uffba\050\uffba\056\uffba\001\002\000\004\036\uffcf\001" +
    "\002\000\012\011\170\016\167\053\102\054\105\001\002" +
    "\000\004\036\162\001\002\000\010\032\123\050\133\052" +
    "\124\001\002\000\006\013\164\053\131\001\002\000\030" +
    "\004\064\013\073\014\011\034\054\035\076\037\uffd9\041" +
    "\072\043\062\047\066\050\100\056\077\001\002\000\004" +
    "\037\166\001\002\000\040\004\uffd3\005\uffd3\006\uffd3\010" +
    "\uffd3\013\uffd3\014\uffd3\034\uffd3\035\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\047\uffd3\050\uffd3\056\uffd3\001\002\000" +
    "\004\022\171\001\002\000\010\032\uffaf\050\uffaf\052\uffaf" +
    "\001\002\000\004\011\172\001\002\000\010\032\123\050" +
    "\133\052\124\001\002\000\006\036\uffce\053\131\001\002" +
    "\000\014\005\uffda\006\uffda\010\uffda\037\uffda\042\uffda\001" +
    "\002\000\014\005\uffdd\006\uffdd\010\uffdd\037\uffdd\042\uffdd" +
    "\001\002\000\014\005\uffe3\006\uffe3\010\uffe3\037\uffe3\042" +
    "\uffe3\001\002\000\022\020\116\021\122\026\201\032\123" +
    "\046\107\050\126\051\117\052\124\001\002\000\012\007" +
    "\uffc5\013\uffc5\024\uffc5\025\uffc5\001\002\000\020\020\116" +
    "\021\122\032\123\046\107\050\126\051\117\052\124\001" +
    "\002\000\016\007\uffc1\011\uffc1\013\uffc1\024\uffc1\025\uffc1" +
    "\055\uffc1\001\002\000\006\011\217\055\215\001\002\000" +
    "\010\013\210\024\206\025\207\001\002\000\016\007\uffc0" +
    "\011\uffc0\013\uffc0\024\uffc0\025\uffc0\055\uffc0\001\002\000" +
    "\020\020\116\021\122\032\123\046\107\050\126\051\117" +
    "\052\124\001\002\000\020\020\116\021\122\032\123\046" +
    "\107\050\126\051\117\052\124\001\002\000\030\004\064" +
    "\013\073\014\011\034\054\035\076\041\072\042\uffd9\043" +
    "\062\047\066\050\100\056\077\001\002\000\004\042\212" +
    "\001\002\000\040\004\uffd4\005\uffd4\006\uffd4\010\uffd4\013" +
    "\uffd4\014\uffd4\034\uffd4\035\uffd4\037\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\047\uffd4\050\uffd4\056\uffd4\001\002\000\012\007" +
    "\uffc7\013\uffc7\024\uffc7\025\uffc7\001\002\000\012\007\uffc8" +
    "\013\uffc8\024\uffc8\025\uffc8\001\002\000\020\020\uffc3\021" +
    "\uffc3\032\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002" +
    "\000\020\020\116\021\122\032\123\046\107\050\126\051" +
    "\117\052\124\001\002\000\020\020\uffc2\021\uffc2\032\uffc2" +
    "\046\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\012\007" +
    "\uffc4\013\uffc4\024\uffc4\025\uffc4\001\002\000\012\007\uffc6" +
    "\013\uffc6\024\uffc6\025\uffc6\001\002\000\004\045\223\001" +
    "\002\000\014\012\uffef\013\uffef\014\uffef\031\uffef\045\uffef" +
    "\001\002\000\006\050\226\051\225\001\002\000\006\033" +
    "\uff8d\044\uffb2\001\002\000\006\033\uff8e\044\uffb1\001\002" +
    "\000\004\033\uff8c\001\002\000\004\033\231\001\002\000" +
    "\040\004\uff8f\005\uff8f\006\uff8f\010\uff8f\013\uff8f\014\uff8f" +
    "\034\uff8f\035\uff8f\037\uff8f\041\uff8f\042\uff8f\043\uff8f\047" +
    "\uff8f\050\uff8f\056\uff8f\001\002\000\014\005\uffe0\006\uffe0" +
    "\010\uffe0\037\uffe0\042\uffe0\001\002\000\010\007\234\024" +
    "\206\025\207\001\002\000\004\013\uff8b\001\002\000\004" +
    "\013\236\001\002\000\034\004\064\005\uffd9\006\uffd9\010" +
    "\uffd9\013\073\014\011\034\054\035\076\041\072\043\062" +
    "\047\066\050\100\056\077\001\002\000\010\005\241\006" +
    "\uffd5\010\240\001\002\000\022\020\116\021\122\026\201" +
    "\032\123\046\107\050\126\051\117\052\124\001\002\000" +
    "\004\013\245\001\002\000\004\006\243\001\002\000\004" +
    "\004\244\001\002\000\040\004\uffd8\005\uffd8\006\uffd8\010" +
    "\uffd8\013\uffd8\014\uffd8\034\uffd8\035\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\047\uffd8\050\uffd8\056\uffd8\001\002\000" +
    "\030\004\064\006\uffd9\013\073\014\011\034\054\035\076" +
    "\041\072\043\062\047\066\050\100\056\077\001\002\000" +
    "\004\006\uffd6\001\002\000\010\007\250\024\206\025\207" +
    "\001\002\000\004\013\251\001\002\000\034\004\064\005" +
    "\uffd9\006\uffd9\010\uffd9\013\073\014\011\034\054\035\076" +
    "\041\072\043\062\047\066\050\100\056\077\001\002\000" +
    "\010\005\241\006\uffd5\010\240\001\002\000\004\006\uffd7" +
    "\001\002\000\014\005\uffdc\006\uffdc\010\uffdc\037\uffdc\042" +
    "\uffdc\001\002\000\040\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\013\uffd2\014\uffd2\034\uffd2\035\uffd2\037\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\047\uffd2\050\uffd2\056\uffd2\001\002\000\014" +
    "\005\uffe4\006\uffe4\010\uffe4\037\uffe4\042\uffe4\001\002\000" +
    "\014\005\uffde\006\uffde\010\uffde\037\uffde\042\uffde\001\002" +
    "\000\014\005\uffdf\006\uffdf\010\uffdf\037\uffdf\042\uffdf\001" +
    "\002\000\014\005\uffdb\006\uffdb\010\uffdb\037\uffdb\042\uffdb" +
    "\001\002\000\040\004\064\005\uffd9\006\uffd9\010\uffd9\013" +
    "\073\014\011\034\054\035\076\037\uffd9\041\072\042\uffd9" +
    "\043\062\047\066\050\100\056\077\001\002\000\040\004" +
    "\064\005\uffd9\006\uffd9\010\uffd9\013\073\014\011\034\054" +
    "\035\076\037\uffd9\041\072\042\uffd9\043\062\047\066\050" +
    "\100\056\077\001\002\000\014\005\uffe1\006\uffe1\010\uffe1" +
    "\037\uffe1\042\uffe1\001\002\000\014\005\uffe2\006\uffe2\010" +
    "\uffe2\037\uffe2\042\uffe2\001\002\000\004\050\272\001\002" +
    "\000\012\017\051\022\046\023\050\050\047\001\002\000" +
    "\006\015\271\033\uffe9\001\002\000\004\050\272\001\002" +
    "\000\006\015\277\016\300\001\002\000\004\033\uffec\001" +
    "\002\000\006\015\275\033\uffe7\001\002\000\004\050\272" +
    "\001\002\000\004\033\uffe8\001\002\000\004\050\272\001" +
    "\002\000\012\017\051\022\046\023\050\050\047\001\002" +
    "\000\006\015\uffe5\033\uffe5\001\002\000\006\015\uffe6\033" +
    "\uffe6\001\002\000\006\015\304\033\uffea\001\002\000\004" +
    "\050\272\001\002\000\004\033\uffeb\001\002\000\004\032" +
    "\307\001\002\000\006\033\uffed\050\042\001\002\000\004" +
    "\033\311\001\002\000\004\013\312\001\002\000\030\004" +
    "\064\006\uffd9\013\073\014\011\034\054\035\076\041\072" +
    "\043\062\047\066\050\100\056\077\001\002\000\004\006" +
    "\314\001\002\000\004\031\315\001\002\000\014\012\ufff0" +
    "\013\ufff0\014\ufff0\031\ufff0\045\ufff0\001\002\000\004\013" +
    "\317\001\002\000\006\013\322\014\011\001\002\000\006" +
    "\013\322\014\011\001\002\000\004\006\324\001\002\000" +
    "\010\006\ufff1\013\322\014\011\001\002\000\004\006\ufff2" +
    "\001\002\000\004\012\325\001\002\000\014\012\ufff4\013" +
    "\ufff4\014\ufff4\031\ufff4\045\ufff4\001\002\000\004\006\ufff3" +
    "\001\002\000\004\006\uffff\001\002\000\004\006\ufffe\001" +
    "\002\000\004\006\ufffd\001\002\000\004\030\333\001\002" +
    "\000\004\002\000\001\002\000\046\004\uffa3\005\uffa3\006" +
    "\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\031\uffa3\034\uffa3" +
    "\035\uffa3\037\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\047" +
    "\uffa3\050\uffa3\056\uffa3\001\002\000\006\015\336\016\337" +
    "\001\002\000\004\050\350\001\002\000\012\017\344\022" +
    "\340\023\343\050\342\001\002\000\052\004\uff93\005\uff93" +
    "\006\uff93\010\uff93\011\372\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\031\uff93\034\uff93\035\uff93\037\uff93\041\uff93\042\uff93" +
    "\043\uff93\045\uff93\047\uff93\050\uff93\056\uff93\001\002\000" +
    "\046\004\uffa2\005\uffa2\006\uffa2\010\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\031\uffa2\034\uffa2\035\uffa2\037\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\045\uffa2\047\uffa2\050\uffa2\056\uffa2\001\002" +
    "\000\052\004\uff90\005\uff90\006\uff90\010\uff90\011\366\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\031\uff90\034\uff90\035\uff90" +
    "\037\uff90\041\uff90\042\uff90\043\uff90\045\uff90\047\uff90\050" +
    "\uff90\056\uff90\001\002\000\052\004\uff92\005\uff92\006\uff92" +
    "\010\uff92\011\363\012\uff92\013\uff92\014\uff92\015\uff92\031" +
    "\uff92\034\uff92\035\uff92\037\uff92\041\uff92\042\uff92\043\uff92" +
    "\045\uff92\047\uff92\050\uff92\056\uff92\001\002\000\052\004" +
    "\uff91\005\uff91\006\uff91\010\uff91\011\360\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\031\uff91\034\uff91\035\uff91\037\uff91\041" +
    "\uff91\042\uff91\043\uff91\045\uff91\047\uff91\050\uff91\056\uff91" +
    "\001\002\000\050\004\uff9e\005\uff9e\006\uff9e\010\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\346\031\uff9e\034\uff9e\035\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\047\uff9e\050" +
    "\uff9e\056\uff9e\001\002\000\004\050\350\001\002\000\046" +
    "\004\uffa1\005\uffa1\006\uffa1\010\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\031\uffa1\034\uffa1\035\uffa1\037\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\045\uffa1\047\uffa1\050\uffa1\056\uffa1\001\002\000" +
    "\006\015\354\016\355\001\002\000\050\004\uff9c\005\uff9c" +
    "\006\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\352\031" +
    "\uff9c\034\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\045\uff9c\047\uff9c\050\uff9c\056\uff9c\001\002\000\004\050" +
    "\350\001\002\000\046\004\uff9d\005\uff9d\006\uff9d\010\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\031\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d\047\uff9d\050\uff9d" +
    "\056\uff9d\001\002\000\004\050\350\001\002\000\012\017" +
    "\051\022\046\023\050\050\047\001\002\000\050\004\uff9a" +
    "\005\uff9a\006\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\031\uff9a\034\uff9a\035\uff9a\037\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\045\uff9a\047\uff9a\050\uff9a\056\uff9a\001\002\000" +
    "\050\004\uff9b\005\uff9b\006\uff9b\010\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\031\uff9b\034\uff9b\035\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\045\uff9b\047\uff9b\050\uff9b\056\uff9b" +
    "\001\002\000\006\020\361\021\362\001\002\000\046\004" +
    "\uff97\005\uff97\006\uff97\010\uff97\012\uff97\013\uff97\014\uff97" +
    "\031\uff97\034\uff97\035\uff97\037\uff97\041\uff97\042\uff97\043" +
    "\uff97\045\uff97\047\uff97\050\uff97\056\uff97\001\002\000\046" +
    "\004\uff96\005\uff96\006\uff96\010\uff96\012\uff96\013\uff96\014" +
    "\uff96\031\uff96\034\uff96\035\uff96\037\uff96\041\uff96\042\uff96" +
    "\043\uff96\045\uff96\047\uff96\050\uff96\056\uff96\001\002\000" +
    "\006\050\140\051\364\001\002\000\050\004\uff98\005\uff98" +
    "\006\uff98\010\uff98\012\uff98\013\uff98\014\uff98\031\uff98\034" +
    "\uff98\035\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uffb2" +
    "\045\uff98\047\uff98\050\uff98\056\uff98\001\002\000\046\004" +
    "\uff95\005\uff95\006\uff95\010\uff95\012\uff95\013\uff95\014\uff95" +
    "\031\uff95\034\uff95\035\uff95\037\uff95\041\uff95\042\uff95\043" +
    "\uff95\045\uff95\047\uff95\050\uff95\056\uff95\001\002\000\004" +
    "\027\367\001\002\000\004\050\370\001\002\000\004\032" +
    "\104\001\002\000\046\004\uff94\005\uff94\006\uff94\010\uff94" +
    "\012\uff94\013\uff94\014\uff94\031\uff94\034\uff94\035\uff94\037" +
    "\uff94\041\uff94\042\uff94\043\uff94\045\uff94\047\uff94\050\uff94" +
    "\056\uff94\001\002\000\010\032\123\050\133\052\124\001" +
    "\002\000\050\004\uff99\005\uff99\006\uff99\010\uff99\012\uff99" +
    "\013\uff99\014\uff99\031\uff99\034\uff99\035\uff99\037\uff99\041" +
    "\uff99\042\uff99\043\uff99\045\uff99\047\uff99\050\uff99\053\131" +
    "\056\uff99\001\002\000\050\004\uff9f\005\uff9f\006\uff9f\010" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\375\031\uff9f\034\uff9f" +
    "\035\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f\047" +
    "\uff9f\050\uff9f\056\uff9f\001\002\000\004\050\350\001\002" +
    "\000\046\004\uffa0\005\uffa0\006\uffa0\010\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\031\uffa0\034\uffa0\035\uffa0\037\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\045\uffa0\047\uffa0\050\uffa0\056\uffa0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\005\021\006\012\014\014\040\020\001\001\000" +
    "\004\051\333\001\001\000\002\001\001\000\014\003\330" +
    "\005\021\006\012\014\014\040\020\001\001\000\014\003" +
    "\327\005\021\006\012\014\014\040\020\001\001\000\014" +
    "\003\326\005\021\006\012\014\014\040\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\035\005\021\006\012\014\014\040\020\001\001\000" +
    "\014\004\023\005\027\006\022\014\025\040\026\001\001" +
    "\000\014\004\034\005\027\006\022\014\025\040\026\001" +
    "\001\000\002\001\001\000\014\004\033\005\027\006\022" +
    "\014\025\040\026\001\001\000\014\004\032\005\027\006" +
    "\022\014\025\040\026\001\001\000\014\004\031\005\027" +
    "\006\022\014\025\040\026\001\001\000\014\004\030\005" +
    "\027\006\022\014\025\040\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\040\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\073" +
    "\014\060\017\057\026\064\027\070\030\056\034\055\036" +
    "\062\037\066\041\067\052\054\053\074\001\001\000\002" +
    "\001\001\000\032\007\073\014\060\017\057\026\064\027" +
    "\070\030\056\034\055\036\062\037\260\041\067\052\054" +
    "\053\074\001\001\000\032\007\073\014\060\017\057\026" +
    "\064\027\070\030\056\034\055\036\062\037\257\041\067" +
    "\052\054\053\074\001\001\000\002\001\001\000\032\007" +
    "\073\014\060\017\057\026\064\027\070\030\056\034\055" +
    "\036\062\037\256\041\067\052\054\053\074\001\001\000" +
    "\032\007\073\014\060\017\057\026\064\027\070\030\056" +
    "\034\055\036\062\037\255\041\067\052\054\053\074\001" +
    "\001\000\024\011\120\013\126\015\113\016\112\017\111" +
    "\022\254\023\114\024\127\047\124\001\001\000\032\007" +
    "\073\014\060\017\057\026\064\027\070\030\056\034\055" +
    "\036\062\037\253\041\067\052\054\053\074\001\001\000" +
    "\030\011\120\013\126\015\113\016\112\017\111\023\201" +
    "\024\204\031\202\032\232\033\177\047\124\001\001\000" +
    "\032\007\073\014\060\017\057\026\064\027\070\030\056" +
    "\034\055\036\062\037\231\041\067\052\054\053\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\073\014" +
    "\060\017\057\026\064\027\070\030\056\034\055\036\062" +
    "\037\175\041\067\052\054\053\074\001\001\000\032\007" +
    "\073\014\060\017\057\026\064\027\070\030\056\034\055" +
    "\036\062\037\174\041\067\052\054\053\074\001\001\000" +
    "\032\007\073\014\060\017\057\026\064\027\070\030\056" +
    "\034\055\036\062\037\173\041\067\052\054\053\074\001" +
    "\001\000\006\027\156\042\160\001\001\000\004\025\152" +
    "\001\001\000\004\025\100\001\001\000\014\013\126\015" +
    "\113\016\112\017\111\024\151\001\001\000\002\001\001" +
    "\000\010\011\120\023\147\047\124\001\001\000\030\011" +
    "\120\013\126\015\113\016\112\017\111\020\110\021\117" +
    "\022\107\023\114\024\127\047\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\142\015\113\016\112\017\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\113\016\131" +
    "\017\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\134\017\111\001\001\000\002\001\001\000\006" +
    "\011\141\047\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\120\013\126\015\113\016" +
    "\112\017\111\022\145\023\114\024\127\047\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\126\015\113" +
    "\016\112\017\111\024\155\001\001\000\010\011\120\023" +
    "\154\047\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\100\001\001\000\002\001" +
    "\001\000\012\013\162\015\113\016\112\017\111\001\001" +
    "\000\002\001\001\000\032\007\073\014\060\017\057\026" +
    "\064\027\070\030\056\034\055\036\062\037\164\041\067" +
    "\052\054\053\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\172\015\113\016\112\017\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\120\013\126\015\113\016\112\017" +
    "\111\023\201\024\204\031\202\032\203\033\177\047\124" +
    "\001\001\000\002\001\001\000\026\011\120\013\126\015" +
    "\113\016\112\017\111\023\201\024\204\031\202\033\220" +
    "\047\124\001\001\000\002\001\001\000\004\050\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\120" +
    "\013\126\015\113\016\112\017\111\023\201\024\204\031" +
    "\202\033\213\047\124\001\001\000\026\011\120\013\126" +
    "\015\113\016\112\017\111\023\201\024\204\031\202\033" +
    "\212\047\124\001\001\000\032\007\073\014\060\017\057" +
    "\026\064\027\070\030\056\034\055\036\062\037\210\041" +
    "\067\052\054\053\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\120\013\126\015\113\016\112\017\111" +
    "\023\201\024\204\031\217\047\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\226\012\227\047\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\234\001\001\000\002\001\001" +
    "\000\032\007\073\014\060\017\057\026\064\027\070\030" +
    "\056\034\055\036\062\037\236\041\067\052\054\053\074" +
    "\001\001\000\004\035\241\001\001\000\030\011\120\013" +
    "\126\015\113\016\112\017\111\023\201\024\204\031\202" +
    "\032\246\033\177\047\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\073\014\060\017\057\026\064\027\070\030\056\034" +
    "\055\036\062\037\245\041\067\052\054\053\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\073\014\060\017\057\026\064\027\070\030\056" +
    "\034\055\036\062\037\251\041\067\052\054\053\074\001" +
    "\001\000\004\035\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\073" +
    "\014\060\017\057\026\064\027\070\030\056\034\055\036" +
    "\062\037\264\041\067\052\054\053\074\001\001\000\032" +
    "\007\073\014\060\017\057\026\064\027\070\030\056\034" +
    "\055\036\062\037\263\041\067\052\054\053\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\302\001" +
    "\001\000\004\054\267\001\001\000\002\001\001\000\006" +
    "\057\273\060\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\057\273\060\275\001\001" +
    "\000\002\001\001\000\004\057\301\001\001\000\004\054" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\273\060\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\040\045\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\073\014" +
    "\060\017\057\026\064\027\070\030\056\034\055\036\062" +
    "\037\312\041\067\052\054\053\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\320\014\317\001\001\000\006\010\325\014" +
    "\317\001\001\000\002\001\001\000\006\010\322\014\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\373\001\001" +
    "\000\006\043\340\054\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\350\056\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\350\056\352\001\001\000\002\001\001\000" +
    "\004\055\356\001\001\000\004\054\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\364\047\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\372\015\113\016\112\017\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\350\056\375" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int cont = 0;    
    public ArrayList<String> errores;
    public TablaSimbolos tablaSimbolos; 
    public int offset = 0;
    public int cantVarsCreadas = 0;    

    public void setErrores(ArrayList<String> _errores){
        errores = _errores;
    }
    
    public void setTablaSimbolos(TablaSimbolos _tabla){
        tablaSimbolos = _tabla;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		            
            System.out.println("Listo Module");       
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		     
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		

                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTINSTRUC ::= saltoLinea 
            {
              Object RESULT =null;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea STATEMENTS END SUB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea STATEMENTS END FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= VARPARAMS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARPARAMS ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }  
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARS2 ::= CANTVARS2 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        RESULT = c;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CANTVARS2 ::= identificador AS TIPO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        RESULT = t;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENTS ::= saltoLinea STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENTS ::= EXIT SUB STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENTS ::= EXIT FUNCTION STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENTS ::= ASIGN STATEMENTS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENTS ::= RETVAL STATEMENTS 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENTS ::= CALL STATEMENTS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STATEMENTS ::= WRCONSOLE STATEMENTS 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATEMENTS ::= IFSTATEMENT STATEMENTS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENTS ::= FORSTATEMENT STATEMENTS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATEMENTS ::= DOWHILESTATE STATEMENTS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATEMENTS ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS SIFSTATEMENT END IF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIFSTATEMENT ::= ELSEIF CONDICION THEN saltoLinea STATEMENTS SIFSTATEMENT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIFSTATEMENT ::= ELSE saltoLinea STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIFSTATEMENT ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DOWHILESTATE ::= DO WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",41, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FORSTATEMENT ::= FOR COUNTER TO OPARIT saltoLinea STATEMENTS NEXT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("RETVAL",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAL ::= VALASIGN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VAL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAL ::= VALINT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VAL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ai = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CALL",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMCALL ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARCALL ::= VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALCOND",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALCOND ::= VALINT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALCOND",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGN ::= ASIGNSTRUC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALASIGN ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALASIGN ::= READ 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNINT",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPASING ::= IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALINT ::= OPARIT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALINT",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPARIT ::= OP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OP",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP ::= OPP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OP",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPP ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPP ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPP ::= CALL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T ::= identificador COMA CANTVARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }                   
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARS ::= CANTVARS COMA VARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VARS ::= CANTVARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CANTVARS ::= identificador COMA CANTVARS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    RESULT = c;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CANTVARS ::= identificador AS TIPO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    RESULT = t;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPOIGUAL ::= identificador IGUAL NEW CALL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=id; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALWR ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALWR ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		  
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // M ::= 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
