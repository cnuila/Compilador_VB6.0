
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\013\010\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\004\014\000\002\005\016\000\002\031\003\000\002\031" +
    "\002\000\002\030\007\000\002\030\007\000\002\030\005" +
    "\000\002\030\005\000\002\027\005\000\002\027\003\000" +
    "\002\026\005\000\002\026\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\005\000\002\046\005\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\002\000\002\044\015\000\002\045\013\000\002" +
    "\045\005\000\002\045\002\000\002\050\012\000\002\051" +
    "\011\000\002\042\005\000\002\012\004\000\002\025\005" +
    "\000\002\025\007\000\002\037\006\000\002\022\003\000" +
    "\002\022\002\000\002\021\005\000\002\021\003\000\002" +
    "\040\006\000\002\040\006\000\002\040\004\000\002\040" +
    "\003\000\002\041\005\000\002\023\003\000\002\023\003" +
    "\000\002\015\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\033\005\000\002\033\005\000\002" +
    "\034\003\000\002\034\003\000\002\024\003\000\002\024" +
    "\004\000\002\024\004\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\010\004" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\005\000\002\014\005\000\002\020\005\000\002" +
    "\020\003\000\002\017\005\000\002\017\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\006\006\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\043\002\000\002\047\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\030\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\014\012\017\013\014\014" +
    "\011\031\016\045\020\001\002\000\004\050\342\001\002" +
    "\000\004\006\337\001\002\000\014\012\017\013\014\014" +
    "\011\031\016\045\020\001\002\000\016\006\ufffa\012\017" +
    "\013\014\014\011\031\016\045\020\001\002\000\014\012" +
    "\017\013\014\014\011\031\016\045\020\001\002\000\004" +
    "\050\323\001\002\000\004\050\312\001\002\000\004\050" +
    "\025\001\002\000\014\012\017\013\014\014\011\031\016" +
    "\045\020\001\002\000\014\012\017\013\014\014\011\031" +
    "\016\045\020\001\002\000\004\006\ufffc\001\002\000\004" +
    "\006\ufffb\001\002\000\004\032\uff9c\001\002\000\004\032" +
    "\027\001\002\000\006\033\ufff2\050\031\001\002\000\004" +
    "\033\ufff3\001\002\000\006\015\272\016\273\001\002\000" +
    "\004\033\033\001\002\000\004\016\034\001\002\000\012" +
    "\017\040\022\035\023\037\050\036\001\002\000\052\004" +
    "\uffa4\005\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\037" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\047\uffa4\050\uffa4" +
    "\001\002\000\052\004\uffa1\005\uffa1\006\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\031\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\045" +
    "\uffa1\047\uffa1\050\uffa1\001\002\000\052\004\uffa3\005\uffa3" +
    "\006\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\045\uffa3\047\uffa3\050\uffa3\001\002\000" +
    "\052\004\uffa2\005\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\031\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2\047\uffa2" +
    "\050\uffa2\001\002\000\004\013\042\001\002\000\026\004" +
    "\052\006\uffde\013\057\014\011\034\043\035\062\041\056" +
    "\043\050\047\054\050\064\001\002\000\006\031\266\045" +
    "\267\001\002\000\036\004\uff9c\005\uff9c\006\uff9c\010\uff9c" +
    "\013\uff9c\014\uff9c\034\uff9c\035\uff9c\037\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\047\uff9c\050\uff9c\001\002\000\036\004\052" +
    "\005\uffde\006\uffde\010\uffde\013\057\014\011\034\043\035" +
    "\062\037\uffde\041\056\042\uffde\043\050\047\054\050\064" +
    "\001\002\000\036\004\052\005\uffde\006\uffde\010\uffde\013" +
    "\057\014\011\034\043\035\062\037\uffde\041\056\042\uffde" +
    "\043\050\047\054\050\064\001\002\000\036\004\052\005" +
    "\uffde\006\uffde\010\uffde\013\057\014\011\034\043\035\062" +
    "\037\uffde\041\056\042\uffde\043\050\047\054\050\064\001" +
    "\002\000\020\020\102\021\106\027\100\032\110\050\111" +
    "\051\104\052\076\001\002\000\036\004\uff9c\005\uff9c\006" +
    "\uff9c\010\uff9c\013\uff9c\014\uff9c\034\uff9c\035\uff9c\037\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\047\uff9c\050\uff9c\001\002\000" +
    "\022\020\102\021\106\026\176\027\100\032\110\050\111" +
    "\051\104\052\076\001\002\000\036\004\052\005\uffde\006" +
    "\uffde\010\uffde\013\057\014\011\034\043\035\062\037\uffde" +
    "\041\056\042\uffde\043\050\047\054\050\064\001\002\000" +
    "\004\032\221\001\002\000\004\006\217\001\002\000\004" +
    "\040\172\001\002\000\036\004\052\005\uffde\006\uffde\010" +
    "\uffde\013\057\014\011\034\043\035\062\037\uffde\041\056" +
    "\042\uffde\043\050\047\054\050\064\001\002\000\036\004" +
    "\052\005\uffde\006\uffde\010\uffde\013\057\014\011\034\043" +
    "\035\062\037\uffde\041\056\042\uffde\043\050\047\054\050" +
    "\064\001\002\000\036\004\uff9c\005\uff9c\006\uff9c\010\uff9c" +
    "\013\uff9c\014\uff9c\034\uff9c\035\uff9c\037\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\047\uff9c\050\uff9c\001\002\000\004\050\uff9c" +
    "\001\002\000\010\011\144\053\067\054\072\001\002\000" +
    "\014\011\070\032\071\053\067\054\072\056\065\001\002" +
    "\000\004\050\142\001\002\000\020\020\102\021\106\027" +
    "\100\032\110\050\111\051\104\052\076\001\002\000\004" +
    "\011\140\001\002\000\022\020\uffbf\021\uffbf\027\uffbf\032" +
    "\uffbf\046\137\050\uffbf\051\uffbf\052\uffbf\001\002\000\022" +
    "\020\102\021\106\027\100\032\110\033\uffd1\050\111\051" +
    "\104\052\076\001\002\000\004\011\073\001\002\000\020" +
    "\020\uffbe\021\uffbe\027\uffbe\032\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\001\002\000\012\015\135\033\uffcf\053\120\054\121" +
    "\001\002\000\070\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\024\uffb1" +
    "\025\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\001\002\000\070\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\024\uffb7\025\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\047\uffb7\050\uffb7\053\uffb7\054\uffb7\055\uffb7\001" +
    "\002\000\070\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\024\uffaf\025" +
    "\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\045\uffaf\047\uffaf\050\uffaf\053" +
    "\115\054\116\055\uffaf\001\002\000\004\050\133\001\002" +
    "\000\004\033\uffd2\001\002\000\070\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\024\uffb5\025\uffb5\031\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5" +
    "\047\uffb5\050\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000" +
    "\004\044\126\001\002\000\072\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\024\uffb6\025\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffc1\045" +
    "\uffb6\047\uffb6\050\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002" +
    "\000\004\033\125\001\002\000\070\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\024\uffb4\025\uffb4\031\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4" +
    "\047\uffb4\050\uffb4\053\uffb4\054\uffb4\055\uffb4\001\002\000" +
    "\070\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\024\uffb2\025\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\045\uffb2\047\uffb2\050\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\001\002\000\020\020\102\021\106\027\100" +
    "\032\110\050\111\051\104\052\076\001\002\000\074\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\024\uffb0\025\uffb0\031\uffb0\032" +
    "\071\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffc0\045\uffb0\047\uffb0\050\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\001\002\000\006\053\120\054\121" +
    "\001\002\000\010\033\114\053\115\054\116\001\002\000" +
    "\070\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\024\uffba\025\uffba\031" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041\uffba" +
    "\042\uffba\043\uffba\045\uffba\047\uffba\050\uffba\053\uffba\054" +
    "\uffba\055\uffba\001\002\000\020\020\102\021\106\027\100" +
    "\032\110\050\111\051\104\052\076\001\002\000\020\020" +
    "\102\021\106\027\100\032\110\050\111\051\104\052\076" +
    "\001\002\000\070\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\024\uffbb" +
    "\025\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\001\002\000\020\020\102\021" +
    "\106\027\100\032\110\050\111\051\104\052\076\001\002" +
    "\000\020\020\102\021\106\027\100\032\110\050\111\051" +
    "\104\052\076\001\002\000\070\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\024\uffb8\025\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\047" +
    "\uffb8\050\uffb8\053\uffb8\054\uffb8\055\uffb8\001\002\000\070" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\024\uffb9\025\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\045\uffb9\047\uffb9\050\uffb9\053\uffb9\054\121" +
    "\055\uffb9\001\002\000\070\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\024\uffbc\025\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\047\uffbc" +
    "\050\uffbc\053\uffbc\054\121\055\uffbc\001\002\000\070\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\024\uffd3\025\uffd3\031\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\047\uffd3\050\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\006\050\130\051\127\001\002\000\072" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\024\uffc1\025\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\001\002\000\072\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\024\uffc0\025\uffc0\031\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\047\uffc0\050\uffc0\053\uffc0\054\uffc0\055\uffc0\001" +
    "\002\000\072\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\024\uffc2\025" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\126\045\uffc2\047\uffc2\050" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000\070\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\024\uffc3\025\uffc3\031\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\045\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\001\002\000\004\032\071\001\002\000\070\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\024\uffb3\025\uffb3\031\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\045\uffb3\047\uffb3\050\uffb3\053\uffb3\054\uffb3\055\uffb3\001" +
    "\002\000\020\020\102\021\106\027\100\032\110\050\111" +
    "\051\104\052\076\001\002\000\004\033\uffd0\001\002\000" +
    "\036\004\uffc5\005\uffc5\006\uffc5\010\uffc5\013\uffc5\014\uffc5" +
    "\034\uffc5\035\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\047" +
    "\uffc5\050\uffc5\001\002\000\020\020\uffbd\021\uffbd\027\uffbd" +
    "\032\uffbd\050\uffbd\051\uffbd\052\uffbd\001\002\000\042\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\013\uffc6\014\uffc6\034\uffc6" +
    "\035\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\047\uffc6\050" +
    "\uffc6\053\120\054\121\001\002\000\010\011\uffc7\053\uffc7" +
    "\054\uffc7\001\002\000\020\020\102\021\106\027\100\032" +
    "\110\050\111\051\104\052\076\001\002\000\020\020\uffbf" +
    "\021\uffbf\027\uffbf\032\uffbf\050\uffbf\051\uffbf\052\uffbf\001" +
    "\002\000\042\004\uffc4\005\uffc4\006\uffc4\010\uffc4\013\uffc4" +
    "\014\uffc4\034\uffc4\035\uffc4\037\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\047\uffc4\050\uffc4\053\120\054\121\001\002\000\004" +
    "\050\147\001\002\000\012\011\144\016\161\053\067\054" +
    "\072\001\002\000\004\036\156\001\002\000\004\013\152" +
    "\001\002\000\026\004\uff9c\013\uff9c\014\uff9c\034\uff9c\035" +
    "\uff9c\037\uff9c\041\uff9c\043\uff9c\047\uff9c\050\uff9c\001\002" +
    "\000\026\004\052\013\057\014\011\034\043\035\062\037" +
    "\uffde\041\056\043\050\047\054\050\064\001\002\000\004" +
    "\037\155\001\002\000\036\004\uffd8\005\uffd8\006\uffd8\010" +
    "\uffd8\013\uffd8\014\uffd8\034\uffd8\035\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\047\uffd8\050\uffd8\001\002\000\020\020" +
    "\102\021\106\027\100\032\110\050\111\051\104\052\076" +
    "\001\002\000\010\013\uffd7\053\120\054\121\001\002\000" +
    "\020\020\102\021\106\027\100\032\110\050\111\051\104" +
    "\052\076\001\002\000\012\017\040\022\035\023\037\050" +
    "\036\001\002\000\004\011\163\001\002\000\020\020\102" +
    "\021\106\027\100\032\110\050\111\051\104\052\076\001" +
    "\002\000\010\036\uffd4\053\120\054\121\001\002\000\010" +
    "\036\uffd5\053\120\054\121\001\002\000\036\004\052\005" +
    "\uffde\006\uffde\010\uffde\013\057\014\011\034\043\035\062" +
    "\037\uffde\041\056\042\uffde\043\050\047\054\050\064\001" +
    "\002\000\014\005\uffdf\006\uffdf\010\uffdf\037\uffdf\042\uffdf" +
    "\001\002\000\014\005\uffe2\006\uffe2\010\uffe2\037\uffe2\042" +
    "\uffe2\001\002\000\014\005\uffe8\006\uffe8\010\uffe8\037\uffe8" +
    "\042\uffe8\001\002\000\022\020\uff9c\021\uff9c\026\uff9c\027" +
    "\uff9c\032\uff9c\050\uff9c\051\uff9c\052\uff9c\001\002\000\022" +
    "\020\102\021\106\026\176\027\100\032\110\050\111\051" +
    "\104\052\076\001\002\000\012\011\215\053\120\054\121" +
    "\055\213\001\002\000\012\007\uffcb\013\uffcb\024\205\025" +
    "\206\001\002\000\020\020\102\021\106\027\100\032\110" +
    "\050\111\051\104\052\076\001\002\000\004\013\200\001" +
    "\002\000\026\004\uff9c\013\uff9c\014\uff9c\034\uff9c\035\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\047\uff9c\050\uff9c\001\002\000" +
    "\026\004\052\013\057\014\011\034\043\035\062\041\056" +
    "\042\uffde\043\050\047\054\050\064\001\002\000\004\042" +
    "\203\001\002\000\036\004\uffd9\005\uffd9\006\uffd9\010\uffd9" +
    "\013\uffd9\014\uffd9\034\uffd9\035\uffd9\037\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\047\uffd9\050\uffd9\001\002\000\006\007\uffcc" +
    "\013\uffcc\001\002\000\022\020\uff9c\021\uff9c\026\uff9c\027" +
    "\uff9c\032\uff9c\050\uff9c\051\uff9c\052\uff9c\001\002\000\022" +
    "\020\uff9c\021\uff9c\026\uff9c\027\uff9c\032\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\001\002\000\022\020\102\021\106\026\176" +
    "\027\100\032\110\050\111\051\104\052\076\001\002\000" +
    "\006\007\uffcd\013\uffcd\001\002\000\022\020\102\021\106" +
    "\026\176\027\100\032\110\050\111\051\104\052\076\001" +
    "\002\000\006\007\uffce\013\uffce\001\002\000\020\020\uffc9" +
    "\021\uffc9\027\uffc9\032\uffc9\050\uffc9\051\uffc9\052\uffc9\001" +
    "\002\000\020\020\102\021\106\027\100\032\110\050\111" +
    "\051\104\052\076\001\002\000\020\020\uffc8\021\uffc8\027" +
    "\uffc8\032\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000\016" +
    "\007\uffca\013\uffca\024\uffca\025\uffca\053\120\054\121\001" +
    "\002\000\004\045\220\001\002\000\014\012\ufff4\013\ufff4" +
    "\014\ufff4\031\ufff4\045\ufff4\001\002\000\006\050\223\051" +
    "\222\001\002\000\006\033\uff9e\044\uffc1\001\002\000\006" +
    "\033\uff9f\044\uffc0\001\002\000\004\033\uff9d\001\002\000" +
    "\004\033\226\001\002\000\036\004\uffa0\005\uffa0\006\uffa0" +
    "\010\uffa0\013\uffa0\014\uffa0\034\uffa0\035\uffa0\037\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\047\uffa0\050\uffa0\001\002\000\014" +
    "\005\uffe5\006\uffe5\010\uffe5\037\uffe5\042\uffe5\001\002\000" +
    "\004\007\231\001\002\000\004\013\uff9c\001\002\000\004" +
    "\013\233\001\002\000\032\004\052\005\uffde\006\uffde\010" +
    "\uffde\013\057\014\011\034\043\035\062\041\056\043\050" +
    "\047\054\050\064\001\002\000\010\005\uff9b\006\uff9b\010" +
    "\uff9b\001\002\000\010\005\uff9c\006\uff9c\010\uff9c\001\002" +
    "\000\010\005\240\006\uffda\010\237\001\002\000\022\020" +
    "\102\021\106\026\176\027\100\032\110\050\111\051\104" +
    "\052\076\001\002\000\004\013\244\001\002\000\004\006" +
    "\242\001\002\000\004\004\243\001\002\000\036\004\uffdd" +
    "\005\uffdd\006\uffdd\010\uffdd\013\uffdd\014\uffdd\034\uffdd\035" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\047\uffdd\050\uffdd" +
    "\001\002\000\026\004\052\006\uffde\013\057\014\011\034" +
    "\043\035\062\041\056\043\050\047\054\050\064\001\002" +
    "\000\004\006\uffdb\001\002\000\004\007\247\001\002\000" +
    "\004\013\uff9c\001\002\000\004\013\251\001\002\000\032" +
    "\004\052\005\uffde\006\uffde\010\uffde\013\057\014\011\034" +
    "\043\035\062\041\056\043\050\047\054\050\064\001\002" +
    "\000\010\005\uff9b\006\uff9b\010\uff9b\001\002\000\010\005" +
    "\uff9c\006\uff9c\010\uff9c\001\002\000\010\005\240\006\uffda" +
    "\010\237\001\002\000\004\006\uffdc\001\002\000\036\004" +
    "\052\005\uffde\006\uffde\010\uffde\013\057\014\011\034\043" +
    "\035\062\037\uffde\041\056\042\uffde\043\050\047\054\050" +
    "\064\001\002\000\014\005\uffe1\006\uffe1\010\uffe1\037\uffe1" +
    "\042\uffe1\001\002\000\042\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\013\uffd6\014\uffd6\034\uffd6\035\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\047\uffd6\050\uffd6\053\120\054\121\001" +
    "\002\000\014\005\uffe9\006\uffe9\010\uffe9\037\uffe9\042\uffe9" +
    "\001\002\000\014\005\uffe3\006\uffe3\010\uffe3\037\uffe3\042" +
    "\uffe3\001\002\000\014\005\uffe4\006\uffe4\010\uffe4\037\uffe4" +
    "\042\uffe4\001\002\000\036\004\052\005\uffde\006\uffde\010" +
    "\uffde\013\057\014\011\034\043\035\062\037\uffde\041\056" +
    "\042\uffde\043\050\047\054\050\064\001\002\000\014\005" +
    "\uffe0\006\uffe0\010\uffe0\037\uffe0\042\uffe0\001\002\000\036" +
    "\004\052\005\uffde\006\uffde\010\uffde\013\057\014\011\034" +
    "\043\035\062\037\uffde\041\056\042\uffde\043\050\047\054" +
    "\050\064\001\002\000\036\004\052\005\uffde\006\uffde\010" +
    "\uffde\013\057\014\011\034\043\035\062\037\uffde\041\056" +
    "\042\uffde\043\050\047\054\050\064\001\002\000\014\005" +
    "\uffe6\006\uffe6\010\uffe6\037\uffe6\042\uffe6\001\002\000\014" +
    "\005\uffe7\006\uffe7\010\uffe7\037\uffe7\042\uffe7\001\002\000" +
    "\004\050\276\001\002\000\012\017\040\022\035\023\037" +
    "\050\036\001\002\000\006\015\275\033\uffee\001\002\000" +
    "\004\050\276\001\002\000\006\015\303\016\304\001\002" +
    "\000\004\033\ufff1\001\002\000\006\015\301\033\uffec\001" +
    "\002\000\004\050\276\001\002\000\004\033\uffed\001\002" +
    "\000\004\050\276\001\002\000\012\017\040\022\035\023" +
    "\037\050\036\001\002\000\006\015\uffea\033\uffea\001\002" +
    "\000\006\015\uffeb\033\uffeb\001\002\000\006\015\310\033" +
    "\uffef\001\002\000\004\050\276\001\002\000\004\033\ufff0" +
    "\001\002\000\004\013\313\001\002\000\010\006\ufff6\013" +
    "\316\014\011\001\002\000\010\006\ufff6\013\316\014\011" +
    "\001\002\000\004\006\320\001\002\000\010\006\ufff6\013" +
    "\316\014\011\001\002\000\004\006\ufff7\001\002\000\004" +
    "\012\321\001\002\000\014\012\ufff9\013\ufff9\014\ufff9\031" +
    "\ufff9\045\ufff9\001\002\000\004\006\ufff8\001\002\000\004" +
    "\032\uff9c\001\002\000\004\032\325\001\002\000\006\033" +
    "\ufff2\050\031\001\002\000\004\033\327\001\002\000\004" +
    "\013\330\001\002\000\026\004\052\006\uffde\013\057\014" +
    "\011\034\043\035\062\041\056\043\050\047\054\050\064" +
    "\001\002\000\004\006\332\001\002\000\004\031\333\001" +
    "\002\000\014\012\ufff5\013\ufff5\014\ufff5\031\ufff5\045\ufff5" +
    "\001\002\000\004\006\uffff\001\002\000\004\006\ufffe\001" +
    "\002\000\004\006\ufffd\001\002\000\004\030\340\001\002" +
    "\000\004\002\000\001\002\000\044\004\uffae\005\uffae\006" +
    "\uffae\010\uffae\012\uffae\013\uffae\014\uffae\031\uffae\034\uffae" +
    "\035\uffae\037\uffae\041\uffae\042\uffae\043\uffae\045\uffae\047" +
    "\uffae\050\uffae\001\002\000\006\015\343\016\344\001\002" +
    "\000\004\050\352\001\002\000\012\017\040\022\035\023" +
    "\037\050\036\001\002\000\050\004\uffa9\005\uffa9\006\uffa9" +
    "\010\uffa9\011\347\012\uffa9\013\uffa9\014\uffa9\015\346\031" +
    "\uffa9\034\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\047\uffa9\050\uffa9\001\002\000\004\050\352\001" +
    "\002\000\020\020\102\021\106\027\100\032\110\050\111" +
    "\051\104\052\076\001\002\000\050\004\uffad\005\uffad\006" +
    "\uffad\010\uffad\012\uffad\013\uffad\014\uffad\031\uffad\034\uffad" +
    "\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad\045\uffad\047" +
    "\uffad\050\uffad\053\120\054\121\001\002\000\044\004\uffac" +
    "\005\uffac\006\uffac\010\uffac\012\uffac\013\uffac\014\uffac\031" +
    "\uffac\034\uffac\035\uffac\037\uffac\041\uffac\042\uffac\043\uffac" +
    "\045\uffac\047\uffac\050\uffac\001\002\000\006\015\356\016" +
    "\357\001\002\000\046\004\uffa7\005\uffa7\006\uffa7\010\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\354\031\uffa7\034\uffa7\035" +
    "\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7\047\uffa7" +
    "\050\uffa7\001\002\000\004\050\352\001\002\000\044\004" +
    "\uffa8\005\uffa8\006\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\031\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\045\uffa8\047\uffa8\050\uffa8\001\002\000\004\050\352" +
    "\001\002\000\012\017\040\022\035\023\037\050\036\001" +
    "\002\000\046\004\uffa5\005\uffa5\006\uffa5\010\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\031\uffa5\034\uffa5\035\uffa5\037" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\045\uffa5\047\uffa5\050\uffa5" +
    "\001\002\000\046\004\uffa6\005\uffa6\006\uffa6\010\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\031\uffa6\034\uffa6\035\uffa6" +
    "\037\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\047\uffa6\050" +
    "\uffa6\001\002\000\046\004\uffaa\005\uffaa\006\uffaa\010\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\363\031\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\041\uffaa\042\uffaa\043\uffaa\045\uffaa\047\uffaa" +
    "\050\uffaa\001\002\000\004\050\352\001\002\000\044\004" +
    "\uffab\005\uffab\006\uffab\010\uffab\012\uffab\013\uffab\014\uffab" +
    "\031\uffab\034\uffab\035\uffab\037\uffab\041\uffab\042\uffab\043" +
    "\uffab\045\uffab\047\uffab\050\uffab\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\004\021\005\012\010\014\013\020\001\001\000" +
    "\004\014\340\001\001\000\002\001\001\000\014\003\335" +
    "\004\021\005\012\010\014\013\020\001\001\000\014\003" +
    "\334\004\021\005\012\010\014\013\020\001\001\000\014" +
    "\003\333\004\021\005\012\010\014\013\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\023\004\021\005\012\010\014\013\020\001\001\000" +
    "\014\003\022\004\021\005\012\010\014\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\025\001" +
    "\001\000\002\001\001\000\006\030\027\031\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\057\010\046\011\052\012\044" +
    "\015\062\037\045\044\050\046\054\050\060\051\043\001" +
    "\001\000\002\001\001\000\004\043\263\001\001\000\026" +
    "\006\057\010\046\011\052\012\044\015\062\037\045\044" +
    "\050\046\262\050\060\051\043\001\001\000\026\006\057" +
    "\010\046\011\052\012\044\015\062\037\045\044\050\046" +
    "\261\050\060\051\043\001\001\000\026\006\057\010\046" +
    "\011\052\012\044\015\062\037\045\044\050\046\260\050" +
    "\060\051\043\001\001\000\014\033\074\034\102\035\257" +
    "\036\076\037\106\001\001\000\004\043\255\001\001\000" +
    "\020\033\074\034\102\035\173\036\076\037\106\040\227" +
    "\041\174\001\001\000\026\006\057\010\046\011\052\012" +
    "\044\015\062\037\045\044\050\046\226\050\060\051\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\057\010\046\011\052\012\044\015\062" +
    "\037\045\044\050\046\170\050\060\051\043\001\001\000" +
    "\026\006\057\010\046\011\052\012\044\015\062\037\045" +
    "\044\050\046\167\050\060\051\043\001\001\000\004\043" +
    "\165\001\001\000\004\043\145\001\001\000\004\024\142" +
    "\001\001\000\004\024\065\001\001\000\002\001\001\000" +
    "\014\033\074\034\102\035\140\036\076\037\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\100\022" +
    "\104\033\074\034\102\035\073\036\076\037\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\074\034\102\035" +
    "\111\036\112\037\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\074\034\102\035\123\036\076\037\106\001\001\000\014" +
    "\033\074\034\102\035\116\036\076\037\106\001\001\000" +
    "\002\001\001\000\014\033\074\034\102\035\122\036\076" +
    "\037\106\001\001\000\014\033\074\034\102\035\121\036" +
    "\076\037\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\131\034" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\135\033\074\034\102\035\073\036\076" +
    "\037\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\074\034\102\035\144\036\076\037\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\147\042\150" +
    "\001\001\000\004\024\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\152\001\001\000\026\006\057" +
    "\010\046\011\052\012\044\015\062\037\045\044\050\046" +
    "\153\050\060\051\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\074\034\102\035\156\036\076\037" +
    "\106\001\001\000\002\001\001\000\014\033\074\034\102" +
    "\035\164\036\076\037\106\001\001\000\004\016\161\001" +
    "\001\000\002\001\001\000\014\033\074\034\102\035\163" +
    "\036\076\037\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\057\010\046\011\052\012\044\015\062" +
    "\037\045\044\050\046\166\050\060\051\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\172\001\001\000\020\033\074\034\102\035\173\036" +
    "\076\037\106\040\176\041\174\001\001\000\004\023\213" +
    "\001\001\000\002\001\001\000\016\033\074\034\102\035" +
    "\173\036\076\037\106\041\203\001\001\000\002\001\001" +
    "\000\004\043\200\001\001\000\026\006\057\010\046\011" +
    "\052\012\044\015\062\037\045\044\050\046\201\050\060" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\210\001\001\000\004\043\206" +
    "\001\001\000\020\033\074\034\102\035\173\036\076\037" +
    "\106\040\207\041\174\001\001\000\002\001\001\000\020" +
    "\033\074\034\102\035\173\036\076\037\106\040\211\041" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\074\034\102\035\215\036\076\037\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\224\033\223\034\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\231\001\001\000\002\001\001\000\026" +
    "\006\057\010\046\011\052\012\044\015\062\037\045\044" +
    "\050\046\233\050\060\051\043\001\001\000\004\047\234" +
    "\001\001\000\004\043\235\001\001\000\004\045\240\001" +
    "\001\000\020\033\074\034\102\035\173\036\076\037\106" +
    "\040\245\041\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\057" +
    "\010\046\011\052\012\044\015\062\037\045\044\050\046" +
    "\244\050\060\051\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\247\001\001\000\002\001\001\000" +
    "\026\006\057\010\046\011\052\012\044\015\062\037\045" +
    "\044\050\046\251\050\060\051\043\001\001\000\004\047" +
    "\252\001\001\000\004\043\253\001\001\000\004\045\254" +
    "\001\001\000\002\001\001\000\026\006\057\010\046\011" +
    "\052\012\044\015\062\037\045\044\050\046\256\050\060" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\057\010\046\011\052\012\044\015\062\037\045\044" +
    "\050\046\264\050\060\051\043\001\001\000\002\001\001" +
    "\000\026\006\057\010\046\011\052\012\044\015\062\037" +
    "\045\044\050\046\270\050\060\051\043\001\001\000\026" +
    "\006\057\010\046\011\052\012\044\015\062\037\045\044" +
    "\050\046\267\050\060\051\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\306\001\001\000\004\016" +
    "\273\001\001\000\002\001\001\000\006\026\277\027\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\277\027\301\001\001\000\002\001\001" +
    "\000\004\026\305\001\001\000\004\016\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\277\027\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\314\010\313\001\001\000\006\007\321" +
    "\010\313\001\001\000\002\001\001\000\006\007\316\010" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\323\001\001\000" +
    "\002\001\001\000\006\030\027\031\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\057\010\046\011" +
    "\052\012\044\015\062\037\045\044\050\046\330\050\060" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\361\001\001\000\004" +
    "\016\344\001\001\000\002\001\001\000\006\017\352\020" +
    "\350\001\001\000\014\033\074\034\102\035\347\036\076" +
    "\037\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\352\020\354" +
    "\001\001\000\002\001\001\000\004\017\360\001\001\000" +
    "\004\016\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\352\020\363\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int cont = 0;    
    public ArrayList<String> errores;
    public TablaSimbolos tablaSimbolos; 
    public int posActualTabla = 0;
    public int cantTemp = 0;
    public Cuadruplo cuadruplos = new Cuadruplo();

    public void setErrores(ArrayList<String> _errores){
        errores = _errores;
    }
    
    public void setTablaSimbolos(TablaSimbolos _tabla){
        tablaSimbolos = _tabla;
    }

    public String nuevoTemp(){
        String temp = "t"+ Integer.toString(cantTemp);
        cantTemp++;
        return temp;
    }

    public ArrayList<Integer> creaLista(int indice){
        ArrayList<Integer> retVal = new ArrayList<>();
        retVal.add(indice);
        return retVal;
    }

    public ArrayList<Integer> fusiona(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
        ArrayList<Integer> retVal = new ArrayList<>();
        if (lista1 != null){
            for(int i = 0; i < lista1.size();i++){
                retVal.add(lista1.get(i));
            }
        }       
        if (lista2 != null){
            for(int i = 0; i < lista2.size();i++){
                retVal.add(lista2.get(i));
            }
        }         
        return retVal;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		            
            System.out.println("Listo Module");
            System.out.println("---------------Cuadruplos----------------");           
            cuadruplos.imprimirCuadruplos();
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STRUCTINSTRUC ::= 
            {
              Object RESULT =null;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUBPROCE ::= SUB identificador M PARENTESISL PARAMS PARENTESISR saltoLinea STATEMENTS END SUB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-8)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->void");
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe el sub procedure "+ id + " en el programa");
                    } else{
                        cuadruplos.addCuadruplo("ETIQ","_"+id,m.getNum());
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= FUNCTION identificador M PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea STATEMENTS END FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->"+t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la función "+ id + " en el programa");
                    } else {
                        cuadruplos.addCuadruplo("ETIQ","_"+id,m.getNum());
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-11)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS ::= VARPARAMS 
            {
              Objeto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS ::= 
            {
              Objeto RESULT =null;
		
                    Objeto retVal = new Objeto("void","");
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t+v.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                        
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());                        
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);                        
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+c.getAcumulada()+v.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+ c.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARPARAMS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }  

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t,"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        Objeto retVal = new Objeto(c.getTipo(), c.getAcumulada()+v.getAcumulada());
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARS2 ::= CANTVARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        posActualTabla+=1;
                        Objeto retval = new Objeto(c.getTipo(),"x"+c.getTipo()+c.getAcumulada());
                        RESULT = retval;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CANTVARS2 ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        
                        posActualTabla+=1;
                        Objeto retval = new Objeto(t,"x"+t);
                        RESULT = retval;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS ::= saltoLinea STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS ::= EXIT SUB STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS ::= EXIT FUNCTION STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENTS ::= ASIGN STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS ::= RETVAL STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        //ojo
                        RESULT = new ArrayList<>(); 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENTS ::= CALL STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENTS ::= WRCONSOLE STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENTS ::= IFSTATEMENT M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> i = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(i,m.getNum());
                    RESULT = i; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENTS ::= FORSTATEMENT M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> f = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(f,m.getNum());
                    RESULT = f;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENTS ::= DOWHILESTATE M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> d = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                 
                        cuadruplos.completa(d,m.getNum());
                        RESULT = d;                     
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENTS ::= 
            {
              ArrayList<Integer> RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS N M SIFSTATEMENT END IF 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                        ArrayList<Integer> retVal = null;
                        if (c != null){
                            ArrayList<Integer> siguiente = new ArrayList<>();                     
                            cuadruplos.completa(c.getListaVerdadera(), m.getNum());
                            if (s2 != null){
                                cuadruplos.completa(c.getListaFalsa(),m2.getNum());
                                siguiente = fusiona(n,fusiona(s,s2));
                            } else {
                                cuadruplos.eliminarUltimo();
                                siguiente = fusiona(c.getListaFalsa(),s);
                            }
                            retVal = siguiente;
                        }
                        RESULT = retVal;                        
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIFSTATEMENT ::= ELSEIF CONDICION THEN M saltoLinea STATEMENTS N M SIFSTATEMENT 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    ArrayList<Integer> retVal = null;
                    if (c != null){
                        ArrayList<Integer> siguiente = new ArrayList<>();                     
                        cuadruplos.completa(c.getListaVerdadera(), m.getNum());                    
                        if (s2 != null){                        
                            cuadruplos.completa(c.getListaFalsa(),m2.getNum());
                            siguiente = fusiona(n,fusiona(s,s2));
                        } else {
                            cuadruplos.eliminarUltimo();
                            siguiente = fusiona(c.getListaFalsa(),s);
                        }
                        retVal = siguiente;
                    }                    
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIFSTATEMENT ::= ELSE saltoLinea STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = s;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIFSTATEMENT ::= 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DOWHILESTATE ::= DO WHILE M CONDICION saltoLinea M STATEMENTS LOOP 
            {
              ArrayList<Integer> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    ArrayList<Integer> retVal = null;
                    if (c != null){       
                        cuadruplos.completa(c.getListaVerdadera(),m2.getNum());
                        cuadruplos.completa(s,m.getNum());
                        cuadruplos.addCuadruplo("GOTO",Integer.toString(m.getNum()));
                        retVal = c.getListaFalsa();
                    }             
                    RESULT = retVal;       
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FORSTATEMENT ::= FOR M CONDICIONFOR saltoLinea M STATEMENTS NEXT 
            {
              ArrayList<Integer> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    ArrayList<Integer> retVal = null;
                    if (c != null){
                        cuadruplos.completa(c.getListaVerdadera(),m2.getNum());
                        cuadruplos.completa(s,cuadruplos.siguienteCuad());
                        String temp = nuevoTemp();
                        cuadruplos.addCuadruplo("+",c.getValor(),Integer.toString(1),temp);
                        cuadruplos.addCuadruplo("=",temp,c.getValor());
                        cuadruplos.addCuadruplo("GOTO",Integer.toString(m.getNum() + 1));
                        retVal = c.getListaFalsa();
                    }
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONFOR ::= COUNTER TO VALOR 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        Condiciones e = null;
                        if (v.getTipo().equals("INTEGER")){
                            if (!c.equals("ERROR")){
                                e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1),c);
                                cuadruplos.addCuadruplo("IF<",c,v.getValor(),"");
                                cuadruplos.addCuadruplo("GOTO","");
                            }
                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un INTEGER");
                        }
                        RESULT = e;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONFOR",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETVAL ::= RETURN VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posFuncion = tablaSimbolos.siguienteFuncion(posActualTabla);
                    String retornoFuncion = tablaSimbolos.getTipoRetorno(posFuncion);
                    if (retornoFuncion.equals("void")){
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " no se puede hacer return en un SUBPROCEDURE");
                    } else {
                        if (retornoFuncion.equals(v.getTipo())){
                        //cuadruplo
                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " el tipo de retorno es "+ retornoFuncion);
                        }   
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("RETVAL",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COUNTER ::= identificador OPASIGN VALOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String retVal = "ERROR";
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);                    
                    if (posID == -1){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        String tipo  = tablaSimbolos.getTipoID(posID);
                        if (tipo.equals(v.getTipo())){
                            //cuadruplo con el o
                            retVal = id;
                            if (o.equals("=")){
                                cuadruplos.addCuadruplo("=",v.getValor(),id);
                            } else {
                                if (o.charAt(0) == '*'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("*",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '/'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("/",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '-'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("-",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '+'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("+",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                            }
                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) +  " "+ id + " esperaba un "+ tipo + " y se le está asignando un "+ v.getTipo());
                        }
                    }
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COUNTER ::= identificador AS TIPO IGUAL VALOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String retVal = "ERROR";
                    if (t.equals("INTEGER")){
                        retVal = id;
                        if (v.getTipo().equals("INTEGER")){
                            cuadruplos.addCuadruplo("=",v.getValor(),id);
                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) +  " se espara un tipo INTEGER");
                        }
                    } else {
                        errores.add("Error: Linea: "+ (tleft + 1) + " Columna: " + (tright + 1) +  " se espara un tipo INTEGER");
                    }
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    String tipo;
                    int posFunc = tablaSimbolos.buscarFUNC(id, p);
                    if (posFunc == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe la funcion o procedure "+ id + " con parametros "+p);
                    } else {
                        tipo = tablaSimbolos.getTipoRetorno(posFunc);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CALL",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMCALL ::= VARCALL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMCALL ::= 
            {
              String RESULT =null;
		 RESULT="void";
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARCALL ::= VALOR COMA VARCALL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 val = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = val.getTipo() + "x" + v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARCALL ::= VALOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v.getTipo();
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= CONDICIONP AND M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones retVal = null;
                    if (c != null && c1 != null){
                        cuadruplos.completa(c.getListaVerdadera(),m.getNum());
                        ArrayList<Integer> listaFalsa = fusiona(c.getListaFalsa(),c1.getListaFalsa());                    
                        retVal = new Condiciones(c1.getListaVerdadera(),listaFalsa);
                    }
                    RESULT = retVal;                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= CONDICIONP OR M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    Condiciones retVal = null;
                    if (c != null && c1 != null){
                        cuadruplos.completa(c.getListaFalsa(),m.getNum());
                        ArrayList<Integer> listaVerdadera = fusiona(c.getListaVerdadera(),c1.getListaVerdadera());
                        retVal = new Condiciones(listaVerdadera,c1.getListaFalsa());
                    }                                       
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= NOT CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones retVal = null;
                    if (c != null){
                        retVal = new Condiciones(c.getListaFalsa(),c.getListaVerdadera());
                    }            
                    RESULT = retVal;        
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Condiciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones e;
                    if (o.equals("=")){
                        if ( v.getTipo().equals(v2.getTipo()) ){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF=",v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        } else {
                            e = null;
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es del mismo tipo que " + v2.getTipo());
                        }
                    } else {
                        if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF"+o,v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        } else {
                            e = null;
                            if (!v.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                            if (!v2.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                        }                        
                    }
                    RESULT = e;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=o; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 RESULT="="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADOSTRUC ::= identificador PUNTO identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LLAMADOSTRUC",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGN ::= identificador OPASIGN VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);                    
                    if (posID == -1){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        String tipo  = tablaSimbolos.getTipoID(posID);
                        if (tipo.equals(v.getTipo())){
                            //cuadruplo con el o
                            if (o.equals("=")){
                                cuadruplos.addCuadruplo("=",v.getValor(),id);
                            } else {
                                if (o.charAt(0) == '*'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("*",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '/'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("/",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '-'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("-",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '+'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("+",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                            }
                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) +  " "+ id + " esperaba un "+ tipo + " y se le está asignando un "+ v.getTipo());
                        }
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGN ::= identificador IGUAL READ 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                    cuadruplos.addCuadruplo("readline",id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGN ::= LLAMADOSTRUC OPASIGN VALOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = "";
                    if (v.equals("STRING") && ustr.equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("STRING")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!ustr.equals("STRING")){
                            errores.add("Error: Linea: "+ (ustrleft + 1) + " Columna: " + (ustrright + 1) + " se esperaba un STRING no un "+ustr.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + ustr.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = "";                   
                    if (v.getTipo().equals("STRING") && v2.getTipo().equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("STRING")){                        
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!v2.getTipo().equals("STRING")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esperaba un STRING no un "+v2.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + v2.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALUNIRSTR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALUNIRSTR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPASIGN ::= IGUAL 
            {
              String RESULT =null;
		 RESULT="="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPASIGN ::= OPMULTI IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 RESULT=op+"="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPASIGN ::= OPADICION IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 RESULT=op+"="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPARIT ::= OPARIT OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oPa,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPARIT ::= OPARIT OPMULTI VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oM,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPARIT ::= PARENTESISL OPARIT PARENTESISR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 
                    RESULT = o;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPARIT ::= VALOR OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oPa,v.getValor(),v2.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPARIT ::= VALOR OPMULTI VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oM,v.getValor(),v2.getValor(),temp);
                    } else {                        
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= INTEGER 
            {
              Objeto2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = new Objeto2("INTEGER",i);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = new Objeto2("STRING",str.substring(1,str.length()-1));
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= TRUE 
            {
              Objeto2 RESULT =null;
		
                    RESULT = new Objeto2("BOOLEAN","TRUE");
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= FALSE 
            {
              Objeto2 RESULT =null;
		
                    RESULT = new Objeto2("BOOLEAN","FALSE");
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= NEW CALL 
            {
              Objeto2 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= CALL 
            {
              Objeto2 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = c.getTipo();
                    if (c.equals("void")){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (cleft + 1) + " Columna: " + (cright + 1) + " un procedure no puede ser asignado a una variable");
                    }
                    RESULT = new Objeto2(tipo,c.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = ustr;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }

                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= OPARIT 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    //ojooooooooooooooooooooooooooooo
                    RESULT = o;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T ::= identificador AS TIPO IGUAL VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    } else {
                        if (t.equals(v.getTipo())){
                            cuadruplos.addCuadruplo("=",v.getValor(),id);
                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no se puede asignar un "+ v.getTipo() + " en un "+t);
                        }
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T ::= identificador COMA CANTVARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }   
                    posActualTabla+=1;                
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARS ::= CANTVARS COMA VARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARS ::= CANTVARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CANTVARS ::= identificador COMA CANTVARS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = c;                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CANTVARS ::= identificador AS TIPO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = t;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=id; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    if (!v.getTipo().equals("ERROR")){
                        cuadruplos.addCuadruplo("write",v.getTipo(),v.getValor());
                    } else {
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING en el write.line"); 
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALWR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALWR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALWR ::= UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = ustr; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT = new Marcador(cuadruplos.siguienteCuad(),0); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		  ArrayList<Integer> retVal = creaLista(cuadruplos.siguienteCuad());  
                    cuadruplos.addCuadruplo("GOTO","");
                    RESULT = retVal; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("N",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
