
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\045\010\000\002\010\004\000\002\010" +
    "\004\000\002\010\003\000\002\005\013\000\002\043\004" +
    "\000\002\043\004\000\002\043\005\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\002\000\002\041" +
    "\013\000\002\040\010\000\002\040\005\000\002\040\002" +
    "\000\002\050\010\000\002\047\011\000\002\006\015\000" +
    "\002\044\004\000\002\044\004\000\002\044\005\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\002\000\002\042\013\000\002\037\010\000" +
    "\002\037\006\000\002\037\002\000\002\052\010\000\002" +
    "\051\011\000\002\036\004\000\002\024\003\000\002\024" +
    "\003\000\002\053\003\000\002\053\007\000\002\021\006" +
    "\000\002\022\003\000\002\022\002\000\002\023\005\000" +
    "\002\023\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\004\000\002\034\003\000\002\035\005\000\002\065" +
    "\003\000\002\065\003\000\002\033\003\000\002\033\003" +
    "\000\002\060\003\000\002\060\002\000\002\057\007\000" +
    "\002\057\007\000\002\057\005\000\002\057\005\000\002" +
    "\061\005\000\002\061\003\000\002\056\005\000\002\056" +
    "\005\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\032\005\000\002\046\005\000\002\046\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\011\005\000\002\011" +
    "\005\000\002\063\003\000\002\063\003\000\002\031\005" +
    "\000\002\027\003\000\002\027\004\000\002\027\004\000" +
    "\002\026\003\000\002\013\005\000\002\013\003\000\002" +
    "\020\005\000\002\020\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\015\004" +
    "\000\002\016\005\000\002\016\007\000\002\016\007\000" +
    "\002\016\005\000\002\016\005\000\002\014\005\000\002" +
    "\014\003\000\002\054\005\000\002\054\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\006\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\007\006\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\062\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\030\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\014\012\016\013\014\014" +
    "\011\031\017\045\020\001\002\000\004\050\u010e\001\002" +
    "\000\004\006\u010b\001\002\000\014\012\016\013\014\014" +
    "\011\031\017\045\020\001\002\000\014\012\016\013\014" +
    "\014\011\031\017\045\020\001\002\000\014\012\016\013" +
    "\014\014\011\031\017\045\020\001\002\000\004\050\377" +
    "\001\002\000\004\050\305\001\002\000\004\050\037\001" +
    "\002\000\014\012\016\013\014\014\011\031\017\045\020" +
    "\001\002\000\014\012\016\013\026\014\011\031\017\045" +
    "\020\001\002\000\014\012\016\013\026\014\011\031\017" +
    "\045\020\001\002\000\004\006\ufffc\001\002\000\014\012" +
    "\016\013\026\014\011\031\017\045\020\001\002\000\016" +
    "\006\ufff5\012\016\013\026\014\011\031\017\045\020\001" +
    "\002\000\014\012\016\013\026\014\011\031\017\045\020" +
    "\001\002\000\014\012\016\013\026\014\011\031\017\045" +
    "\020\001\002\000\004\006\ufff8\001\002\000\004\006\ufff6" +
    "\001\002\000\004\006\ufff9\001\002\000\004\006\ufffa\001" +
    "\002\000\004\006\ufff7\001\002\000\004\006\ufffb\001\002" +
    "\000\004\032\040\001\002\000\006\033\uffb9\050\042\001" +
    "\002\000\004\033\uffba\001\002\000\006\015\265\016\266" +
    "\001\002\000\004\033\044\001\002\000\004\016\045\001" +
    "\002\000\012\017\051\022\046\023\050\050\047\001\002" +
    "\000\052\004\uff84\005\uff84\006\uff84\010\uff84\012\uff84\013" +
    "\uff84\014\uff84\015\uff84\031\uff84\033\uff84\034\uff84\035\uff84" +
    "\037\uff84\041\uff84\042\uff84\043\uff84\045\uff84\047\uff84\050" +
    "\uff84\056\uff84\001\002\000\052\004\uff81\005\uff81\006\uff81" +
    "\010\uff81\012\uff81\013\uff81\014\uff81\015\uff81\031\uff81\033" +
    "\uff81\034\uff81\035\uff81\037\uff81\041\uff81\042\uff81\043\uff81" +
    "\045\uff81\047\uff81\050\uff81\056\uff81\001\002\000\052\004" +
    "\uff83\005\uff83\006\uff83\010\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\031\uff83\033\uff83\034\uff83\035\uff83\037\uff83\041" +
    "\uff83\042\uff83\043\uff83\045\uff83\047\uff83\050\uff83\056\uff83" +
    "\001\002\000\052\004\uff82\005\uff82\006\uff82\010\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\031\uff82\033\uff82\034\uff82" +
    "\035\uff82\037\uff82\041\uff82\042\uff82\043\uff82\045\uff82\047" +
    "\uff82\050\uff82\056\uff82\001\002\000\004\013\053\001\002" +
    "\000\030\004\064\006\uffd4\013\072\014\011\034\054\035" +
    "\076\041\071\043\062\047\066\050\100\056\077\001\002" +
    "\000\004\045\263\001\002\000\040\004\064\005\uffd4\006" +
    "\uffd4\010\uffd4\013\072\014\011\034\054\035\076\037\uffd4" +
    "\041\071\042\uffd4\043\062\047\066\050\100\056\077\001" +
    "\002\000\040\004\064\005\uffd4\006\uffd4\010\uffd4\013\072" +
    "\014\011\034\054\035\076\037\uffd4\041\071\042\uffd4\043" +
    "\062\047\066\050\100\056\077\001\002\000\040\004\uffb0" +
    "\005\uffb0\006\uffb0\010\uffb0\013\uffb0\014\uffb0\034\uffb0\035" +
    "\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0\047\uffb0\050\uffb0" +
    "\056\uffb0\001\002\000\040\004\064\005\uffd4\006\uffd4\010" +
    "\uffd4\013\072\014\011\034\054\035\076\037\uffd4\041\071" +
    "\042\uffd4\043\062\047\066\050\100\056\077\001\002\000" +
    "\040\004\064\005\uffd4\006\uffd4\010\uffd4\013\072\014\011" +
    "\034\054\035\076\037\uffd4\041\071\042\uffd4\043\062\047" +
    "\066\050\100\056\077\001\002\000\020\020\116\021\122" +
    "\032\123\046\107\050\126\051\117\052\124\001\002\000" +
    "\004\006\254\001\002\000\022\020\116\021\122\026\202" +
    "\032\123\046\107\050\126\051\117\052\124\001\002\000" +
    "\040\004\064\005\uffd4\006\uffd4\010\uffd4\013\072\014\011" +
    "\034\054\035\076\037\uffd4\041\071\042\uffd4\043\062\047" +
    "\066\050\100\056\077\001\002\000\004\032\223\001\002" +
    "\000\040\004\uffae\005\uffae\006\uffae\010\uffae\013\uffae\014" +
    "\uffae\034\uffae\035\uffae\037\uffae\041\uffae\042\uffae\043\uffae" +
    "\047\uffae\050\uffae\056\uffae\001\002\000\040\004\uffaf\005" +
    "\uffaf\006\uffaf\010\uffaf\013\uffaf\014\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf\050\uffaf\056" +
    "\uffaf\001\002\000\004\040\200\001\002\000\040\004\064" +
    "\005\uffd4\006\uffd4\010\uffd4\013\072\014\011\034\054\035" +
    "\076\037\uffd4\041\071\042\uffd4\043\062\047\066\050\100" +
    "\056\077\001\002\000\040\004\064\005\uffd4\006\uffd4\010" +
    "\uffd4\013\072\014\011\034\054\035\076\037\uffd4\041\071" +
    "\042\uffd4\043\062\047\066\050\100\056\077\001\002\000" +
    "\040\004\064\005\uffd4\006\uffd4\010\uffd4\013\072\014\011" +
    "\034\054\035\076\037\uffd4\041\071\042\uffd4\043\062\047" +
    "\066\050\100\056\077\001\002\000\040\004\064\005\uffd4" +
    "\006\uffd4\010\uffd4\013\072\014\011\034\054\035\076\037" +
    "\uffd4\041\071\042\uffd4\043\062\047\066\050\100\056\077" +
    "\001\002\000\004\050\160\001\002\000\010\011\154\053" +
    "\102\054\105\001\002\000\012\011\103\032\104\053\102" +
    "\054\105\001\002\000\010\032\123\050\133\052\124\001" +
    "\002\000\004\011\151\001\002\000\020\020\116\021\122" +
    "\032\uffa0\046\107\050\uffa0\051\117\052\uffa0\001\002\000" +
    "\022\020\116\021\122\032\123\033\uffc6\046\107\050\126" +
    "\051\117\052\124\001\002\000\004\011\106\001\002\000" +
    "\010\032\uff9f\050\uff9f\052\uff9f\001\002\000\056\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\024\uffa6\025\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\037\uffa6\041\uffa6\042\uffa6\043\uffa6\047\uffa6\050\uffa6\055" +
    "\uffa6\056\uffa6\001\002\000\006\015\uffc4\033\uffc4\001\002" +
    "\000\004\033\147\001\002\000\072\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\024\uff96\025\uff96\031\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\041\uff96\042\uff96\043\uff96\045\uff96" +
    "\047\uff96\050\uff96\053\uff96\054\uff96\055\uff96\056\uff96\001" +
    "\002\000\072\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\024\uff9b\025" +
    "\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\045\uff9b\047\uff9b\050\uff9b\053" +
    "\uff9b\054\134\055\uff9b\056\uff9b\001\002\000\072\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\024\uff99\025\uff99\031\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\041\uff99\042\uff99\043" +
    "\uff99\045\uff99\047\uff99\050\uff99\053\uff99\054\uff99\055\uff99" +
    "\056\uff99\001\002\000\044\004\uffcc\005\uffcc\006\uffcc\010" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\047\uffcc\050\uffcc\056" +
    "\uffcc\001\002\000\056\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\024\uffa9\025" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\047\uffa9\050\uffa9\055\uffa9\056\uffa9\001\002\000" +
    "\060\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\024\uffaa\025\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\037\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffa3" +
    "\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000\006\015" +
    "\145\033\uffc7\001\002\000\056\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015\uffa7\024" +
    "\uffa7\025\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\047\uffa7\050\uffa7\055\uffa7\056\uffa7\001" +
    "\002\000\056\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\013\uffa8\014\uffa8\015\uffa8\024\uffa8\025\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\010\032" +
    "\123\050\133\052\124\001\002\000\072\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\024\uff98\025\uff98\031\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\045" +
    "\uff98\047\uff98\050\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\001\002\000\004\044\136\001\002\000\066\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013\uff97\014\uff97" +
    "\015\uff97\024\uff97\025\uff97\032\104\033\uff97\034\uff97\035" +
    "\uff97\037\uff97\041\uff97\042\uff97\043\uff97\044\uffa2\047\uff97" +
    "\050\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
    "\062\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\024\uff9d\025\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\047\uff9d\050\uff9d\053\131\055\uff9d\056\uff9d\001\002\000" +
    "\044\004\uffcb\005\uffcb\006\uffcb\010\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\047\uffcb\050\uffcb\056\uffcb\001\002\000\010" +
    "\032\123\050\133\052\124\001\002\000\072\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\024\uff9c\025\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\045\uff9c\047\uff9c\050\uff9c\053\uff9c\054\134\055\uff9c\056" +
    "\uff9c\001\002\000\074\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\024" +
    "\uff97\025\uff97\031\uff97\032\104\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\041\uff97\042\uff97\043\uff97\045\uff97\047" +
    "\uff97\050\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001\002" +
    "\000\010\032\123\050\133\052\124\001\002\000\072\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\024\uff9a\025\uff9a\031\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\045\uff9a\047\uff9a\050\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\001\002\000\006\050\140\051\137\001\002" +
    "\000\066\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\024\uffa3\025\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3\055\uffa3" +
    "\056\uffa3\001\002\000\066\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\024\uffa2\025\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\037" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2" +
    "\050\uffa2\055\uffa2\056\uffa2\001\002\000\066\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\024\uffa4\025\uffa4\031\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\044\136" +
    "\045\uffa4\047\uffa4\050\uffa4\055\uffa4\056\uffa4\001\002\000" +
    "\064\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\024\uffa5\025\uffa5\031" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\045\uffa5\047\uffa5\050\uffa5\055\uffa5\056\uffa5\001" +
    "\002\000\006\033\144\053\131\001\002\000\072\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\024\uff95\025\uff95\031\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\041\uff95\042\uff95\043" +
    "\uff95\045\uff95\047\uff95\050\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\001\002\000\020\020\116\021\122\032\123\046" +
    "\107\050\126\051\117\052\124\001\002\000\006\015\uffc5" +
    "\033\uffc5\001\002\000\072\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\024\uffc8\025\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\047\uffc8" +
    "\050\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000" +
    "\040\004\uffad\005\uffad\006\uffad\010\uffad\013\uffad\014\uffad" +
    "\034\uffad\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad\047" +
    "\uffad\050\uffad\056\uffad\001\002\000\010\032\uff9e\050\uff9e" +
    "\052\uff9e\001\002\000\042\004\uffa1\005\uffa1\006\uffa1\010" +
    "\uffa1\013\uffa1\014\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\047\uffa1\050\uffa1\056\uffa1\001" +
    "\002\000\010\032\123\050\133\052\124\001\002\000\020" +
    "\020\116\021\122\032\uffa0\046\107\050\uffa0\051\117\052" +
    "\uffa0\001\002\000\040\004\uffac\005\uffac\006\uffac\010\uffac" +
    "\013\uffac\014\uffac\034\uffac\035\uffac\037\uffac\041\uffac\042" +
    "\uffac\043\uffac\047\uffac\050\uffac\056\uffac\001\002\000\040" +
    "\004\uffab\005\uffab\006\uffab\010\uffab\013\uffab\014\uffab\034" +
    "\uffab\035\uffab\037\uffab\041\uffab\042\uffab\043\uffab\047\uffab" +
    "\050\uffab\056\uffab\001\002\000\004\036\uffca\001\002\000" +
    "\012\011\170\016\167\053\102\054\105\001\002\000\004" +
    "\036\162\001\002\000\010\032\123\050\133\052\124\001" +
    "\002\000\006\013\164\053\131\001\002\000\030\004\064" +
    "\013\072\014\011\034\054\035\076\037\uffd4\041\071\043" +
    "\062\047\066\050\100\056\077\001\002\000\004\037\166" +
    "\001\002\000\040\004\uffce\005\uffce\006\uffce\010\uffce\013" +
    "\uffce\014\uffce\034\uffce\035\uffce\037\uffce\041\uffce\042\uffce" +
    "\043\uffce\047\uffce\050\uffce\056\uffce\001\002\000\004\022" +
    "\171\001\002\000\010\032\uffa0\050\uffa0\052\uffa0\001\002" +
    "\000\004\011\172\001\002\000\010\032\123\050\133\052" +
    "\124\001\002\000\006\036\uffc9\053\131\001\002\000\014" +
    "\005\uffd6\006\uffd6\010\uffd6\037\uffd6\042\uffd6\001\002\000" +
    "\014\005\uffd8\006\uffd8\010\uffd8\037\uffd8\042\uffd8\001\002" +
    "\000\014\005\uffd7\006\uffd7\010\uffd7\037\uffd7\042\uffd7\001" +
    "\002\000\014\005\uffdd\006\uffdd\010\uffdd\037\uffdd\042\uffdd" +
    "\001\002\000\022\020\116\021\122\026\202\032\123\046" +
    "\107\050\126\051\117\052\124\001\002\000\012\007\uffc0" +
    "\013\uffc0\024\uffc0\025\uffc0\001\002\000\020\020\116\021" +
    "\122\032\123\046\107\050\126\051\117\052\124\001\002" +
    "\000\016\007\uffbc\011\uffbc\013\uffbc\024\uffbc\025\uffbc\055" +
    "\uffbc\001\002\000\006\011\220\055\216\001\002\000\010" +
    "\013\211\024\207\025\210\001\002\000\016\007\uffbb\011" +
    "\uffbb\013\uffbb\024\uffbb\025\uffbb\055\uffbb\001\002\000\020" +
    "\020\116\021\122\032\123\046\107\050\126\051\117\052" +
    "\124\001\002\000\020\020\116\021\122\032\123\046\107" +
    "\050\126\051\117\052\124\001\002\000\030\004\064\013" +
    "\072\014\011\034\054\035\076\041\071\042\uffd4\043\062" +
    "\047\066\050\100\056\077\001\002\000\004\042\213\001" +
    "\002\000\040\004\uffcf\005\uffcf\006\uffcf\010\uffcf\013\uffcf" +
    "\014\uffcf\034\uffcf\035\uffcf\037\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\047\uffcf\050\uffcf\056\uffcf\001\002\000\012\007\uffc2" +
    "\013\uffc2\024\uffc2\025\uffc2\001\002\000\012\007\uffc3\013" +
    "\uffc3\024\uffc3\025\uffc3\001\002\000\020\020\uffbe\021\uffbe" +
    "\032\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\001\002\000" +
    "\020\020\116\021\122\032\123\046\107\050\126\051\117" +
    "\052\124\001\002\000\020\020\uffbd\021\uffbd\032\uffbd\046" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\001\002\000\012\007\uffbf" +
    "\013\uffbf\024\uffbf\025\uffbf\001\002\000\012\007\uffc1\013" +
    "\uffc1\024\uffc1\025\uffc1\001\002\000\006\050\225\051\224" +
    "\001\002\000\006\033\uff7e\044\uffa3\001\002\000\006\033" +
    "\uff7f\044\uffa2\001\002\000\004\033\uff7d\001\002\000\004" +
    "\033\230\001\002\000\040\004\uff80\005\uff80\006\uff80\010" +
    "\uff80\013\uff80\014\uff80\034\uff80\035\uff80\037\uff80\041\uff80" +
    "\042\uff80\043\uff80\047\uff80\050\uff80\056\uff80\001\002\000" +
    "\014\005\uffdb\006\uffdb\010\uffdb\037\uffdb\042\uffdb\001\002" +
    "\000\010\007\233\024\207\025\210\001\002\000\004\013" +
    "\uff7c\001\002\000\004\013\235\001\002\000\034\004\064" +
    "\005\uffd4\006\uffd4\010\uffd4\013\072\014\011\034\054\035" +
    "\076\041\071\043\062\047\066\050\100\056\077\001\002" +
    "\000\010\005\241\006\uffd0\010\240\001\002\000\004\006" +
    "\252\001\002\000\022\020\116\021\122\026\202\032\123" +
    "\046\107\050\126\051\117\052\124\001\002\000\004\013" +
    "\242\001\002\000\034\004\064\005\uffd4\006\uffd4\010\uffd4" +
    "\013\072\014\011\034\054\035\076\041\071\043\062\047" +
    "\066\050\100\056\077\001\002\000\010\005\241\006\uffd0" +
    "\010\240\001\002\000\004\006\uffd1\001\002\000\010\007" +
    "\246\024\207\025\210\001\002\000\004\013\247\001\002" +
    "\000\034\004\064\005\uffd4\006\uffd4\010\uffd4\013\072\014" +
    "\011\034\054\035\076\041\071\043\062\047\066\050\100" +
    "\056\077\001\002\000\010\005\241\006\uffd0\010\240\001" +
    "\002\000\004\006\uffd2\001\002\000\004\004\253\001\002" +
    "\000\040\004\uffd3\005\uffd3\006\uffd3\010\uffd3\013\uffd3\014" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\047\uffd3\050\uffd3\056\uffd3\001\002\000\004\045\255\001" +
    "\002\000\014\012\uffdf\013\uffdf\014\uffdf\031\uffdf\045\uffdf" +
    "\001\002\000\040\004\uffcd\005\uffcd\006\uffcd\010\uffcd\013" +
    "\uffcd\014\uffcd\034\uffcd\035\uffcd\037\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\047\uffcd\050\uffcd\056\uffcd\001\002\000\014\005" +
    "\uffde\006\uffde\010\uffde\037\uffde\042\uffde\001\002\000\014" +
    "\005\uffd9\006\uffd9\010\uffd9\037\uffd9\042\uffd9\001\002\000" +
    "\014\005\uffd5\006\uffd5\010\uffd5\037\uffd5\042\uffd5\001\002" +
    "\000\014\005\uffda\006\uffda\010\uffda\037\uffda\042\uffda\001" +
    "\002\000\040\004\064\005\uffd4\006\uffd4\010\uffd4\013\072" +
    "\014\011\034\054\035\076\037\uffd4\041\071\042\uffd4\043" +
    "\062\047\066\050\100\056\077\001\002\000\014\005\uffdc" +
    "\006\uffdc\010\uffdc\037\uffdc\042\uffdc\001\002\000\004\050" +
    "\271\001\002\000\012\017\051\022\046\023\050\050\047" +
    "\001\002\000\006\015\270\033\uffb5\001\002\000\004\050" +
    "\271\001\002\000\006\015\276\016\277\001\002\000\004" +
    "\033\uffb8\001\002\000\006\015\274\033\uffb3\001\002\000" +
    "\004\050\271\001\002\000\004\033\uffb4\001\002\000\004" +
    "\050\271\001\002\000\012\017\051\022\046\023\050\050" +
    "\047\001\002\000\006\015\uffb1\033\uffb1\001\002\000\006" +
    "\015\uffb2\033\uffb2\001\002\000\006\015\303\033\uffb6\001" +
    "\002\000\004\050\271\001\002\000\004\033\uffb7\001\002" +
    "\000\004\032\306\001\002\000\006\033\uffb9\050\042\001" +
    "\002\000\004\033\310\001\002\000\004\013\311\001\002" +
    "\000\026\004\316\006\uffe6\013\321\014\011\034\312\035" +
    "\325\041\320\047\066\050\100\056\077\001\002\000\004" +
    "\031\375\001\002\000\036\004\316\005\uffe6\006\uffe6\010" +
    "\uffe6\013\321\014\011\034\312\035\325\037\uffe6\041\320" +
    "\042\uffe6\047\066\050\100\056\077\001\002\000\036\004" +
    "\316\005\uffe6\006\uffe6\010\uffe6\013\321\014\011\034\312" +
    "\035\325\037\uffe6\041\320\042\uffe6\047\066\050\100\056" +
    "\077\001\002\000\036\004\316\005\uffe6\006\uffe6\010\uffe6" +
    "\013\321\014\011\034\312\035\325\037\uffe6\041\320\042" +
    "\uffe6\047\066\050\100\056\077\001\002\000\022\020\116" +
    "\021\122\026\202\032\123\046\107\050\126\051\117\052" +
    "\124\001\002\000\036\004\316\005\uffe6\006\uffe6\010\uffe6" +
    "\013\321\014\011\034\312\035\325\037\uffe6\041\320\042" +
    "\uffe6\047\066\050\100\056\077\001\002\000\004\040\343" +
    "\001\002\000\036\004\316\005\uffe6\006\uffe6\010\uffe6\013" +
    "\321\014\011\034\312\035\325\037\uffe6\041\320\042\uffe6" +
    "\047\066\050\100\056\077\001\002\000\036\004\316\005" +
    "\uffe6\006\uffe6\010\uffe6\013\321\014\011\034\312\035\325" +
    "\037\uffe6\041\320\042\uffe6\047\066\050\100\056\077\001" +
    "\002\000\036\004\316\005\uffe6\006\uffe6\010\uffe6\013\321" +
    "\014\011\034\312\035\325\037\uffe6\041\320\042\uffe6\047" +
    "\066\050\100\056\077\001\002\000\004\006\336\001\002" +
    "\000\004\050\160\001\002\000\036\004\316\005\uffe6\006" +
    "\uffe6\010\uffe6\013\321\014\011\034\312\035\325\037\uffe6" +
    "\041\320\042\uffe6\047\066\050\100\056\077\001\002\000" +
    "\014\005\uffe9\006\uffe9\010\uffe9\037\uffe9\042\uffe9\001\002" +
    "\000\004\036\331\001\002\000\010\032\123\050\133\052" +
    "\124\001\002\000\006\013\333\053\131\001\002\000\026" +
    "\004\316\013\321\014\011\034\312\035\325\037\uffe6\041" +
    "\320\047\066\050\100\056\077\001\002\000\004\037\335" +
    "\001\002\000\036\004\uffe0\005\uffe0\006\uffe0\010\uffe0\013" +
    "\uffe0\014\uffe0\034\uffe0\035\uffe0\037\uffe0\041\uffe0\042\uffe0" +
    "\047\uffe0\050\uffe0\056\uffe0\001\002\000\004\031\337\001" +
    "\002\000\014\012\ufff0\013\ufff0\014\ufff0\031\ufff0\045\ufff0" +
    "\001\002\000\014\005\uffea\006\uffea\010\uffea\037\uffea\042" +
    "\uffea\001\002\000\014\005\uffe7\006\uffe7\010\uffe7\037\uffe7" +
    "\042\uffe7\001\002\000\014\005\uffee\006\uffee\010\uffee\037" +
    "\uffee\042\uffee\001\002\000\022\020\116\021\122\026\202" +
    "\032\123\046\107\050\126\051\117\052\124\001\002\000" +
    "\010\013\345\024\207\025\210\001\002\000\026\004\316" +
    "\013\321\014\011\034\312\035\325\041\320\042\uffe6\047" +
    "\066\050\100\056\077\001\002\000\004\042\347\001\002" +
    "\000\036\004\uffe1\005\uffe1\006\uffe1\010\uffe1\013\uffe1\014" +
    "\uffe1\034\uffe1\035\uffe1\037\uffe1\041\uffe1\042\uffe1\047\uffe1" +
    "\050\uffe1\056\uffe1\001\002\000\014\005\uffec\006\uffec\010" +
    "\uffec\037\uffec\042\uffec\001\002\000\010\007\352\024\207" +
    "\025\210\001\002\000\004\013\uff7c\001\002\000\004\013" +
    "\354\001\002\000\032\004\316\005\uffe6\006\uffe6\010\uffe6" +
    "\013\321\014\011\034\312\035\325\041\320\047\066\050" +
    "\100\056\077\001\002\000\010\005\357\006\uffe2\010\356" +
    "\001\002\000\022\020\116\021\122\026\202\032\123\046" +
    "\107\050\126\051\117\052\124\001\002\000\004\013\363" +
    "\001\002\000\004\006\361\001\002\000\004\004\362\001" +
    "\002\000\036\004\uffe5\005\uffe5\006\uffe5\010\uffe5\013\uffe5" +
    "\014\uffe5\034\uffe5\035\uffe5\037\uffe5\041\uffe5\042\uffe5\047" +
    "\uffe5\050\uffe5\056\uffe5\001\002\000\026\004\316\006\uffe6" +
    "\013\321\014\011\034\312\035\325\041\320\047\066\050" +
    "\100\056\077\001\002\000\004\006\uffe3\001\002\000\010" +
    "\007\366\024\207\025\210\001\002\000\004\013\367\001" +
    "\002\000\032\004\316\005\uffe6\006\uffe6\010\uffe6\013\321" +
    "\014\011\034\312\035\325\041\320\047\066\050\100\056" +
    "\077\001\002\000\010\005\357\006\uffe2\010\356\001\002" +
    "\000\004\006\uffe4\001\002\000\014\005\uffe8\006\uffe8\010" +
    "\uffe8\037\uffe8\042\uffe8\001\002\000\014\005\uffef\006\uffef" +
    "\010\uffef\037\uffef\042\uffef\001\002\000\014\005\uffeb\006" +
    "\uffeb\010\uffeb\037\uffeb\042\uffeb\001\002\000\036\004\316" +
    "\005\uffe6\006\uffe6\010\uffe6\013\321\014\011\034\312\035" +
    "\325\037\uffe6\041\320\042\uffe6\047\066\050\100\056\077" +
    "\001\002\000\014\005\uffed\006\uffed\010\uffed\037\uffed\042" +
    "\uffed\001\002\000\004\013\u0100\001\002\000\006\013\u0103" +
    "\014\011\001\002\000\006\013\u0103\014\011\001\002\000" +
    "\004\006\u0105\001\002\000\010\006\ufff1\013\u0103\014\011" +
    "\001\002\000\004\006\ufff2\001\002\000\004\012\u0106\001" +
    "\002\000\014\012\ufff4\013\ufff4\014\ufff4\031\ufff4\045\ufff4" +
    "\001\002\000\004\006\ufff3\001\002\000\004\006\uffff\001" +
    "\002\000\004\006\ufffe\001\002\000\004\006\ufffd\001\002" +
    "\000\004\030\u010c\001\002\000\004\002\000\001\002\000" +
    "\046\004\uff94\005\uff94\006\uff94\010\uff94\012\uff94\013\uff94" +
    "\014\uff94\031\uff94\034\uff94\035\uff94\037\uff94\041\uff94\042" +
    "\uff94\043\uff94\045\uff94\047\uff94\050\uff94\056\uff94\001\002" +
    "\000\006\015\u010f\016\u0110\001\002\000\004\050\u0119\001" +
    "\002\000\012\017\u0115\022\u0111\023\u0114\050\u0113\001\002" +
    "\000\052\004\uff84\005\uff84\006\uff84\010\uff84\011\u012b\012" +
    "\uff84\013\uff84\014\uff84\015\uff84\031\uff84\034\uff84\035\uff84" +
    "\037\uff84\041\uff84\042\uff84\043\uff84\045\uff84\047\uff84\050" +
    "\uff84\056\uff84\001\002\000\046\004\uff93\005\uff93\006\uff93" +
    "\010\uff93\012\uff93\013\uff93\014\uff93\031\uff93\034\uff93\035" +
    "\uff93\037\uff93\041\uff93\042\uff93\043\uff93\045\uff93\047\uff93" +
    "\050\uff93\056\uff93\001\002\000\052\004\uff81\005\uff81\006" +
    "\uff81\010\uff81\011\u0127\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\031\uff81\034\uff81\035\uff81\037\uff81\041\uff81\042\uff81\043" +
    "\uff81\045\uff81\047\uff81\050\uff81\056\uff81\001\002\000\052" +
    "\004\uff83\005\uff83\006\uff83\010\uff83\011\u0124\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\031\uff83\034\uff83\035\uff83\037\uff83" +
    "\041\uff83\042\uff83\043\uff83\045\uff83\047\uff83\050\uff83\056" +
    "\uff83\001\002\000\052\004\uff82\005\uff82\006\uff82\010\uff82" +
    "\011\u0121\012\uff82\013\uff82\014\uff82\015\uff82\031\uff82\034" +
    "\uff82\035\uff82\037\uff82\041\uff82\042\uff82\043\uff82\045\uff82" +
    "\047\uff82\050\uff82\056\uff82\001\002\000\050\004\uff8f\005" +
    "\uff8f\006\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\u0117" +
    "\031\uff8f\034\uff8f\035\uff8f\037\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\045\uff8f\047\uff8f\050\uff8f\056\uff8f\001\002\000\004" +
    "\050\u0119\001\002\000\046\004\uff92\005\uff92\006\uff92\010" +
    "\uff92\012\uff92\013\uff92\014\uff92\031\uff92\034\uff92\035\uff92" +
    "\037\uff92\041\uff92\042\uff92\043\uff92\045\uff92\047\uff92\050" +
    "\uff92\056\uff92\001\002\000\006\015\u011d\016\u011e\001\002" +
    "\000\050\004\uff8d\005\uff8d\006\uff8d\010\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\u011b\031\uff8d\034\uff8d\035\uff8d\037\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\045\uff8d\047\uff8d\050\uff8d\056" +
    "\uff8d\001\002\000\004\050\u0119\001\002\000\046\004\uff8e" +
    "\005\uff8e\006\uff8e\010\uff8e\012\uff8e\013\uff8e\014\uff8e\031" +
    "\uff8e\034\uff8e\035\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\045\uff8e\047\uff8e\050\uff8e\056\uff8e\001\002\000\004\050" +
    "\u0119\001\002\000\012\017\051\022\046\023\050\050\047" +
    "\001\002\000\050\004\uff8b\005\uff8b\006\uff8b\010\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\031\uff8b\034\uff8b\035\uff8b" +
    "\037\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\056\uff8b\001\002\000\050\004\uff8c\005\uff8c\006\uff8c" +
    "\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\031\uff8c\034" +
    "\uff8c\035\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c" +
    "\047\uff8c\050\uff8c\056\uff8c\001\002\000\006\020\u0122\021" +
    "\u0123\001\002\000\046\004\uff88\005\uff88\006\uff88\010\uff88" +
    "\012\uff88\013\uff88\014\uff88\031\uff88\034\uff88\035\uff88\037" +
    "\uff88\041\uff88\042\uff88\043\uff88\045\uff88\047\uff88\050\uff88" +
    "\056\uff88\001\002\000\046\004\uff87\005\uff87\006\uff87\010" +
    "\uff87\012\uff87\013\uff87\014\uff87\031\uff87\034\uff87\035\uff87" +
    "\037\uff87\041\uff87\042\uff87\043\uff87\045\uff87\047\uff87\050" +
    "\uff87\056\uff87\001\002\000\006\050\140\051\u0125\001\002" +
    "\000\050\004\uff89\005\uff89\006\uff89\010\uff89\012\uff89\013" +
    "\uff89\014\uff89\031\uff89\034\uff89\035\uff89\037\uff89\041\uff89" +
    "\042\uff89\043\uff89\044\uffa3\045\uff89\047\uff89\050\uff89\056" +
    "\uff89\001\002\000\046\004\uff86\005\uff86\006\uff86\010\uff86" +
    "\012\uff86\013\uff86\014\uff86\031\uff86\034\uff86\035\uff86\037" +
    "\uff86\041\uff86\042\uff86\043\uff86\045\uff86\047\uff86\050\uff86" +
    "\056\uff86\001\002\000\004\027\u0128\001\002\000\004\050" +
    "\u0129\001\002\000\004\032\104\001\002\000\046\004\uff85" +
    "\005\uff85\006\uff85\010\uff85\012\uff85\013\uff85\014\uff85\031" +
    "\uff85\034\uff85\035\uff85\037\uff85\041\uff85\042\uff85\043\uff85" +
    "\045\uff85\047\uff85\050\uff85\056\uff85\001\002\000\010\032" +
    "\123\050\133\052\124\001\002\000\050\004\uff8a\005\uff8a" +
    "\006\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\031\uff8a\034" +
    "\uff8a\035\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\045\uff8a" +
    "\047\uff8a\050\uff8a\053\131\056\uff8a\001\002\000\050\004" +
    "\uff90\005\uff90\006\uff90\010\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\u012e\031\uff90\034\uff90\035\uff90\037\uff90\041\uff90\042" +
    "\uff90\043\uff90\045\uff90\047\uff90\050\uff90\056\uff90\001\002" +
    "\000\004\050\u0119\001\002\000\046\004\uff91\005\uff91\006" +
    "\uff91\010\uff91\012\uff91\013\uff91\014\uff91\031\uff91\034\uff91" +
    "\035\uff91\037\uff91\041\uff91\042\uff91\043\uff91\045\uff91\047" +
    "\uff91\050\uff91\056\uff91\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\005\021\006\012\015\014\045\020\001\001\000" +
    "\004\016\u010c\001\001\000\002\001\001\000\014\003\u0109" +
    "\005\021\006\012\015\014\045\020\001\001\000\014\003" +
    "\u0108\005\021\006\012\015\014\045\020\001\001\000\014" +
    "\003\u0107\005\021\006\012\015\014\045\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\035\005\021\006\012\015\014\045\020\001\001\000" +
    "\014\004\023\005\027\006\022\015\024\045\026\001\001" +
    "\000\014\004\034\005\027\006\022\015\024\045\026\001" +
    "\001\000\002\001\001\000\014\004\033\005\027\006\022" +
    "\015\024\045\026\001\001\000\014\004\032\005\027\006" +
    "\022\015\024\045\026\001\001\000\014\004\031\005\027" +
    "\006\022\015\024\045\026\001\001\000\014\004\030\005" +
    "\027\006\022\015\024\045\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\040\060\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\073" +
    "\015\060\021\057\030\064\031\067\032\056\036\054\042" +
    "\072\044\062\046\066\051\074\052\055\001\001\000\002" +
    "\001\001\000\032\007\073\015\060\021\057\030\064\031" +
    "\067\032\056\036\054\042\072\044\261\046\066\051\074" +
    "\052\055\001\001\000\032\007\073\015\060\021\057\030" +
    "\064\031\067\032\056\036\054\042\072\044\260\046\066" +
    "\051\074\052\055\001\001\000\002\001\001\000\032\007" +
    "\073\015\060\021\057\030\064\031\067\032\056\036\054" +
    "\042\072\044\257\046\066\051\074\052\055\001\001\000" +
    "\032\007\073\015\060\021\057\030\064\031\067\032\056" +
    "\036\054\042\072\044\256\046\066\051\074\052\055\001" +
    "\001\000\024\011\120\013\126\017\113\020\112\021\111" +
    "\024\255\025\114\026\127\063\124\001\001\000\002\001" +
    "\001\000\030\011\120\013\126\017\113\020\112\021\111" +
    "\025\202\026\205\033\203\034\231\035\200\063\124\001" +
    "\001\000\032\007\073\015\060\021\057\030\064\031\067" +
    "\032\056\036\054\042\072\044\230\046\066\051\074\052" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\073\015\060\021" +
    "\057\030\064\031\067\032\056\036\054\042\072\044\176" +
    "\046\066\051\074\052\055\001\001\000\032\007\073\015" +
    "\060\021\057\030\064\031\067\032\056\036\054\042\072" +
    "\044\175\046\066\051\074\052\055\001\001\000\032\007" +
    "\073\015\060\021\057\030\064\031\067\032\056\036\054" +
    "\042\072\044\174\046\066\051\074\052\055\001\001\000" +
    "\032\007\073\015\060\021\057\030\064\031\067\032\056" +
    "\036\054\042\072\044\173\046\066\051\074\052\055\001" +
    "\001\000\006\031\156\053\160\001\001\000\004\027\152" +
    "\001\001\000\004\027\100\001\001\000\014\013\126\017" +
    "\113\020\112\021\111\026\151\001\001\000\002\001\001" +
    "\000\010\011\120\025\147\063\124\001\001\000\030\011" +
    "\120\013\126\017\113\020\112\021\111\022\110\023\117" +
    "\024\107\025\114\026\127\063\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\142\017\113\020\112\021\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\113\020\131" +
    "\021\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\134\021\111\001\001\000\002\001\001\000\006" +
    "\011\141\063\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\120\013\126\017\113\020" +
    "\112\021\111\024\145\025\114\026\127\063\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\126\017\113" +
    "\020\112\021\111\026\155\001\001\000\010\011\120\025" +
    "\154\063\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\100\001\001\000\002\001" +
    "\001\000\012\013\162\017\113\020\112\021\111\001\001" +
    "\000\002\001\001\000\032\007\073\015\060\021\057\030" +
    "\064\031\067\032\056\036\054\042\072\044\164\046\066" +
    "\051\074\052\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\172\017\113\020\112\021\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\011\120\013\126\017" +
    "\113\020\112\021\111\025\202\026\205\033\203\034\204" +
    "\035\200\063\124\001\001\000\002\001\001\000\026\011" +
    "\120\013\126\017\113\020\112\021\111\025\202\026\205" +
    "\033\203\035\221\063\124\001\001\000\002\001\001\000" +
    "\004\065\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\120\013\126\017\113\020\112\021\111\025" +
    "\202\026\205\033\203\035\214\063\124\001\001\000\026" +
    "\011\120\013\126\017\113\020\112\021\111\025\202\026" +
    "\205\033\203\035\213\063\124\001\001\000\032\007\073" +
    "\015\060\021\057\030\064\031\067\032\056\036\054\042" +
    "\072\044\211\046\066\051\074\052\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\120\013\126\017\113" +
    "\020\112\021\111\025\202\026\205\033\220\063\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\225\012\226\063\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\233\001\001\000\002\001\001\000\032\007\073" +
    "\015\060\021\057\030\064\031\067\032\056\036\054\042" +
    "\072\044\235\046\066\051\074\052\055\001\001\000\004" +
    "\037\236\001\001\000\002\001\001\000\030\011\120\013" +
    "\126\017\113\020\112\021\111\025\202\026\205\033\203" +
    "\034\244\035\200\063\124\001\001\000\002\001\001\000" +
    "\032\007\073\015\060\021\057\030\064\031\067\032\056" +
    "\036\054\042\072\044\242\046\066\051\074\052\055\001" +
    "\001\000\004\037\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\073\015\060\021" +
    "\057\030\064\031\067\032\056\036\054\042\072\044\247" +
    "\046\066\051\074\052\055\001\001\000\004\037\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\073\015\060\021\057\030\064\031" +
    "\067\032\056\036\054\042\072\044\263\046\066\051\074" +
    "\052\055\001\001\000\002\001\001\000\004\056\301\001" +
    "\001\000\004\064\266\001\001\000\002\001\001\000\006" +
    "\056\272\061\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\272\061\274\001\001" +
    "\000\002\001\001\000\004\056\300\001\001\000\004\064" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\272\061\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\057\040\060\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\322\015" +
    "\313\021\312\030\316\031\067\032\056\041\325\043\323" +
    "\046\066\047\314\050\321\001\001\000\002\001\001\000" +
    "\030\007\322\015\313\021\312\030\316\031\067\032\056" +
    "\041\325\043\373\046\066\047\314\050\321\001\001\000" +
    "\030\007\322\015\313\021\312\030\316\031\067\032\056" +
    "\041\325\043\372\046\066\047\314\050\321\001\001\000" +
    "\030\007\322\015\313\021\312\030\316\031\067\032\056" +
    "\041\325\043\371\046\066\047\314\050\321\001\001\000" +
    "\030\011\120\013\126\017\113\020\112\021\111\025\202" +
    "\026\205\033\203\034\350\035\200\063\124\001\001\000" +
    "\030\007\322\015\313\021\312\030\316\031\067\032\056" +
    "\041\325\043\347\046\066\047\314\050\321\001\001\000" +
    "\002\001\001\000\030\007\322\015\313\021\312\030\316" +
    "\031\067\032\056\041\325\043\341\046\066\047\314\050" +
    "\321\001\001\000\030\007\322\015\313\021\312\030\316" +
    "\031\067\032\056\041\325\043\340\046\066\047\314\050" +
    "\321\001\001\000\030\007\322\015\313\021\312\030\316" +
    "\031\067\032\056\041\325\043\337\046\066\047\314\050" +
    "\321\001\001\000\002\001\001\000\006\031\156\053\327" +
    "\001\001\000\030\007\322\015\313\021\312\030\316\031" +
    "\067\032\056\041\325\043\326\046\066\047\314\050\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\331\017\113\020\112\021\111\001\001\000\002\001\001" +
    "\000\030\007\322\015\313\021\312\030\316\031\067\032" +
    "\056\041\325\043\333\046\066\047\314\050\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\120\013\126\017\113\020\112\021" +
    "\111\025\202\026\205\033\203\034\343\035\200\063\124" +
    "\001\001\000\002\001\001\000\030\007\322\015\313\021" +
    "\312\030\316\031\067\032\056\041\325\043\345\046\066" +
    "\047\314\050\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\352" +
    "\001\001\000\002\001\001\000\030\007\322\015\313\021" +
    "\312\030\316\031\067\032\056\041\325\043\354\046\066" +
    "\047\314\050\321\001\001\000\004\040\357\001\001\000" +
    "\030\011\120\013\126\017\113\020\112\021\111\025\202" +
    "\026\205\033\203\034\364\035\200\063\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\322\015\313\021\312\030\316\031" +
    "\067\032\056\041\325\043\363\046\066\047\314\050\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\322\015\313\021\312\030\316\031\067" +
    "\032\056\041\325\043\367\046\066\047\314\050\321\001" +
    "\001\000\004\040\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\322\015\313\021\312\030\316\031\067\032\056\041\325" +
    "\043\375\046\066\047\314\050\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0101\015\u0100\001\001" +
    "\000\006\010\u0106\015\u0100\001\001\000\002\001\001\000" +
    "\006\010\u0103\015\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u012c\001\001\000\006\055\u0111\064\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\u0117\054\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u011b\054\u0119\001\001" +
    "\000\002\001\001\000\004\054\u011f\001\001\000\004\064" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u0125\063\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\u012b\017\113\020\112" +
    "\021\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u012e\054\u0119\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int cont = 0;
    //public ArrayList<String> errores = new ArrayList<>();
    //public TablaSimbolos tablaSimbolos = new TablaSimbolos(); 
    public int offset = 0;
    public int cantVarsCreadas = 0;    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            System.out.println("Listo Module");       
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINP ::= DECLARACION MDLINP 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MDLINP ::= saltoLinea MDLINP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		     
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MDLINP ::= SUBPROCE MDLINP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		

                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MDLINP ::= FUNC MDLINP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MDLINP ::= STRUCTUREDECLA MDLINP 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MDLINP ::= saltoLinea 
            {
              Object RESULT =null;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINP",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTINSTRUC ::= saltoLinea 
            {
              Object RESULT =null;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea SUBINSTRUC END SUB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBPROCE",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBINSTRUC ::= DECLARACION SUBINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBINSTRUC ::= saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBINSTRUC ::= EXIT SUB SUBINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBINSTRUC ::= ASIGN SUBINSTRUC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBINSTRUC ::= CALL SUBINSTRUC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBINSTRUC ::= WRCONSOLE SUBINSTRUC 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBINSTRUC ::= IFSUB SUBINSTRUC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBINSTRUC ::= FORSUB SUBINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBINSTRUC ::= DOWHILESUB SUBINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBINSTRUC ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBINSTRUC",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFSUB ::= IF CONDICION THEN M saltoLinea SUBINSTRUC SIFSUB END IF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("IFSUB",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIFSUB ::= ELSEIF CONDICION THEN saltoLinea SUBINSTRUC SIFSUB 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIFSUB ::= ELSE saltoLinea SUBINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SIFSUB ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSUB",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DOWHILESUB ::= DO WHILE CONDICION saltoLinea SUBINSTRUC LOOP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DOWHILESUB",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORSUB ::= FOR COUNTER TO OPARIT saltoLinea SUBINSTRUC NEXT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FORSUB",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea FUNCINSTRUC END FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNC",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCINSTRUC ::= DECLARACION FUNCINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCINSTRUC ::= saltoLinea FUNCINSTRUC 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCINSTRUC ::= EXIT FUNCTION FUNCINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCINSTRUC ::= ASIGN FUNCINSTRUC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCINSTRUC ::= RETVAL FUNCINSTRUC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCINSTRUC ::= CALL FUNCINSTRUC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCINSTRUC ::= WRCONSOLE FUNCINSTRUC 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCINSTRUC ::= IFFUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCINSTRUC ::= FORFUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCINSTRUC ::= DOWHILEFUNC FUNCINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCINSTRUC ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCINSTRUC",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFFUNC ::= IF CONDICION THEN M saltoLinea FUNCINSTRUC SIFFUNC END IF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("IFFUNC",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIFFUNC ::= ELSEIF CONDICION THEN saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIFFUNC ::= ELSE saltoLinea FUNCINSTRUC SIFFUNC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIFFUNC ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFFUNC",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DOWHILEFUNC ::= DO WHILE CONDICION saltoLinea FUNCINSTRUC LOOP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DOWHILEFUNC",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FORFUNC ::= FOR COUNTER TO OPARIT saltoLinea FUNCINSTRUC NEXT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FORFUNC",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETVAL ::= RETURN VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("RETVAL",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAL ::= VALASIGN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VAL",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAL ::= VALINT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VAL",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COUNTER ::= ASIGNINT 
            {
              Object RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ai = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",41, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COUNTER ::= identificador AS INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",41, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CALL",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMCALL ::= VARCALL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMCALL ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARCALL ::= VARCALL COMA VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARCALL ::= VAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= CONDICION AND CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= CONDICION OR CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= NOT CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICIONP ::= VALCOND OPCONDICION VALCOND 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCONDICION ::= OPREL 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCONDICION ::= IGUAL 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALCOND ::= VALASIGN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALCOND",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALCOND ::= VALINT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALCOND",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS ::= VARPARAMS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS ::= 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARPARAMS ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",47, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARS2 ::= CANTVARS2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",47, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CANTVARS2 ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGN ::= ASIGNOTRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGN ::= ASIGNINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGN ::= ASIGNSTRUC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNOTRO ::= identificador IGUAL VALASIGN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNOTRO",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNSTRUC ::= LLAMADOSTRUC IGUAL VALASIGN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNSTRUC ::= LLAMADOSTRUC OPASING VALINT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNSTRUC",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALASIGN ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALASIGN ::= TRUE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALASIGN ::= FALSE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALASIGN ::= UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALASIGN ::= READ 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALASIGN",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUNIRSTR ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",49, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALUNIRSTR ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",49, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNINT ::= identificador OPASING VALINT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNINT",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPASING ::= IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPASING ::= OPMULTI IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPASING ::= OPADICION IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASING",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALINT ::= OPARIT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALINT",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPARIT ::= OPARIT OPADICION OP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPARIT ::= OP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP ::= OP OPMULTI OPP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP ::= OPP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPP ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPP ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPP ::= CALL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPP ::= PARENTESISL OPARIT PARENTESISR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPP",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // T ::= identificador AS TIPOIGUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // T ::= identificador COMA CANTVARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARS ::= CANTVARS COMA VARS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARS ::= CANTVARS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CANTVARS ::= identificador COMA CANTVARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CANTVARS ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPOIGUAL ::= INTEGERTYPE IGUAL OPARIT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPOIGUAL ::= STRINGTYPE IGUAL STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPOIGUAL ::= BOOLEANTYPE IGUAL TRUE 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPOIGUAL ::= BOOLEANTYPE IGUAL FALSE 
            {
              Object RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPOIGUAL ::= STRINGTYPE IGUAL UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIPOIGUAL ::= identificador IGUAL NEW CALL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOIGUAL",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPO ::= INTEGERTYPE 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TIPO ::= STRINGTYPE 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPO ::= BOOLEANTYPE 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		  
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALWR ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALWR ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALWR ::= UNIRSTRNG 
            {
              Object RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object ustr = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		  
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // M ::= 
            {
              Object RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",48, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
