
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\013\010\000" +
    "\002\007\004\000\002\007\004\000\002\007\003\000\002" +
    "\004\013\000\002\005\015\000\002\032\003\000\002\032" +
    "\002\000\002\031\007\000\002\031\007\000\002\031\005" +
    "\000\002\031\005\000\002\030\005\000\002\030\003\000" +
    "\002\027\005\000\002\027\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\005\000\002\046\005\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\002\000\002\044\015\000\002\045\013\000\002" +
    "\045\005\000\002\045\002\000\002\017\010\000\002\016" +
    "\011\000\002\012\004\000\002\014\005\000\002\014\007" +
    "\000\002\040\006\000\002\024\003\000\002\024\002\000" +
    "\002\023\005\000\002\023\003\000\002\041\006\000\002" +
    "\041\006\000\002\041\004\000\002\041\003\000\002\042" +
    "\005\000\002\025\003\000\002\025\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\034\005\000" +
    "\002\034\005\000\002\035\003\000\002\035\003\000\002" +
    "\026\003\000\002\026\004\000\002\026\004\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\004\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\010\004\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\005\000\002\015\005\000" +
    "\002\022\005\000\002\022\003\000\002\021\005\000\002" +
    "\021\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\006\006\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\043\002\000" +
    "\002\047\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\030\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\014\012\017\013\014\014" +
    "\011\031\016\045\020\001\002\000\004\050\327\001\002" +
    "\000\004\006\324\001\002\000\014\012\017\013\014\014" +
    "\011\031\016\045\020\001\002\000\016\006\ufffa\012\017" +
    "\013\014\014\011\031\016\045\020\001\002\000\014\012" +
    "\017\013\014\014\011\031\016\045\020\001\002\000\004" +
    "\050\311\001\002\000\004\050\300\001\002\000\004\050" +
    "\025\001\002\000\014\012\017\013\014\014\011\031\016" +
    "\045\020\001\002\000\014\012\017\013\014\014\011\031" +
    "\016\045\020\001\002\000\004\006\ufffc\001\002\000\004" +
    "\006\ufffb\001\002\000\004\032\026\001\002\000\006\033" +
    "\ufff2\050\030\001\002\000\004\033\ufff3\001\002\000\006" +
    "\015\260\016\261\001\002\000\004\033\032\001\002\000" +
    "\004\016\033\001\002\000\012\017\037\022\034\023\036" +
    "\050\035\001\002\000\054\004\uffa6\005\uffa6\006\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\031\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\037\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\045\uffa6\047\uffa6\050\uffa6\056\uffa6\001\002\000\054" +
    "\004\uffa3\005\uffa3\006\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\037\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\047\uffa3\050" +
    "\uffa3\056\uffa3\001\002\000\054\004\uffa5\005\uffa5\006\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\031" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\045\uffa5\047\uffa5\050\uffa5\056\uffa5\001\002\000" +
    "\054\004\uffa4\005\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\031\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\047\uffa4" +
    "\050\uffa4\056\uffa4\001\002\000\004\013\041\001\002\000" +
    "\030\004\051\006\uffde\013\056\014\011\034\042\035\061" +
    "\041\055\043\047\047\053\050\063\056\062\001\002\000" +
    "\006\031\254\045\255\001\002\000\040\004\051\005\uffde" +
    "\006\uffde\010\uffde\013\056\014\011\034\042\035\061\037" +
    "\uffde\041\055\042\uffde\043\047\047\053\050\063\056\062" +
    "\001\002\000\040\004\051\005\uffde\006\uffde\010\uffde\013" +
    "\056\014\011\034\042\035\061\037\uffde\041\055\042\uffde" +
    "\043\047\047\053\050\063\056\062\001\002\000\040\004" +
    "\051\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042" +
    "\035\061\037\uffde\041\055\042\uffde\043\047\047\053\050" +
    "\063\056\062\001\002\000\040\004\051\005\uffde\006\uffde" +
    "\010\uffde\013\056\014\011\034\042\035\061\037\uffde\041" +
    "\055\042\uffde\043\047\047\053\050\063\056\062\001\002" +
    "\000\020\020\077\021\103\027\075\032\106\050\107\051" +
    "\102\052\074\001\002\000\040\004\uff9e\005\uff9e\006\uff9e" +
    "\010\uff9e\013\uff9e\014\uff9e\034\uff9e\035\uff9e\037\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\047\uff9e\050\uff9e\056\uff9e\001\002" +
    "\000\022\020\077\021\103\026\166\027\075\032\106\050" +
    "\107\051\102\052\074\001\002\000\040\004\051\005\uffde" +
    "\006\uffde\010\uffde\013\056\014\011\034\042\035\061\037" +
    "\uffde\041\055\042\uffde\043\047\047\053\050\063\056\062" +
    "\001\002\000\004\032\210\001\002\000\004\006\206\001" +
    "\002\000\004\040\163\001\002\000\040\004\051\005\uffde" +
    "\006\uffde\010\uffde\013\056\014\011\034\042\035\061\037" +
    "\uffde\041\055\042\uffde\043\047\047\053\050\063\056\062" +
    "\001\002\000\040\004\051\005\uffde\006\uffde\010\uffde\013" +
    "\056\014\011\034\042\035\061\037\uffde\041\055\042\uffde" +
    "\043\047\047\053\050\063\056\062\001\002\000\040\004" +
    "\051\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042" +
    "\035\061\037\uffde\041\055\042\uffde\043\047\047\053\050" +
    "\063\056\062\001\002\000\004\050\143\001\002\000\010" +
    "\011\141\053\065\054\070\001\002\000\012\011\066\032" +
    "\067\053\065\054\070\001\002\000\020\020\077\021\103" +
    "\027\075\032\106\050\107\051\102\052\074\001\002\000" +
    "\004\011\136\001\002\000\022\020\uffc1\021\uffc1\027\uffc1" +
    "\032\uffc1\046\135\050\uffc1\051\uffc1\052\uffc1\001\002\000" +
    "\022\020\077\021\103\027\075\032\106\033\uffd2\050\107" +
    "\051\102\052\074\001\002\000\004\011\071\001\002\000" +
    "\020\020\uffc0\021\uffc0\027\uffc0\032\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\001\002\000\012\015\133\033\uffd0\053\116\054" +
    "\117\001\002\000\072\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\024" +
    "\uffb3\025\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\047\uffb3\050" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002\000\072" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\024\uffb9\025\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\045\uffb9\047\uffb9\050\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\004\050\131\001\002\000" +
    "\072\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\024\uffb1\025\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\045\uffb1\047\uffb1\050\uffb1\053\113\054" +
    "\114\055\uffb1\056\uffb1\001\002\000\072\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\024\uffb7\025\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\045" +
    "\uffb7\047\uffb7\050\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\004\033\uffd3\001\002\000\004\044\124\001" +
    "\002\000\074\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\024\uffb8\025" +
    "\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffc3\045\uffb8\047\uffb8\050" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\072" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\024\uffb6\025\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\045\uffb6\047\uffb6\050\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\001\002\000\004\033\123\001\002\000" +
    "\072\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\024\uffb4\025\uffb4\031" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\045\uffb4\047\uffb4\050\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\001\002\000\020\020\077\021\103" +
    "\027\075\032\106\050\107\051\102\052\074\001\002\000" +
    "\076\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\024\uffb2\025\uffb2\031" +
    "\uffb2\032\067\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffc2\045\uffb2\047\uffb2\050" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\006" +
    "\053\116\054\117\001\002\000\010\033\112\053\113\054" +
    "\114\001\002\000\072\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\024" +
    "\uffbc\025\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\047\uffbc\050" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000\020" +
    "\020\077\021\103\027\075\032\106\050\107\051\102\052" +
    "\074\001\002\000\020\020\077\021\103\027\075\032\106" +
    "\050\107\051\102\052\074\001\002\000\072\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\024\uffbd\025\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\045\uffbd\047\uffbd\050\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\001\002\000\020\020\077\021\103\027\075\032\106" +
    "\050\107\051\102\052\074\001\002\000\020\020\077\021" +
    "\103\027\075\032\106\050\107\051\102\052\074\001\002" +
    "\000\072\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\024\uffba\025\uffba" +
    "\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\047\uffba\050\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\001\002\000\072\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\024\uffbb\025\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\045\uffbb\047\uffbb\050\uffbb\053\uffbb\054\117\055\uffbb\056" +
    "\uffbb\001\002\000\072\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\024" +
    "\uffbe\025\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\047\uffbe\050" +
    "\uffbe\053\uffbe\054\117\055\uffbe\056\uffbe\001\002\000\072" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\024\uffd4\025\uffd4\031\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\045\uffd4\047\uffd4\050\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\001\002\000\006\050\126\051\125\001" +
    "\002\000\074\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\024\uffc3\025" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\074" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\024\uffc2\025\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\001\002\000\074\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\024\uffc4\025\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\124\045\uffc4\047\uffc4\050\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\001\002\000\072\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\024\uffc5\025\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5\047" +
    "\uffc5\050\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002" +
    "\000\004\032\067\001\002\000\072\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\024\uffb5\025\uffb5\031\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5" +
    "\047\uffb5\050\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\001" +
    "\002\000\020\020\077\021\103\027\075\032\106\050\107" +
    "\051\102\052\074\001\002\000\004\033\uffd1\001\002\000" +
    "\040\004\uffc7\005\uffc7\006\uffc7\010\uffc7\013\uffc7\014\uffc7" +
    "\034\uffc7\035\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\047" +
    "\uffc7\050\uffc7\056\uffc7\001\002\000\020\020\uffbf\021\uffbf" +
    "\027\uffbf\032\uffbf\050\uffbf\051\uffbf\052\uffbf\001\002\000" +
    "\044\004\uffc8\005\uffc8\006\uffc8\010\uffc8\013\uffc8\014\uffc8" +
    "\034\uffc8\035\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\047" +
    "\uffc8\050\uffc8\053\116\054\117\056\uffc8\001\002\000\020" +
    "\020\077\021\103\027\075\032\106\050\107\051\102\052" +
    "\074\001\002\000\020\020\uffc1\021\uffc1\027\uffc1\032\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\001\002\000\044\004\uffc6\005" +
    "\uffc6\006\uffc6\010\uffc6\013\uffc6\014\uffc6\034\uffc6\035\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\043\uffc6\047\uffc6\050\uffc6\053" +
    "\116\054\117\056\uffc6\001\002\000\012\011\141\016\153" +
    "\053\065\054\070\001\002\000\004\036\145\001\002\000" +
    "\020\020\077\021\103\027\075\032\106\050\107\051\102" +
    "\052\074\001\002\000\010\013\147\053\116\054\117\001" +
    "\002\000\030\004\051\013\056\014\011\034\042\035\061" +
    "\037\uffde\041\055\043\047\047\053\050\063\056\062\001" +
    "\002\000\004\037\151\001\002\000\040\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\013\uffd8\014\uffd8\034\uffd8\035\uffd8\037" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\047\uffd8\050\uffd8\056\uffd8" +
    "\001\002\000\020\020\077\021\103\027\075\032\106\050" +
    "\107\051\102\052\074\001\002\000\004\022\154\001\002" +
    "\000\004\011\155\001\002\000\020\020\077\021\103\027" +
    "\075\032\106\050\107\051\102\052\074\001\002\000\010" +
    "\036\uffd5\053\116\054\117\001\002\000\010\036\uffd6\053" +
    "\116\054\117\001\002\000\014\005\uffdf\006\uffdf\010\uffdf" +
    "\037\uffdf\042\uffdf\001\002\000\014\005\uffe2\006\uffe2\010" +
    "\uffe2\037\uffe2\042\uffe2\001\002\000\014\005\uffe8\006\uffe8" +
    "\010\uffe8\037\uffe8\042\uffe8\001\002\000\022\020\077\021" +
    "\103\026\166\027\075\032\106\050\107\051\102\052\074" +
    "\001\002\000\012\011\204\053\116\054\117\055\202\001" +
    "\002\000\012\007\uffcc\013\uffcc\024\174\025\175\001\002" +
    "\000\020\020\077\021\103\027\075\032\106\050\107\051" +
    "\102\052\074\001\002\000\004\013\170\001\002\000\030" +
    "\004\051\013\056\014\011\034\042\035\061\041\055\042" +
    "\uffde\043\047\047\053\050\063\056\062\001\002\000\004" +
    "\042\172\001\002\000\040\004\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\013\uffd9\014\uffd9\034\uffd9\035\uffd9\037\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\047\uffd9\050\uffd9\056\uffd9\001\002\000" +
    "\006\007\uffcd\013\uffcd\001\002\000\022\020\uff9e\021\uff9e" +
    "\026\uff9e\027\uff9e\032\uff9e\050\uff9e\051\uff9e\052\uff9e\001" +
    "\002\000\022\020\uff9e\021\uff9e\026\uff9e\027\uff9e\032\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\001\002\000\022\020\077\021" +
    "\103\026\166\027\075\032\106\050\107\051\102\052\074" +
    "\001\002\000\006\007\uffce\013\uffce\001\002\000\022\020" +
    "\077\021\103\026\166\027\075\032\106\050\107\051\102" +
    "\052\074\001\002\000\006\007\uffcf\013\uffcf\001\002\000" +
    "\020\020\uffca\021\uffca\027\uffca\032\uffca\050\uffca\051\uffca" +
    "\052\uffca\001\002\000\020\020\077\021\103\027\075\032" +
    "\106\050\107\051\102\052\074\001\002\000\020\020\uffc9" +
    "\021\uffc9\027\uffc9\032\uffc9\050\uffc9\051\uffc9\052\uffc9\001" +
    "\002\000\016\007\uffcb\013\uffcb\024\uffcb\025\uffcb\053\116" +
    "\054\117\001\002\000\004\045\207\001\002\000\014\012" +
    "\ufff4\013\ufff4\014\ufff4\031\ufff4\045\ufff4\001\002\000\006" +
    "\050\212\051\211\001\002\000\006\033\uffa0\044\uffc3\001" +
    "\002\000\006\033\uffa1\044\uffc2\001\002\000\004\033\uff9f" +
    "\001\002\000\004\033\215\001\002\000\040\004\uffa2\005" +
    "\uffa2\006\uffa2\010\uffa2\013\uffa2\014\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\041\uffa2\042\uffa2\043\uffa2\047\uffa2\050\uffa2\056" +
    "\uffa2\001\002\000\014\005\uffe5\006\uffe5\010\uffe5\037\uffe5" +
    "\042\uffe5\001\002\000\004\007\220\001\002\000\004\013" +
    "\uff9e\001\002\000\004\013\222\001\002\000\034\004\051" +
    "\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042\035" +
    "\061\041\055\043\047\047\053\050\063\056\062\001\002" +
    "\000\010\005\uff9d\006\uff9d\010\uff9d\001\002\000\010\005" +
    "\uff9e\006\uff9e\010\uff9e\001\002\000\010\005\227\006\uffda" +
    "\010\226\001\002\000\022\020\077\021\103\026\166\027" +
    "\075\032\106\050\107\051\102\052\074\001\002\000\004" +
    "\013\233\001\002\000\004\006\231\001\002\000\004\004" +
    "\232\001\002\000\040\004\uffdd\005\uffdd\006\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\034\uffdd\035\uffdd\037\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\047\uffdd\050\uffdd\056\uffdd\001\002\000\030" +
    "\004\051\006\uffde\013\056\014\011\034\042\035\061\041" +
    "\055\043\047\047\053\050\063\056\062\001\002\000\004" +
    "\006\uffdb\001\002\000\004\007\236\001\002\000\004\013" +
    "\uff9e\001\002\000\004\013\240\001\002\000\034\004\051" +
    "\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042\035" +
    "\061\041\055\043\047\047\053\050\063\056\062\001\002" +
    "\000\010\005\uff9d\006\uff9d\010\uff9d\001\002\000\010\005" +
    "\uff9e\006\uff9e\010\uff9e\001\002\000\010\005\227\006\uffda" +
    "\010\226\001\002\000\004\006\uffdc\001\002\000\040\004" +
    "\051\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042" +
    "\035\061\037\uffde\041\055\042\uffde\043\047\047\053\050" +
    "\063\056\062\001\002\000\014\005\uffe1\006\uffe1\010\uffe1" +
    "\037\uffe1\042\uffe1\001\002\000\044\004\uffd7\005\uffd7\006" +
    "\uffd7\010\uffd7\013\uffd7\014\uffd7\034\uffd7\035\uffd7\037\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\047\uffd7\050\uffd7\053\116\054" +
    "\117\056\uffd7\001\002\000\014\005\uffe9\006\uffe9\010\uffe9" +
    "\037\uffe9\042\uffe9\001\002\000\014\005\uffe3\006\uffe3\010" +
    "\uffe3\037\uffe3\042\uffe3\001\002\000\014\005\uffe4\006\uffe4" +
    "\010\uffe4\037\uffe4\042\uffe4\001\002\000\014\005\uffe0\006" +
    "\uffe0\010\uffe0\037\uffe0\042\uffe0\001\002\000\040\004\051" +
    "\005\uffde\006\uffde\010\uffde\013\056\014\011\034\042\035" +
    "\061\037\uffde\041\055\042\uffde\043\047\047\053\050\063" +
    "\056\062\001\002\000\040\004\051\005\uffde\006\uffde\010" +
    "\uffde\013\056\014\011\034\042\035\061\037\uffde\041\055" +
    "\042\uffde\043\047\047\053\050\063\056\062\001\002\000" +
    "\014\005\uffe6\006\uffe6\010\uffe6\037\uffe6\042\uffe6\001\002" +
    "\000\014\005\uffe7\006\uffe7\010\uffe7\037\uffe7\042\uffe7\001" +
    "\002\000\004\050\264\001\002\000\012\017\037\022\034" +
    "\023\036\050\035\001\002\000\006\015\263\033\uffee\001" +
    "\002\000\004\050\264\001\002\000\006\015\271\016\272" +
    "\001\002\000\004\033\ufff1\001\002\000\006\015\267\033" +
    "\uffec\001\002\000\004\050\264\001\002\000\004\033\uffed" +
    "\001\002\000\004\050\264\001\002\000\012\017\037\022" +
    "\034\023\036\050\035\001\002\000\006\015\uffea\033\uffea" +
    "\001\002\000\006\015\uffeb\033\uffeb\001\002\000\006\015" +
    "\276\033\uffef\001\002\000\004\050\264\001\002\000\004" +
    "\033\ufff0\001\002\000\004\013\301\001\002\000\006\013" +
    "\304\014\011\001\002\000\006\013\304\014\011\001\002" +
    "\000\004\006\306\001\002\000\010\006\ufff6\013\304\014" +
    "\011\001\002\000\004\006\ufff7\001\002\000\004\012\307" +
    "\001\002\000\014\012\ufff9\013\ufff9\014\ufff9\031\ufff9\045" +
    "\ufff9\001\002\000\004\006\ufff8\001\002\000\004\032\312" +
    "\001\002\000\006\033\ufff2\050\030\001\002\000\004\033" +
    "\314\001\002\000\004\013\315\001\002\000\030\004\051" +
    "\006\uffde\013\056\014\011\034\042\035\061\041\055\043" +
    "\047\047\053\050\063\056\062\001\002\000\004\006\317" +
    "\001\002\000\004\031\320\001\002\000\014\012\ufff5\013" +
    "\ufff5\014\ufff5\031\ufff5\045\ufff5\001\002\000\004\006\uffff" +
    "\001\002\000\004\006\ufffe\001\002\000\004\006\ufffd\001" +
    "\002\000\004\030\325\001\002\000\004\002\000\001\002" +
    "\000\046\004\uffb0\005\uffb0\006\uffb0\010\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\031\uffb0\034\uffb0\035\uffb0\037\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\045\uffb0\047\uffb0\050\uffb0\056\uffb0\001" +
    "\002\000\006\015\330\016\331\001\002\000\004\050\337" +
    "\001\002\000\012\017\037\022\034\023\036\050\035\001" +
    "\002\000\052\004\uffab\005\uffab\006\uffab\010\uffab\011\334" +
    "\012\uffab\013\uffab\014\uffab\015\333\031\uffab\034\uffab\035" +
    "\uffab\037\uffab\041\uffab\042\uffab\043\uffab\045\uffab\047\uffab" +
    "\050\uffab\056\uffab\001\002\000\004\050\337\001\002\000" +
    "\020\020\077\021\103\027\075\032\106\050\107\051\102" +
    "\052\074\001\002\000\052\004\uffaf\005\uffaf\006\uffaf\010" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\031\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\041\uffaf\042\uffaf\043\uffaf\045\uffaf\047\uffaf\050" +
    "\uffaf\053\116\054\117\056\uffaf\001\002\000\046\004\uffae" +
    "\005\uffae\006\uffae\010\uffae\012\uffae\013\uffae\014\uffae\031" +
    "\uffae\034\uffae\035\uffae\037\uffae\041\uffae\042\uffae\043\uffae" +
    "\045\uffae\047\uffae\050\uffae\056\uffae\001\002\000\006\015" +
    "\343\016\344\001\002\000\050\004\uffa9\005\uffa9\006\uffa9" +
    "\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015\341\031\uffa9\034" +
    "\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9" +
    "\047\uffa9\050\uffa9\056\uffa9\001\002\000\004\050\337\001" +
    "\002\000\046\004\uffaa\005\uffaa\006\uffaa\010\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\031\uffaa\034\uffaa\035\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\045\uffaa\047\uffaa\050\uffaa\056\uffaa" +
    "\001\002\000\004\050\337\001\002\000\012\017\037\022" +
    "\034\023\036\050\035\001\002\000\050\004\uffa7\005\uffa7" +
    "\006\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\031" +
    "\uffa7\034\uffa7\035\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\045\uffa7\047\uffa7\050\uffa7\056\uffa7\001\002\000\050\004" +
    "\uffa8\005\uffa8\006\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\031\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\047\uffa8\050\uffa8\056\uffa8\001\002" +
    "\000\050\004\uffac\005\uffac\006\uffac\010\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\350\031\uffac\034\uffac\035\uffac\037\uffac" +
    "\041\uffac\042\uffac\043\uffac\045\uffac\047\uffac\050\uffac\056" +
    "\uffac\001\002\000\004\050\337\001\002\000\046\004\uffad" +
    "\005\uffad\006\uffad\010\uffad\012\uffad\013\uffad\014\uffad\031" +
    "\uffad\034\uffad\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad" +
    "\045\uffad\047\uffad\050\uffad\056\uffad\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\004\021\005\012\010\014\013\020\001\001\000" +
    "\004\015\325\001\001\000\002\001\001\000\014\003\322" +
    "\004\021\005\012\010\014\013\020\001\001\000\014\003" +
    "\321\004\021\005\012\010\014\013\020\001\001\000\014" +
    "\003\320\004\021\005\012\010\014\013\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\023\004\021\005\012\010\014\013\020\001\001\000" +
    "\014\003\022\004\021\005\012\010\014\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\026\032\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\056\010\045\011\051\012\043\016\042\017\057\040\044" +
    "\044\047\046\053\001\001\000\002\001\001\000\024\006" +
    "\056\010\045\011\051\012\043\016\042\017\057\040\044" +
    "\044\047\046\252\001\001\000\024\006\056\010\045\011" +
    "\051\012\043\016\042\017\057\040\044\044\047\046\251" +
    "\001\001\000\024\006\056\010\045\011\051\012\043\016" +
    "\042\017\057\040\044\044\047\046\250\001\001\000\024" +
    "\006\056\010\045\011\051\012\043\016\042\017\057\040" +
    "\044\044\047\046\247\001\001\000\014\034\072\035\100" +
    "\036\246\037\075\040\104\001\001\000\004\043\244\001" +
    "\001\000\020\034\072\035\100\036\163\037\075\040\104" +
    "\041\216\042\164\001\001\000\024\006\056\010\045\011" +
    "\051\012\043\016\042\017\057\040\044\044\047\046\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\056\010\045\011\051\012\043\016\042" +
    "\017\057\040\044\044\047\046\161\001\001\000\024\006" +
    "\056\010\045\011\051\012\043\016\042\017\057\040\044" +
    "\044\047\046\160\001\001\000\024\006\056\010\045\011" +
    "\051\012\043\016\042\017\057\040\044\044\047\046\157" +
    "\001\001\000\004\014\143\001\001\000\004\026\137\001" +
    "\001\000\004\026\063\001\001\000\014\034\072\035\100" +
    "\036\136\037\075\040\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\077\024\103\034\072\035\100" +
    "\036\071\037\075\040\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\072\035\100\036\107\037\110\040\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\072\035\100\036\121" +
    "\037\075\040\104\001\001\000\014\034\072\035\100\036" +
    "\114\037\075\040\104\001\001\000\002\001\001\000\014" +
    "\034\072\035\100\036\120\037\075\040\104\001\001\000" +
    "\014\034\072\035\100\036\117\037\075\040\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\127\035\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\133" +
    "\034\072\035\100\036\071\037\075\040\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\034\072\035\100\036\141\037\075\040" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\151\001\001\000\002\001\001\000\014\034\072\035" +
    "\100\036\145\037\075\040\104\001\001\000\002\001\001" +
    "\000\024\006\056\010\045\011\051\012\043\016\042\017" +
    "\057\040\044\044\047\046\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\072\035\100\036\156\037" +
    "\075\040\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\072\035\100\036\155\037\075\040\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\034\072\035" +
    "\100\036\163\037\075\040\104\041\166\042\164\001\001" +
    "\000\004\025\202\001\001\000\002\001\001\000\016\034" +
    "\072\035\100\036\163\037\075\040\104\042\172\001\001" +
    "\000\002\001\001\000\024\006\056\010\045\011\051\012" +
    "\043\016\042\017\057\040\044\044\047\046\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\177\001\001\000\004\043\175\001\001\000\020" +
    "\034\072\035\100\036\163\037\075\040\104\041\176\042" +
    "\164\001\001\000\002\001\001\000\020\034\072\035\100" +
    "\036\163\037\075\040\104\041\200\042\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\072\035\100" +
    "\036\204\037\075\040\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\213\034\212\035\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\220\001\001\000\002\001\001\000\024\006\056\010\045" +
    "\011\051\012\043\016\042\017\057\040\044\044\047\046" +
    "\222\001\001\000\004\047\223\001\001\000\004\043\224" +
    "\001\001\000\004\045\227\001\001\000\020\034\072\035" +
    "\100\036\163\037\075\040\104\041\234\042\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\056\010\045\011\051\012\043" +
    "\016\042\017\057\040\044\044\047\046\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\236\001\001" +
    "\000\002\001\001\000\024\006\056\010\045\011\051\012" +
    "\043\016\042\017\057\040\044\044\047\046\240\001\001" +
    "\000\004\047\241\001\001\000\004\043\242\001\001\000" +
    "\004\045\243\001\001\000\002\001\001\000\024\006\056" +
    "\010\045\011\051\012\043\016\042\017\057\040\044\044" +
    "\047\046\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\056\010\045\011\051\012\043" +
    "\016\042\017\057\040\044\044\047\046\256\001\001\000" +
    "\024\006\056\010\045\011\051\012\043\016\042\017\057" +
    "\040\044\044\047\046\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\274\001\001\000\004\020\261" +
    "\001\001\000\002\001\001\000\006\027\265\030\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\265\030\267\001\001\000\002\001\001\000" +
    "\004\027\273\001\001\000\004\020\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\265\030\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\302\010\301\001\001\000\006\007\307\010" +
    "\301\001\001\000\002\001\001\000\006\007\304\010\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\026" +
    "\032\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\056\010\045\011\051\012\043\016\042\017\057" +
    "\040\044\044\047\046\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\346" +
    "\001\001\000\004\020\331\001\001\000\002\001\001\000" +
    "\006\021\337\022\335\001\001\000\014\034\072\035\100" +
    "\036\334\037\075\040\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\337\022\341\001\001\000\002\001\001\000\004\021" +
    "\345\001\001\000\004\020\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\337\022" +
    "\350\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int cont = 0;    
    public ArrayList<String> errores;
    public TablaSimbolos tablaSimbolos; 
    public int posActualTabla = 0;
    public int cantTemp = 0;
    public Cuadruplo cuadruplos = new Cuadruplo();

    public void setErrores(ArrayList<String> _errores){
        errores = _errores;
    }
    
    public void setTablaSimbolos(TablaSimbolos _tabla){
        tablaSimbolos = _tabla;
    }

    public String nuevoTemp(){
        String temp = "t"+ Integer.toString(cantTemp);
        cantTemp++;
        return temp;
    }

    public ArrayList<Integer> creaLista(int indice){
        ArrayList<Integer> retVal = new ArrayList<>();
        retVal.add(indice);
        return retVal;
    }

    public ArrayList<Integer> fusiona(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
        ArrayList<Integer> retVal = new ArrayList<>();
        if (lista1 != null){
            for(int i = 0; i < lista1.size();i++){
                retVal.add(lista1.get(i));
            }
        }       
        if (lista2 != null){
            for(int i = 0; i < lista2.size();i++){
                retVal.add(lista2.get(i));
            }
        }         
        return retVal;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MODULE identificador saltoLinea MDLINSTRUC END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		            
            System.out.println("Listo Module");
            System.out.println("---------------Cuadruplos----------------");           
            cuadruplos.imprimirCuadruplos();
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MDLINSTRUC ::= DECLARACION MDLINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MDLINSTRUC ::= saltoLinea MDLINSTRUC 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MDLINSTRUC ::= FUNC MDLINSTRUC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MDLINSTRUC ::= SUBPROCE MDLINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MDLINSTRUC ::= STRUCTUREDECLA MDLINSTRUC 
            {
              Object RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MDLINSTRUC ::= saltoLinea 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("MDLINSTRUC",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STRUCTUREDECLA ::= STRUCTURE identificador saltoLinea STRUCTINSTRUC END STRUCTURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTUREDECLA",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STRUCTINSTRUC ::= DECLARACION STRUCTINSTRUC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STRUCTINSTRUC ::= saltoLinea STRUCTINSTRUC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STRUCTINSTRUC ::= saltoLinea 
            {
              Object RESULT =null;
		
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STRUCTINSTRUC",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUBPROCE ::= SUB identificador PARENTESISL PARAMS PARENTESISR saltoLinea STATEMENTS END SUB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->void");
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe el sub procedure "+ id + " en el programa");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SUBPROCE",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= FUNCTION identificador PARENTESISL PARAMS PARENTESISR AS TIPO saltoLinea STATEMENTS END FUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,p.getTipo()+"->"+t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la función "+ id + " en el programa");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS ::= VARPARAMS 
            {
              Objeto RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS ::= 
            {
              Objeto RESULT =null;
		
                    Objeto retVal = new Objeto("void","");
                    RESULT = retVal;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARPARAMS ::= identificador AS TIPO COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t+v.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARPARAMS ::= identificador COMA CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                        
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());                        
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);                        
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+c.getAcumulada()+v.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARPARAMS ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(c.getTipo()+ c.getAcumulada(),"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARPARAMS ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }  

                        posActualTabla+=1;
                        Objeto retVal = new Objeto(t,"");
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARPARAMS",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARS2 ::= CANTVARS2 COMA VARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto v = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        Objeto retVal = new Objeto(c.getTipo(), c.getAcumulada()+v.getAcumulada());
                        RESULT = retVal;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARS2 ::= CANTVARS2 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS2",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CANTVARS2 ::= identificador COMA CANTVARS2 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,c.getTipo());
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }

                        posActualTabla+=1;
                        Objeto retval = new Objeto(c.getTipo(),"x"+c.getTipo()+c.getAcumulada());
                        RESULT = retval;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CANTVARS2 ::= identificador AS TIPO 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                        boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                        if (!esValida){
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                        }
                        
                        posActualTabla+=1;
                        Objeto retval = new Objeto(t,"x"+t);
                        RESULT = retval;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS2",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS ::= saltoLinea STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS ::= EXIT SUB STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS ::= EXIT FUNCTION STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENTS ::= ASIGN STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS ::= RETVAL STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                        //ojo
                        RESULT = new ArrayList<>(); 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENTS ::= CALL STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENTS ::= WRCONSOLE STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENTS ::= IFSTATEMENT M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> i = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    System.out.println("i"+i);
                    System.out.println("s"+s);
                    cuadruplos.completa(i,m.getNum());
                    RESULT = i; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENTS ::= FORSTATEMENT STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENTS ::= DOWHILESTATE STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENTS ::= 
            {
              ArrayList<Integer> RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSTATEMENT ::= IF CONDICION THEN M saltoLinea STATEMENTS N M SIFSTATEMENT END IF 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		   
                        ArrayList<Integer> siguiente = new ArrayList<>();                     
                        cuadruplos.completa(c.getListaVerdadera(), m.getNum());
                        if (s2 != null){
                            cuadruplos.completa(c.getListaFalsa(),m2.getNum());
                            siguiente = fusiona(n,fusiona(s,s2));
                        } else {
                            cuadruplos.eliminarUltimo();
                            siguiente = fusiona(c.getListaFalsa(),s);
                        }
                        RESULT = siguiente;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-10)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIFSTATEMENT ::= ELSEIF CONDICION THEN M saltoLinea STATEMENTS N M SIFSTATEMENT 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    ArrayList<Integer> siguiente = new ArrayList<>();                     
                    cuadruplos.completa(c.getListaVerdadera(), m.getNum());                    
                    if (s2 != null){                        
                        cuadruplos.completa(c.getListaFalsa(),m2.getNum());
                        siguiente = fusiona(n,fusiona(s,s2));
                    } else {
                        cuadruplos.eliminarUltimo();
                        siguiente = fusiona(c.getListaFalsa(),s);
                    }
                    RESULT = siguiente;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIFSTATEMENT ::= ELSE saltoLinea STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = s;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIFSTATEMENT ::= 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("SIFSTATEMENT",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DOWHILESTATE ::= DO WHILE CONDICION saltoLinea STATEMENTS LOOP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FORSTATEMENT ::= FOR COUNTER TO VALOR saltoLinea STATEMENTS NEXT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETVAL ::= RETURN VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posFuncion = tablaSimbolos.siguienteFuncion(posActualTabla);
                    String retornoFuncion = tablaSimbolos.getTipoRetorno(posFuncion);
                    if (retornoFuncion.equals("void")){
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " no se puede hacer return en un SUBPROCEDURE");
                    } else {
                        if (retornoFuncion.equals(v.getTipo())){
                        //cuadruplo
                        } else {
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " el tipo de retorno es "+ retornoFuncion);
                        }   
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("RETVAL",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COUNTER ::= identificador OPASIGN VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COUNTER ::= identificador AS INTEGERTYPE IGUAL VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("COUNTER",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALL ::= identificador PARENTESISL PARAMCALL PARENTESISR 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    String tipo;
                    int posFunc = tablaSimbolos.buscarFUNC(id, p);
                    if (posFunc == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe la funcion o procedure "+ id + " con parametros "+p);
                    } else {
                        tipo = tablaSimbolos.getTipoRetorno(posFunc);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CALL",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMCALL ::= VARCALL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMCALL ::= 
            {
              String RESULT =null;
		 RESULT="void";
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMCALL",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARCALL ::= VALOR COMA VARCALL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 val = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = val.getTipo() + "x" + v;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARCALL ::= VALOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = v.getTipo();
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARCALL",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICIONP AND M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    cuadruplos.completa(c.getListaVerdadera(),m.getNum());
                    ArrayList<Integer> listaFalsa = fusiona(c.getListaFalsa(),c1.getListaFalsa());                    
                    RESULT = new Condiciones(c1.getListaVerdadera(),listaFalsa);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= CONDICIONP OR M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    cuadruplos.completa(c.getListaFalsa(),m.getNum());
                    ArrayList<Integer> listaVerdadera = fusiona(c.getListaVerdadera(),c1.getListaVerdadera());
                    RESULT = new Condiciones(listaVerdadera,c1.getListaFalsa());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= NOT CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = new Condiciones(c.getListaFalsa(),c.getListaVerdadera());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Condiciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones e;
                    if (o.equals("=")){
                        if ( v.getTipo().equals(v2.getTipo()) ){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF=",v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        } else {
                            e = null;
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es del mismo tipo que " + v2.getTipo());
                        }
                    } else {
                        if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF"+o,v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        } else {
                            e = null;
                            if (!v.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                            if (!v2.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " " + v.getTipo() + " no es INTEGER");
                            }
                        }                        
                    }
                    RESULT = e;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCONDICION ::= OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=o; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCONDICION ::= IGUAL 
            {
              String RESULT =null;
		 RESULT="="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGN ::= identificador OPASIGN VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);                    
                    if (posID == -1){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        String tipo  = tablaSimbolos.getTipoID(posID);
                        if (tipo.equals(v.getTipo())){
                            //cuadruplo con el o
                            if (o.equals("=")){
                                cuadruplos.addCuadruplo("=",v.getValor(),id);
                            } else {
                                if (o.charAt(0) == '*'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("*",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '/'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("/",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '-'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("-",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                                if (o.charAt(0) == '+'){
                                    String temp = nuevoTemp();
                                    cuadruplos.addCuadruplo("+",id,v.getValor(),temp);
                                    cuadruplos.addCuadruplo("=",temp,id);
                                }
                            }
                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) +  " "+ id + " esperaba un "+ tipo + " y se le está asignando un "+ v.getTipo());
                        }
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGN ::= identificador IGUAL READ 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
                    cuadruplos.addCuadruplo("readline",id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGN ::= LLAMADOSTRUC OPASIGN VALOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = "";
                    if (v.equals("STRING") && ustr.equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("STRING")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!ustr.equals("STRING")){
                            errores.add("Error: Linea: "+ (ustrleft + 1) + " Columna: " + (ustrright + 1) + " se esperaba un STRING no un "+ustr.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + ustr.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // UNIRSTRNG ::= VALUNIRSTR CONCATSTRING VALUNIRSTR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = "";                   
                    if (v.getTipo().equals("STRING") && v2.getTipo().equals("STRING")){
                        tipo = "STRING";
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("STRING")){                        
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING no un "+v.getTipo());
                        }
                        if (!v2.getTipo().equals("STRING")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esperaba un STRING no un "+v2.getTipo());
                        }
                    }
                    RESULT = new Objeto2(tipo,v.getValor() + v2.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("UNIRSTRNG",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALUNIRSTR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUNIRSTR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALUNIRSTR",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPASIGN ::= IGUAL 
            {
              String RESULT =null;
		 RESULT="="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPASIGN ::= OPMULTI IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 RESULT=op+"="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPASIGN ::= OPADICION IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 RESULT=op+"="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPASIGN",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPARIT ::= OPARIT OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oPa,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPARIT ::= OPARIT OPMULTI VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (o.getTipo().equals("INTEGER") && v.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo
                        cuadruplos.addCuadruplo(oM,v.getValor(),o.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPARIT ::= PARENTESISL OPARIT PARENTESISR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 
                    RESULT = o;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPARIT ::= VALOR OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oPa,v.getValor(),v2.getValor(),temp);
                    } else {
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPARIT ::= VALOR OPMULTI VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo;
                    String temp = nuevoTemp();
                    if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                        tipo = "INTEGER";
                        //cuadruplo                        
                        cuadruplos.addCuadruplo(oM,v.getValor(),v2.getValor(),temp);
                    } else {                        
                        tipo = "ERROR";
                        if (!v.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esparaba un INTEGER");
                        }
                        if (!v2.getTipo().equals("INTEGER")){
                            errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " se esparaba un INTEGER");
                        }
                    }
                    RESULT = new Objeto2(tipo,temp);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= INTEGER 
            {
              Objeto2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = new Objeto2("INTEGER",i);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = new Objeto2("STRING",str.substring(1,str.length()-1));
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= TRUE 
            {
              Objeto2 RESULT =null;
		
                    RESULT = new Objeto2("BOOLEAN","TRUE");
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= FALSE 
            {
              Objeto2 RESULT =null;
		
                    RESULT = new Objeto2("BOOLEAN","FALSE");
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= NEW CALL 
            {
              Objeto2 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= CALL 
            {
              Objeto2 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    String tipo = c.getTipo();
                    if (c.equals("void")){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (cleft + 1) + " Columna: " + (cright + 1) + " un procedure no puede ser asignado a una variable");
                    }
                    RESULT = new Objeto2(tipo,c.getValor());
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    RESULT = ustr;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }

                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= OPARIT 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    //ojooooooooooooooooooooooooooooo
                    RESULT = o;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= DIM T 
            {
              Object RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T ::= identificador AS TIPO IGUAL VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    } else {
                        if (t.equals(v.getTipo())){

                        } else {
                            errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no se puede asignar un "+ v.getTipo() + " en un "+t);
                        }
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T ::= identificador AS TIPO COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T ::= identificador COMA CANTVARS COMA VARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T ::= identificador COMA CANTVARS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T ::= identificador AS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }   
                    posActualTabla+=1;                
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARS ::= CANTVARS COMA VARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARS ::= CANTVARS 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = c; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CANTVARS ::= identificador COMA CANTVARS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,c);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = c;                    
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CANTVARS ::= identificador AS TIPO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                    
                    int posSimbolo = tablaSimbolos.buscarSimbolo(id,t);
                    boolean esValida = tablaSimbolos.comprobarAmbito(posSimbolo);
                    if (!esValida){
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " ya existe la variable "+ id + " en ese ambito");
                    }
                    posActualTabla+=1;
                    RESULT = t;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CANTVARS",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= INTEGERTYPE 
            {
              String RESULT =null;
		 RESULT="INTEGER"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= STRINGTYPE 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= BOOLEANTYPE 
            {
              String RESULT =null;
		 RESULT="BOOLEAN"; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=id; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WRCONSOLE ::= WRITE PARENTESISL VALWR PARENTESISR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                    if (!v.getTipo().equals("ERROR")){
                        cuadruplos.addCuadruplo("write",v.getTipo(),v.getValor());
                    } else {
                        errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " se esperaba un STRING en el write.line"); 
                    }
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WRCONSOLE",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALWR ::= identificador 
            {
              Objeto2 RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    int posID = tablaSimbolos.buscarID(id,posActualTabla);
                    String tipo;
                    if (posID == -1){
                        tipo = "ERROR";
                        errores.add("Error: Linea: "+ (idleft + 1) + " Columna: " + (idright + 1) + " no existe "+ id + " en este ambito");
                    } else {
                        tipo = tablaSimbolos.getTipoID(posID);
                    }
                    RESULT = new Objeto2(tipo,id);
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALWR ::= STRING 
            {
              Objeto2 RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = new Objeto2("STRING",str.substring(1,str.length()-1)); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALWR ::= UNIRSTRNG 
            {
              Objeto2 RESULT =null;
		int ustrleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int ustrright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 ustr = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = ustr; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALWR",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT = new Marcador(cuadruplos.siguienteCuad(),0); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		  ArrayList<Integer> retVal = creaLista(cuadruplos.siguienteCuad());  
                    cuadruplos.addCuadruplo("GOTO","");
                    RESULT = retVal; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("N",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
